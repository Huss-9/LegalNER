GroundTruth,ModelOutput,ExecutionTime
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Najmi Waziri']"", ""LAWYER"": ""['S.P. Jain', 'Himanshu Gambhir', 'Nar Singh', 'Pushkar Singh Kanwal', 'Arvind Chaudhary', 'Ram Kawar', 'Amit Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Oriental Insurance Co Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Zaixhu Xie', 'Qualcomm India Pvt Ltd']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: $~40 * In The High Court Of Delhi At New Delhi % Decided on: 31.07.2019 + Mac.App. 976/2018 & Cm Nos. 46122/2018, 15243/2019, 34195/2019 Oriental Insurance Co Ltd. ..... Appellant Through: Mr. S.P. Jain, Mr. Himanshu Gambhir, Mr. Nar Singh and Mr. Pushkar Singh Kanwal, Advocates. Versus Zaixhu Xie & Ors (M/S Qualcomm India Pvt Ltd ) ..... Respondents Through: Mr. Arvind Chaudhary, Advocate for Respondent Nos. 1& 2. Mr. Ram Kawar, Advocate for Mr. Amit Kumar Gupta, Advocate for Respondent No.4. Coram: Hon'Ble Mr. Justice Najmi Waziri Najmi Waziri, J. (Oral) [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Najmi Waziri']"", ""LAWYER"": ""['S.P. Jain', 'Himanshu Gambhir', 'Nar Singh', 'Pushkar Singh Kanwal', 'Arvind Chaudhary', 'Ram Kawar', 'Amit Kumar Gupta']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Oriental Insurance Co Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Zaixhu Xie']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.210893869400024
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Parmar Samantsinh Umedsinh', 'State Election Commission', 'Narendra Kumar Ambalal Ravat']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Gujarat', 'Virendrasinh Mafaji Vaghela']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal No. 706 Of 2021 (Arising Out Of Slp(C)No.24950 Of 2015) Parmar Samantsinh Umedsinh … Appellant Vs. State Of Gujarat & Ors. … Respondents With Civil Appeal No. 707 Of 2021 (Arising Out Of Slp(C)No.30635 Of 2015) State Election Commission … Appellant Vs. Virendrasinh Mafaji Vaghela & Ors. … Respondents With Writ Petition (C)No.786 Of 2020 Narendra Kumar Ambalal Ravat … Appellant Vs. State Of Gujarat & Ors. … Respondents J U D G M E N T [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Parmar Samantsinh Umedsinh', 'Virendrasinh Mafaji Vaghela', 'Narendra Kumar Ambalal Ravat']"", ""PETITIONER"": ""['State Election Commission']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Gujarat']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.327012300491331
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Gujarat At Ahmedabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['J.B.Pardiwala']"", ""LAWYER"": ""['H N Sevak', 'Moxa Thakkar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Harishankar Gayaprasad Jaiswal']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Gujarat']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: R/Scr.A/9089/2017 Judgment In The High Court Of Gujarat At Ahmedabad Special Criminal Application No. 9089 of 2017 For Approval And Signature: Honourable Mr.Justice J.B.Pardiwala Sd/- ========================================================== 1 Whether Reporters of Local Papers may be allowed to see the Yes judgment ? 2 To be referred to the Reporter or not ? Yes 3 Whether their Lordships wish to see the fair copy of the No judgment ? 4 Whether this case involves a substantial question of law as to No the interpretation of the Constitution of India or any order made thereunder ? Circulate this Judgment in the Subordinate Judiciary. ========================================================== Harishankar Gayaprasad Jaiswal.... Petitioner Versus State Of Gujarat & 3.... Respondents ========================================================== Appearance: Mr H N Sevak for the PETITIONER(s) No. 1 Ms Moxa Thakkar, App for the RESPONDENT(s) No. 1 ========================================================== Coram: Honourable Mr.Justice J.B.Pardiwala Date : 08/03/2018 Oral Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Gujarat At Ahmedabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['J.B.Pardiwala']"", ""LAWYER"": ""['Harishankar Gayaprasad Jaiswal', 'Moxa Thakkar', 'H N Sevak']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Harishankar Gayaprasad Jaiswal']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Gujarat']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.33271050453186
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature For Rajasthan Bench At Jaipur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bansidhar Sharma Devagya']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Rajasthan', 'Commissioner, Devasthan, Rajasthan, Jaipur', 'Collector, Jaipur District, Jaipur']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature For Rajasthan Bench At Jaipur S.B. Civil First Appeal No.86/1979 Pt. Bansidhar Sharma Devagya (since deceased) represented by 1/1. Vijay Kumar Sharma) 1/2. Mohan Lal Sharma ) Sons of Shri Bansidhar 1/3. Purshottam ) 1/4. Smt. Krishan Kanta Misra W/o Shri Mahesh Kumar Misra d/o Shri Bansidhar Sharma All residents of Baiji Ka Mandir, Manak Chowk Chaupar, Jaipur. ----Appellants Versus 1. The State of Rajasthan. 2. The Commissioner, Devasthan, Rajasthan, Jaipur. 3. The Collector, Jaipur District, Jaipur. ----Respondents [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature For Rajasthan Bench At Jaipur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Bansidhar Sharma', 'Vijay Kumar Sharma', 'Mohan Lal Sharma', 'Purshottam', 'Krishan Kanta Misra', 'Mahesh Kumar Misra']"", ""PETITIONER"": ""['Bansidhar Sharma Devagya']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Rajasthan', 'Commissioner, Devasthan, Rajasthan, Jaipur', 'Collector, Jaipur District, Jaipur']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.116246461868286
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Madras']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'Subramonium Prasad']"", ""LAWYER"": ""['UM.Ravichandran', 'K.Soundararajan', 'G.Janakiraman', 'C.Prabakaran', 'Rameshwar', 'L.Chandrakumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['V.Sheela']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['District Collector, Thiruvallur District.', 'Tahsildar, Poonamallee.', 'Block Development Officer, Poonamallee.', 'Executive Engineer, Chennai Metrological Water Supply and Sewage Board, Chintadripet, Chennai - 600 002', 'Devaraj']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 In The High Court Of Judicature At Madras Dated: 04 / 10 /2019 Coram The Hon'Ble Mr.Justice S.Manikumar And The Hon'Ble Mr.Justice Subramonium Prasad Writ Petition Nos.15304, 17384, 18264, 19596, 21299 & 21917 of 2019 and WMP.Nos.17623, 21215 & 20518 of 2019 WP.No.15304 of 2019 Mrs.V.Sheela ... Petitioner Vs 1. The District Collector, Thiruvallur District. 2. The Tahsildar, Poonamallee. 3. Block Development Officer, Poonamallee. 4. The Executive Engineer, Chennai Metrological Water Supply and Sewage Board, Chintadripet, Chennai - 600 002. 5. Mr.Devaraj ... Respondents Prayer in WP.No.15304 of 2019: Petition filed under Article 226 of the Constitution of India praying for the issuance of a writ of mandamus to http://www.judis.nic.in direct the respondents 1 to 4 to take necessary action against the illegal extraction of ground water without proper approval from authorities concerned at vacant land owned by 5th respondent which is situated at near Om Sakthi Hotel, Selliyamman Koil Street, Gopurasanallur, Kattupakkam, Chennai-56 by considering representation dated 19.04.2019. Mr.UM.Ravichandran for R5 (in WP.No.15304/19) Mr.K.Soundararajan for R4 & R5 (in WP.No.17384/2019) Mr.G.Janakiraman for R2 (in WP.No.18264/19) Mr.C.Prabakaran for R9 (in WP.No.18264/19) Mr. Rameshwar,TNEB - R6 (in WP.No.21299/19) Mr.L.Chandrakumar (Advocate Commissioner) Common Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Madras']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'Subramonium Prasad']"", ""LAWYER"": ""['V.Sheela', 'Devaraj', 'UM.Ravichandran', 'K.Soundararajan', 'G.Janakiraman', 'C.Prabakaran', 'Rameshwar', 'L.Chandrakumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['V.Sheela']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 226']"", ""RESPONDENT"": ""['District Collector, Thiruvallur District', 'Tahsildar, Poonamallee', 'Block Development Officer, Poonamallee', 'Executive Engineer, Chennai Metrological Water Supply and Sewage Board, Chintadripet, Chennai - 600 002', 'Mr.Devaraj']"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",19.28115582466125
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Madurai Bench Of Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.M.Subramaniam']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['G.Balasubramanian']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Government of Tamil Nadu', 'Secretary/Additional Director, Department of Finance, Fort St. George, Chennai', 'Director of Medical Education, Kilpauk, Chennai', 'Dean, Thoothukudi Government Medical College, Thoothukudi District']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: W.P.(MD).Nos.17981, 17982 and 17983 of 2017, 17297, 17298 and 17299 of 2015 Before The Madurai Bench Of Madras High Court Dated: 07.08.2019 Coram: The Honourable Mr.Justice S.M.Subramaniam W.P.(MD).Nos.17981, 17982 and 17983 of 2017, 17297, 17298 and 17299 of 2015 and MP(MD)Nos.1,1,1,2,2 and 2 of 2015 W.P.(MD).No.17981 of 2015 G.Balasubramanian ... Petitioner -Vs- 1.The Government of Tamil Nadu, Rep. by its Secretary, Department of Health and Family Welfare, Fort St. George, Chennai. 2.The Secretary/Additional Director, Department of Finance, Fort St. George, Chennai. 3.The Director of Medical Education, Kilpauk, Chennai. 4.The Dean, Thoothukudi Government Medical College, Thoothukudi District. ... Respondents [/INST]
 {""CASE_NUMBER"": ""['W.P.(MD).Nos.17981, 17982 and 17983 of 2017', 'W.P.(MD).No.17297, 17298 and 17299 of 2015', 'MP(MD)Nos.1,1,1,2,2 and 2 of 2015']"", ""COURT"": ""['Madurai Bench Of Madras High Court']"", ""DATE"": ""['07.08.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""['S.M.Subramaniam']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['G.Balasubramanian']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Government of Tamil Nadu', 'Secretary/Additional Director, Department of Finance, Fort St. George, Chennai', 'Director of Medical Education, Kilpauk, Chennai', 'Dean, Thoothukudi Government Medical College, Thoothukudi District']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",19.454994440078732
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Anil K.Narendran', 'M.R.Anitha']"", ""LAWYER"": ""['Deepak Joy.K.', 'Alexander Joseph']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Simon K.J.', 'Friends Arts Club, Regd No E.R.30/73, Chirakkakam Village', 'Friends Arts Club, Regd No E R 30/73, Chirakkakam Village', 'Friends Arts Club, Regd No E.R 30/73, Chirakkakam, Varappuzha']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Mangamma @ Brejith Andrews', 'Ginu Andrews']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Kerala At Ernakulam Present The Honourable Mr. Justice Anil K.Narendran & The Honourable Mrs. Justice M.R.Anitha Tuesday, The 7Th Day Of September 2021 / 16Th Bhadra, 1943 Rcrev. No. 164 Of 2020 Rca 11/2019 Of Additional District Court & Rent Control Appellate Authority, North Paravur, Ernakulam Revision Petitioners/Appellants/Respondents 1 Simon K.J. Aged 69 Years S/O Joseph, Kunnant House, Chirakkakam P.O.Varappuzha-683 517, Ernakulam District 2 Friends Arts Club, Regd No E.R.30/73, Chirakkakam Village, Represented By Its Present Secretary, K.J. Simon 3 Friends Arts Club, Regd No E R 30/73, Chirakkakam Village, Represented By Its Present Treasurer, K Sasidharan. 4 Friends Arts Club, Regd No E.R 30/73, Chirakkakam, Varappuzha P.O.Represented By Its Present President, K.B. Saraf, Aged 70 Years, S/O Bava, Kunnanattu Veettil, Chariyamthuruthu Kara, Kadamakkudy Village, Kanayannur Taluk By Adv Deepak Joy.K. Respondents/Respondents/Petitioners 1 Mangamma @ Brejith Andrews Aged 64 Years W/O Late Andrews, Kunnat House, Varappuzha, Ernakulam District, Now Residing At Vettikuzha House, Chelad P.O.Kothamangalam, Ernakulam District, Pin-686 692. R.C.R.No.164 of 2020 2 2 Ginu Andrews, Aged 31 Years S/O Late Andrews, Kunnat House, Varappuzha, Ernakulam District, Now Residing At Vettikuzha House, Chelad P.O.Kothamangalam, Ernakulam District, Pin-686 692. By Adv Sri.Alexander Joseph This Rent Control Revision Having Been Finally Heard On 2.8.2021,The Court On 7.9.2021 Delivered The Following: R.C.R.No.164 of 2020 3 Order [/INST]
 {""CASE_NUMBER"": ""['R.C.R.No.164 of 2020']"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""['2.8.2021', '7.9.2021']"", ""GPE"": ""['Chirakkakam', 'Varappuzha', 'Kanayannur', 'Kothamangalam']"", ""JUDGE"": ""['Anil K.Narendran', 'M.R.Anitha']"", ""LAWYER"": ""['Deepak Joy', 'Alexander Joseph']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Simon K.J.', 'K.B. Saraf', 'K.Sasidharan', 'Ginu Andrews']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Mangamma @ Brejith Andrews', 'Ginu Andrews']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",16.57990527153015
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Metropolitan Magistrate\\xad09, South\\xadWest District, Dwarka Courts, New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Bharti Garg']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['State']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Manish @ Tolly']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The Court Of Ms. Bharti Garg, Metropolitan Magistrate­09, South­West District, Dwarka Courts, New Delhi Fir No. 105/19 Ps Domestic Airport Under Section 4 (a) Dpt Mt Act Cr. Case no. 16812/19 Cnr no. Dlsw020504172019 In The Matter Of:­ State ...........Prosecution Vs. Manish @ Tolly S/o Sh. Babu Lal R/o H. no.9/60, East Mehram Nagar, Delhi. .............Accused 1. Name of complainant : Ct. Ram Raj no.330­A 2. Name of accused : Manish @ Tolly 3. Offence complained of : Under Section 4(a), The Delhi Prevention of Touting and Malpractices against Tourist Act, 2010. 4. Plea of accused : Not guilty 5. Date of commission of offence : 19.08.2019 6. Date of institution of case : 28.09.2019 7. Date of reserving judgment : 13.12.2021 8. Date of pronouncement : 17.12.2021 9. Final judgment : Acquitted State Vs. Manish @ Tolly Cnr no. Dlsw020504172019 Page no.1/8 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Metropolitan Magistrate\\xad09, South\\xadWest District, Dwarka Courts, New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Bharti Garg']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['State']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 4 (a)']"", ""RESPONDENT"": ""['Manish @ Tolly']"", ""STATUTE"": ""['Delhi Prevention of Touting and Malpractices against Tourist Act, 2010']"", ""WITNESS"": ""[]""}",13.310911893844604
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['M. Seetharama Murti', 'M.Seetharama Murti']"", ""LAWYER"": ""['K. Venugopal Reddy', 'N. Siva Reddy']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bhaskara Wines']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of A.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'Ble Sri Justice M. Seetharama Murti Writ Petition No.22851 of 2018 13.08.2018 M/s. Bhaskara Wines I . Petitioner The State of A.P. rep., by its Principal Secretary, Revenue Department (Excise), Secretariat, Velagapudi, Guntur District & Counsel for the petitioner: Sri K. Venugopal Reddy Counsel for the Respondents 1 to 4 : Government Pleader for Proh.& Excise Counsel for the respondent no.5 : Sri N. Siva Reddy <Gist : >Head Note: ? Cases referred: 1.1996(1) Ald 476 (Db) 2.2003 (4) Ald 519 3.2008(1) Ald 138 4.Air 2008 Sc 2594 5.2007(3) Ald 128 (Db) The Honble Sri Justice M.Seetharama Murti Writ Petition No.22851 of 2018 Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['M. Seetharama Murti']"", ""LAWYER"": ""['K. Venugopal Reddy', 'N. Siva Reddy']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bhaskara Wines']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of A.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.921203851699827
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Tata Motors Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Jharkhand']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal Nos. 5299-5304 Of 2003 M/S. Tata Motors Limited .....Appellant(S) Versus State Of Jharkhand And Others .....Respondent(S) With Civil Appeal No. 6591 Of 2003 And Civil Appeal Nos. 8-12 Of 2004 Judgment [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal Nos. 5299-5304', 'Civil Appeal No. 6591', 'Civil Appeal Nos. 8-12']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Tata Motors Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Jharkhand']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.74616289138794
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Rajeev Ranjan Prasad']"", ""LAWYER"": ""['Sanjay Singh', 'Nirbhay Prashant', 'Lalit Kishore', 'Gyan Shankar', 'Iqbal Asif Niazi', 'Raju Giri']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Cobra Industrial Security Forces (I) Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Bihar', 'Bihar School Examination Board Main Building, Sinha Library Road, Patna', 'Chairman Bihar School Examination Board, Main Building, Sinha Library Road, Patna', 'Secretary Bihar School Examination Board, Main Building, Sinha Library Road, Patna']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Judicature At Patna (From Residential Office Via Video Application) Civil Writ Jurisdiction Case No.6237 of 2020 ====================================================== M/s Cobra Industrial Security Forces (I) Ltd. A company duly registered under the provision of the companies Act, 1956 having its registered office at Tiwary Mansion, Kamla Nagar, near Akash Trading Kokar P.S. Sadar, District Ranchi, Jharkhand and one of its Local Office At Samvedan, Ravikar Lane, Gujral Path, Keshari Nagar, P.S.- Shastrinagar, Patna. Through its Director Sunil Kumar Tiwary, Aged about 49 Yrs., Male, Son of Late Capt. S.N. Tiwary, P.S.- Sadar, Ranchi, Jharkhand. ... ... Petitioner/s Versus 1. The State of Bihar through the Director, Department of Education, Government of Bihar, Vikas Bhavan, Bailey Road, Patna. 2. Bihar School Examination Board Main Building, Sinha Library Road, Patna, through its Chairman. 3. The Chairman Bihar School Examination Board, Main Building, Sinha Library Road, Patna. 4. The Secretary Bihar School Examination Board, Main Building, Sinha Library Road, Patna. ... ... Respondent/s ====================================================== Appearance : For the Petitioner/s : Mr. Sanjay Singh, Adv. Mr.Nirbhay Prashant, Adv. For the Bseb : Mr.Lalit Kishore, Sr.Adv. Mr. Gyan Shankar, Adv. For the State : Mr. Iqbal Asif Niazi, Ac to Gp-5 For the Intervenor : Mr. Raju Giri, Adv. ====================================================== Coram: Honourable Mr. Justice Rajeev Ranjan Prasad Cav Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Rajeev Ranjan Prasad']"", ""LAWYER"": ""['Sanjay Singh', 'Nirbhay Prashant', 'Gyan Shankar', 'Iqbal Asif Niazi', 'Raju Giri']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Cobra Industrial Security Forces (I) Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Bihar', 'Bihar School Examination Board', 'Bihar School Examination Board', 'Bihar School Examination Board']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.36288046836853
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Assam Public Works']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Reportable In The Supreme Court Of India Civil Original Jurisdiction Writ Petition (Civil) No.274 Of 2009 Assam Public Works Petitioner(S) Versus Union Of India & Ors. Respondent(S) With I.A. Nos.114781, 114788, 114807, 114814, 116964, 117074, 117697 and 117689 of 2019 Order [/INST]
 {""CASE_NUMBER"": ""['Civil Original Jurisdiction', 'I.A. Nos.114781, 114788, 114807, 114814, 116964, 117074, 117697 and 117689 of 2019']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Assam Public Works']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.652262687683104
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['S U P R E M E C O U R T O F I N D I A']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Abhay S. Oka']"", ""LAWYER"": ""['M.P. Parthiban', 'A.S. Vairawan', 'R. Sudhakaran', 'Shalini Mishra', 'T. Hari Hara Sudhan', 'Vikash G.R.']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rammaiah']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Item No.62 Court No. 14 Section Ii-C (Hearing Through Video Conferencing) S U P R E M E C O U R T O F I N D I A Record Of Proceedings Special Leave Petition (Criminal) Diary No.27236/2021 Rammaiah Petitioner Versus State Rep. By Inspector Of Police & Ors. Respondent(s) (For Admission ; I.R. ; Ia No.144962/2021-FOR Exemption From Filing C/C Of The Impugned Judgment ; Ia No.144964/2021-FOR Exemption From Filing O.T. and Ia No.152342/2021-FOR Exemption From Surrendering Within Time ) Date : 03-12-2021 This petition was called on for hearing today. Coram : Hon'Ble Mr. Justice Abhay S. Oka [In Chambers] For Petitioner(s) Mr. M.P. Parthiban, Aor Mr. A.S. Vairawan, Adv. Mr. R. Sudhakaran, Adv. Mrs. Shalini Mishra, Adv. Mr. T. Hari Hara Sudhan, Adv. Mr. Vikash G.R., Adv. For Respondent(s) Upon hearing the counsel the Court made the following O R D E R [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Special Leave Petition (Criminal)']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Abhay S. Oka']"", ""LAWYER"": ""['M.P. Parthiban', 'A.S. Vairawan', 'R. Sudhakaran', 'Shalini Mishra', 'T. Hari Hara Sudhan', 'Vikash G.R.']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rammaiah']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.718312501907349
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh Bench Gwalior']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['G.S. Ahluwalia']"", ""LAWYER"": ""['Sankalp Sharma', 'Kushagra Raghuvanshi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Hemant Katare']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['O.P.S. Bhadoriya']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Ep No.5/2020 High Court Of Madhya Pradesh Bench Gwalior Single Bench: Hon'Ble Shri Justice G.S. Ahluwalia Election Petition No.5/2020 .........Petitioner(s): Hemant Katare Versus .......Respondent(s) : O.P.S. Bhadoriya ----------------------------------------------------------------------------------------- Shri Sankalp Sharma, Counsel for the petitioner. Shri Kushagra Raghuvanshi, Counsel for the respondent. ---------------------------------------------------------------------------------------- Date of hearing : 31/01/2022 Date of Judgment : 03/02/2022 Whether approved for reporting : Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh Bench Gwalior']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['G.S. Ahluwalia']"", ""LAWYER"": ""['Sankalp Sharma', 'Kushagra Raghuvanshi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Hemant Katare']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['O.P.S. Bhadoriya']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.804460287094116
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Anu Malhotra']"", ""LAWYER"": ""['Bharat Gupta', 'Gunjan Arora', 'Aashaa Tiwari,', 'Ashok Mahipal', 'Mukesh Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Jsb Cargo And Freight Forwarder Pvt. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: * In The High Court Of Delhi At New Delhi Judgment reserved on: 26.11.2021 Date of decision: 20.12.2021 + Crl.M.C.2663/2021 M/S Jsb Cargo And Freight Forwarder Pvt. Ltd. & Ors ..... Petitioners Through: Mr.Bharat Gupta and Mr.Gunjan Arora, Advocates. Versus State & Anr. ..... Respondents Through: Ms.Aashaa Tiwari, App for State Mr.Ashok Mahipal,Advocate for R-2. + Crl.M.C.2730/2021 M/S Jsb Cargo And Freight Forwarder Pvt. Ltd.And Ors. ..... Petitioners Through: Mr.Bharat Gupta and Mr.Gunjan Arora, Advocates. Versus State & Anr. ..... Respondents Through: Mr.Mukesh Kumar, App for State. Mr.Ashok Mahipal,Advocate for R-2. Coram: Hon'Ble Ms. Justice Anu Malhotra Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Anu Malhotra']"", ""LAWYER"": ""['Bharat Gupta', 'Gunjan Arora', 'Aashaa Tiwari', 'Ashok Mahipal', 'Mukesh Kumar', 'Ashok Mahipal']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Jsb Cargo And Freight Forwarder Pvt. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.31347155570984
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature At Allahabad A.F.R. Reserved on 07.10.2021 Delivered on 13.12.2021 Case :- Writ - C No. - 59863 of 2015 Petitioner :- Sun Tower Residents Welfare Association Respondent :- Ghaziabad Development Authority through its Vice Chairman and 2 Others Counsel for Petitioner :- Prashant,Abhijeet Mukherji,Prashant,S.K. Pal Counsel for Respondent :- Ram Bilas Yadav,Anoop Tivedi,Anoop Trivedi (Senior Adv.),Himanshu Tyagi,Kartikeya Saran,Rahul Agarwal,Rakesh Kumar Singh,S.Shekhar,Vrindavan Mishra Connected with Case :- Writ - C No. - 11072 of 2017 Petitioner :- Sun Tower Residents Welfare Association through Vice President Respondent :- Ghaziabad Development Authority through its Vice Chairman and 2 Others Counsel for Petitioner :- Abhijeet Mukherji,S. Shekhar,Vrindavan Mishra Counsel for Respondent :- C.S.C.,Ram Bilas Yadav,Tarun Agrawal Hon'ble Arvind Kumar Mishra-I,J. Hon'ble Naveen Srivastava,J. [Per Arvind Kumar Mishra-I, J.] [/INST]
 {""CASE_NUMBER"": ""['A.F.R. Reserved on 07.10.2021', 'Writ - C No. - 59863 of 2015', 'Petitioner :- Sun Tower Residents Welfare Association', 'Respondent :- Ghaziabad Development Authority through its Vice Chairman and 2 Others', 'Counsel for Petitioner :- 'Prashant,Abhijeet Mukherji,Prashant,S.K. Pal', 'Counsel for Respondent :- 'Ram Bilas Yadav,Anoop Tivedi,Anoop Trivedi (Senior Adv.),Himanshu Tyagi,Kartikeya Saran,Rahul Agarwal,Rakesh Kumar Singh,S.Shekhar,Vrindavan Mishra', 'Connected with Case :- Writ - C No. - 11072 of 2017', 'Petitioner :- Sun Tower Residents Welfare Association through Vice President', 'Respondent :- Ghaziabad Development Authority through its Vice Chairman and 2 Others', 'Counsel for Petitioner :- 'Abhijeet Mukherji,S. Shekhar,Vrindavan Mishra', 'Counsel for Respondent :- 'C.S.C.,Ram Bilas Yadav,Tarun Agrawal', 'Hon\'b\'le Arvind Kumar Mishra-I,J.', 'Hon\'b\'le Naveen Srivastava,J.', 'J'}",22.58476591110229
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Mohit Kumar Shah']"", ""LAWYER"": ""['Jitendra Kishore Verma', 'Prasoon Sinha', 'Yashraj Bhardhan']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Sanjay Singh', 'Arti Banerjee @ Arati Banarjee', 'Prakash Kumar', 'Gajendra Mohan Mishra', 'Gunendra Mohan Misra', 'Nirendra Mohan Mishra']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Patna Municipal Corporation, Mauryalok Complex, Patna', 'Municipal Commissioner, Patna Municipal Corporation at Mauryalok Complex, Patna', 'Vigilance Officer, Patna Municipal Corporation at Mauryalok Complex, Patna', 'Executive Officer, Patna Municipal Corporation at Mauryalok Complex, Patna', 'Town Commissioner, Patna Municipal Corporation at Mauryalok Complex, Patna', 'Assistant Engineer, Nutan Rajdhani Anchal, Patna Municipal Corporation, Mauryalok Complex, Patna', 'Additional Town Commissioner, Patna Municipal Corporation at Mauryalok Complex, Patna', 'Maa Shambhavi Engicon Pvt. Ltd.', 'Patna Municipal Corporation', 'Municipal Commissioner, Patna Municipal Corporation', 'Assistant Engineer, Patna Municipal Corporation', 'Vigilance Officer, Patna Municipal Corporation', 'Executive Engineer, Patna Municipal Corporation', 'Junior Engineer, Patna Municipal Corporation. Patna Municipal Corporation', 'Patna Municipal Corporation, Patna', 'Patna Municipal Corporation, Patna Municipal Corporation, Maurya Lok Building, Patna 800001', '. Prakash Kumar @ Munna ji']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Judicature At Patna Civil Writ Jurisdiction Case No.6546 of 2017 ====================================================== Shri Sanjay Singh son of Late Nityanand Singh, resident of 134/B, Mohalla, P.O. and P.S.- Sri Krishnapuri, District- Patna at present resident of A-13, Friends Colony East, New Delhi, 110065. ... ... Petitioner Versus 1. Patna Municipal Corporation, Mauryalok Complex, Patna, through its Municipal Commissioner. 2. Municipal Commissioner, Patna Municipal Corporation at Mauryalok Complex, Patna. 3. Vigilance Officer, Patna Municipal Corporation at Mauryalok Complex, Patna. 4. Executive Officer, Patna Municipal Corporation at Mauryalok Complex, Patna. ... ... Respondent/s ====================================================== with Civil Writ Jurisdiction Case No. 2432 of 2017 ====================================================== Smt. Arti Banerjee @ Arati Banarjee Wife of Late Debanshu Banerjee, Resident of Plot No. 215, Type- A, Srikrishnapuri, P.S. Srikrishnapuri, District and Town- Patna. ... ... Petitioner/s Versus 1. Patna Municipal Corporation, Mauryalok Complex, Patna, through Town Commissioner. 2. Town Commissioner, Patna Municipal Corporation at Mauryalok Complex, Patna. 3. Assistant Engineer, Nutan Rajdhani Anchal, Patna Municipal Corporation, Mauryalok Complex, Patna. 4. Additional Town Commissioner, Patna Municipal Corporation at Mauryalok Complex, Patna. 5. Vigilance Officer, Patna Municipal Corporation at Mauryalok Complex, Patna. 6. Executive Officer, Patna Municipal Corporation at Mauryalok Complex, Patna. 7. Maa Shambhavi Engicon Pvt. Ltd. Through its Managing Director, Rajesh Kumar, Arya Kumar Road, Near Basti School, Patna ... ... Respondent/s ====================================================== Patna High Court Cwjc No.6546 of 2017 dt.02-11-2020 with Civil Writ Jurisdiction Case No. 7404 of 2017 ====================================================== Prakash Kumar son of Sri Murli Prasad Sinha resident of Plot No. 8E, Road No. 12, Rajendra Nagar, P.S. Kadam Kuan, Patna - 800001. ... ... Petitioner Versus 1. Patna Municipal Corporation Through Municipal Commissioner, Patna 2. Municipal Commissioner, Patna Municipal Corporation. 3. Assistant Engineer, Patna Municipal Corporation. 4. Vigilance Officer, Patna Municipal Corporation. 5. Executive Engineer, Patna Municipal Corporation. 6. Junior Engineer, Patna Municipal Corporation. Patna Municipal Corporation has its registered office at Maurya Lok Complex, Opposite Kotwali Police Station, Patna - 800001. ... ... Respondent/s ====================================================== with Civil Writ Jurisdiction Case No. 10975 of 2017 ====================================================== 1. Gajendra Mohan Mishra Son of late Justice Gobind Misra, residence in India Plot No. 165B Srikrishnapuri, Sahdeo Mahto Marg, Patna 800001. 2. Gunendra Mohan Misra, Son of late Justice Gobind Mohan Misra, Permanent Resident of Plot No. 165B Srikrishnapuri, Sahdeo Mahto Marg, Patna 800001 and at Present residing at Block B-304,Bansal Plaza, Station Road, Ranchi-834001. 3. Nirendra Mohan Mishra, Son of Late Justice Gobind Mohan Misra Permanent Resident of Plot No. 165B Srikrishnapuri, Sahdeo Mahto Marg, Patna 800001. ... ... Petitioner/s Versus 1. The Patna Municipal Corporation, Patna through the Patna Municipal Commissioner, Maurya Lok Building, Patna 800001. 2. The Patna Municipal Corporation, Patna Municipal Corporation, Maurya Lok Building, Patna 800001 3. Prakash Kumar @ Munna ji, Son of Murali Prasad Sinha, Apurana Developers private Limited, Plot No. 8E, Road No. 12, Rajendra Nagar, Ps- Kadamkuan, Patna. ... ... Respondent/s ====================================================== Appearance : (In Cwjc No. 6546 of 2017) For the Petitioner/s : Mr. Jitendra Kishore Verma Adv. Patna High Court Cwjc No.6546 of 2017 dt.02-11-2020 For the Respondent/s : Mr. Prasoon Sinha, Adv. (In Cwjc No. 2432 of 2017) For the Petitioner/s : Mr. Jitendra Kishore Verma Adv. For the Respondent/s : Mr. Yashraj Bhardhan, Adv. ====================================================== Coram: Honourable Mr. Justice Mohit Kumar Shah Cav Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Mohit Kumar Shah']"", ""LAWYER"": ""['Jitendra Kishore Verma', 'Prasoon Sinha', 'Yashraj Bhardhan']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Sanjay Singh', 'Arti Banerjee', 'Prakash Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Patna Municipal Corporation', 'Municipal Commissioner', 'Assistant Engineer', 'Vigilance Officer', 'Additional Town Commissioner', 'Executive Officer', 'Maa Shambhavi Engicon Pvt. Ltd.', 'Gajendra Mohan Mishra', 'Gunendra Mohan Misra', 'Nirendra Mohan Mishra']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",18.117900371551517
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court For The State Of Telangana At: Hyderabad Coram: * The Hon'Ble Sri Justice K. Lakshman + Criminal Petition No.152 Of 2020 & Batch % Delivered on: 05-07-2021 Between in Crl.P. No.152 of 2020: # Mr. Mohd. Jameel Ahmed .. Petitioner Vs. $ The State of Telangana, rep.by Public Prosecutor High Court of Telangana, Hyderabad & another .. Respondents ! For respective Petitioners : Mr. M.A.K. Mukheed Mr. Gajanand Chakravarthy Mr. K. Surender Mr. Praveen Kumar Veerjala, Ms. P. Radhika Mr. Srinivas Reddy Balakisti Ms. C. Sunitha Kumari Mr. Kondadi Ajay Kumar Mr. S.M. Subhan Ms. N. Arthi Mr. Y. Bala Murali Mr. Boggula Raju Mr. S. Chandrasekhar Mr. V. Yadukrishna Sainath Respective learned counsel ^ For Respondents : Learned Public Prosecutor < Gist : 4. Crl.P. No.3731 of 2018 & batch, decided on 27.08.2018 5. 2020 (1) Alt (Crl.) 215 (Aphc) 6. 1995 (1) Scj 277 7. 2011 (2) Crimes 250 8. 2017 Scc Online Cal 16323 9. 2002 Crl.L.J. 2872 10. 1992 Supp (1) Scc 335 11. 2020 Supreme (Ap) 348 12. Criminal Petition No.5323 of 2009, decided on 17.09.2009 13. Criminal Petition No.15248 of 2016, decided on 26.10.2016 Kl,J Crl.P. No.152 of 2020 & batch Hon'Ble Sri Justice K. Lakshman Criminal Petition Nos.152, 153, 155 & 162 Of 2020 And 3498, 3500, 3509, 3514, 3768, 3879, 4046, 4070, 4077, 4098, 4099, 4100, 4102, 4110, 4119, 4140, 4141, 4151, 4157, 4178, 4182, 4187, 4194, 4216, 4230, 4247, 4249, 4251, 4258, 4262, 4277, 4361, 4405, 4415, 4542, 4612, 4615, 4622, 4632, 4640, 4681, 4727, 4775, 4825 & 5826 Of 2021, Common Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court For The State Of Telangana At: Hyderabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['K. Lakshman']"", ""LAWYER"": ""['M.A.K. Mukheed', 'Gajanand Chakravarthy', 'K. Surender', 'Praveen Kumar Veerjala', 'P. Radhika', 'Srinivas Reddy Balakisti', 'C. Sunitha Kumari', 'Kondadi Ajay Kumar', 'S.M. Subhan', 'N. Arthi', 'Y. Bala Murali', 'Boggula Raju', 'S. Chandrasekhar', 'V. Yadukrishna Sainath']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Mohd. Jameel Ahmed']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Telangana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",18.95177912712097
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. Kumar']"", ""LAWYER"": ""['Uday Kumar', 'Vikash Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Vimal Anand']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Bihar', 'Principal Secretary, Registration, Excise and Prohibition Department, Government of Bihar, Patna', 'District Magistrate, Sitamarhi, District - Sitamarhi (Bihar)', 'Superintendent of Excise, Sitamarhi, District - Sitamarhi (Bihar)', 'Superintendent of Police, Sitamarhi, District - Sitamarhi (Bihar)', 'Station House Officer, Excise, Sitamarhi (Bihar)']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Judicature At Patna Civil Writ Jurisdiction Case No.1566 of 2022 ====================================================== Vimal Anand Son of Satya Narayan Mahto, Resident of Village - Rajwara Virta, Ward No. 02, P.S. - Sonbarsa, District - Sitamarhi, Pin Code - 843330 (Bihar). ... ... Petitioner/s Versus 1. The State of Bihar through the Principal Secretary, Registration, Excise and Prohibition Department, Government of Bihar, Patna. 2. The Principal Secretary, Registration, Excise and Prohibition Department, Government of Bihar, Patna. 3. The District Magistrate, Sitamarhi, District - Sitamarhi (Bihar) 4. The Superintendent of Excise, Sitamarhi, District - Sitamarhi (Bihar). 5. The Superintendent of Police, Sitamarhi, District - Sitamarhi (Bihar). 6. The Station House Officer, Excise, Sitamarhi (Bihar). ... ... Respondent/s ====================================================== Appearance : For the Petitioner/s : Mr.Uday Kumar, Advocate For the Respondent/s : Mr.Vikash Kumar (Sc 11) ====================================================== Coram: Honourable The Chief Justice and Honourable Mr. Justice S. Kumar Oral Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. Kumar']"", ""LAWYER"": ""['Uday Kumar', 'Vikash Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Vimal Anand']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Bihar', 'Principal Secretary, Registration, Excise and Prohibition Department, Government of Bihar, Patna', 'District Magistrate, Sitamarhi, District - Sitamarhi (Bihar)', 'Superintendent of Excise, Sitamarhi, District - Sitamarhi (Bihar)', 'Superintendent of Police, Sitamarhi, District - Sitamarhi (Bihar)', 'Station House Officer, Excise, Sitamarhi (Bihar)']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",17.219412088394165
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'Murali Purushothaman']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: W. A. No. 464 of 2022 -1- In The High Court Of Kerala At Ernakulam Present The Honourable The Chief Justice Mr.S.Manikumar & The Honourable Mr.Justice Murali Purushothaman Thursday, The 7Th Day Of April 2022 / 17Th Chaithra, 1944 Wa No. 464 Of 2022 Against The Judgment [/INST]
 {""CASE_NUMBER"": ""['W. A. No. 464 of 2022']"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""['7Th Day Of April 2022', '17Th Chaithra, 1944']"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'Murali Purushothaman']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.89773654937744
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['D.V.S.S. Somayajulu']"", ""LAWYER"": ""['G. Ramesh Babu', 'B. Sudhakar Reddy', 'Keerthi Kiran Kota']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Gollapinni Reddy Balaprasad']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Kota Venkataiah']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Honble Sri Justice D.V.S.S. Somayajulu As No.936 of 1999 20-09-2018 Gollapinni Reddy Balaprasad and another Appellant/plaintiffs Kota Venkataiah (died) per LRs. and others. Respondents/Defendants Counsel for the appellants: Sri G. Ramesh Babu Counsel for the Respondents: Sri B. Sudhakar Reddy and Sri Keerthi Kiran Kota <Gist: >Head Note: ?Cases referred: Air 1981 Punjab and Haryana 130 2 (2008) 8 Scc 521 3 1999 (1) Ald 676 4 Air 1988 Madras 117 5 Air 1994 Rajasthan 31 6 Air 1963 Ap 15 7 Air 1979 Punjab & Haryana 194 8 (2010) 2 Scc 162 9 (2010) Scc 277 10. (1999) 5 Scc 590 11. Air 1994 Sc 152 12. Air 1999 Sc 1136 3. Air 1965 Sc 1153 4. Air 1964 Sc 993 5. Air 1971 Ap 74 6. Air 1979 Sc 551 7. (2000) 3 Scc 350 8. (2014) 12 Scc 696 9. (2005) 11 Scc 189 20. (2005) 8 Scc 67 21. 1994 (1) Alt 673 (Db) 22. 2017 (4) Ald 386 (Db) 23. Air 1954 Sc 280 24. Air 1982 Calcutta 428 25. Air 1974 Sc 1999 26. Air 1959 Sc 443 27. Air 1965 Sc 354 28. Air 1972 Sc 2492 29.Air 1962 Punjab 196 Honble Sri Justice D.V.S.S. Somayajulu A.S.No.936 of 1999 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['D.V.S.S. Somayajulu']"", ""LAWYER"": ""['G. Ramesh Babu', 'B. Sudhakar Reddy', 'Keerthi Kiran Kota']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Gollapinni Reddy Balaprasad']"", ""PRECEDENT"": ""['Air 1981 Punjab and Haryana 130 2 (2008) 8 Scc 521', '3 1999 (1) Ald 676', 'Air 1999 (1) Scc 1136', 'Air 1988 Punjab & Haryana 194', '(2010) 2 Scc 162', '(2010) Scc 277', '(1999) 5 Scc 590', 'Air 1994 Sc 152', 'Air 1999 Sc 1136', '(2000) 3 Scc 350', '(2014) 12 Scc 696', '(2005) 11 Scc 189', '20. (2005) 8 Scc 67', '21. (2005) 8 Scc 67', '22. (2005) 8 Scc 67', '23. (2005) 8 Scc 67', '24. (2005) 8 Scc 67', '25. (2005) 8 Scc 67', '26. (2005) 8 Scc 67', '27. (2005) 8 Scc 67', '28. (2005) 8 S",31.59184598922729
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Action Ispat And Power Pvt. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Shyam Metalics And Energy Ltd.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal No. 4041 Of 2020 (Arising Out Of Slp (Civil) No.26415 Of 2019) Action Ispat And Power Pvt. Ltd. …Appellant Versus Shyam Metalics And Energy Ltd. …Respondent With Civil Appeal Nos. 4042-4043 Of 2020 (Arising Out Of Slp (Civil) Nos.2033-2034 Of 2020) Judgment [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal Nos.2033-2034 Of 2020']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Action Ispat And Power Pvt. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Shyam Metalics And Energy Ltd.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.294670343399048
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""['B.K. Agrawal', 'S.N. Gajendragadkar', 'R.P. Gupta']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['New India Assurance Co. Ltd.', 'Oriental Insurance Co. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Avadesh Kumar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 The High Court Of Madhya Pradesh Ma No.534/2017 The New India Assurance Co. Ltd. Vs. Avadesh Kumar and others Ma No.418/2017 The Oriental Insurance Co. Ltd. Vs. Avadesh Kumar and others Gwalior, Dated :07/01/2020 Shri B.K. Agrawal, Advocate for appellant in Ma No.534/2017 and for respondent no.10 in Ma No.418/2017. Shri S.N. Gajendragadkar, Advocate for appellant in Ma No.418/2017 and for respondent no.10 in Ma No.534/2017. Shri R.P. Gupta, Advocate for respondents no.1 to 4 in both appeals. [/INST]
 {""CASE_NUMBER"": ""['Ma No.534/2017', 'Ma No.418/2017']"", ""COURT"": ""['High Court Of Madhya Pradesh']"", ""DATE"": ""['07/01/2020']"", ""GPE"": ""['Gwalior']"", ""JUDGE"": ""[]"", ""LAWYER"": ""['B.K. Agrawal', 'S.N. Gajendragadkar', 'R.P. Gupta']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['New India Assurance Co.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Avadesh Kumar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.24923610687256
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Ramesh Sinha', 'Dinesh Kumar Singh']"", ""LAWYER"": ""['A.G.A.,Laxman Singh', 'Murlidhar Misra', 'S.P.S. Raghav', 'A.K. Singh', 'Ajay Sengar', 'Arvind Kumar Srivastavaac', 'Brajesh Sahai', 'Brijesh Saha', 'C.H.Singh Gautam', 'D.V. Singh', 'Gyanendra Kumar', 'J.S. Sengar', 'Kapil Rathore', 'Lav Srivastava', 'Mukhtar Alam', 'Rohan Gupta', 'Vikram Dev Singh Rathore', 'Rajeev Trivedi', 'P.N. Misra', 'Rajiv Lochan Shukla', 'Laxman Singh']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['State Of U.P.', 'Rajeev Shukla']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Raghuvir Singh', 'Raghubir Singh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature At Allahabad A.F.R. Judgment reserved on 06.02.2019 Judgment delivered on 19.4.2019 Court No. - 1 Case :- Government Appeal No. - 5123 of 2002 Appellant :- State Of U.P. Respondent :- Raghuvir Singh And Others Counsel for Appellant :- A.G.A.,Laxman Singh,Murlidhar Misra Counsel for Respondent :- S.P.S. Raghav,A.K. Singh,Ajay Sengar,Arvind Kumar Srivastavaac,Brajesh Sahai,Brijesh Saha,C.H.Singh Gautam,D.V. Singh,Gyanendra Kumar,J.S. Sengar,Kapil Rathore,Lav Srivastava,Mukhtar Alam,Rohan Gupta,Vikram Dev Singh Rathore Connected with Case :- Criminal Revision No. - 1548 of 2002 Revisionist :- Rajeev Shukla Opposite Party :- Raghubir Singh And Others Counsel for Revisionist :- Rajeev Trivedi,P.N. Misra,Rajiv Lochan Shukla Counsel for Opposite Party :- Govt. Advocate,Laxman Singh Hon'ble Ramesh Sinha,J. Hon'ble Dinesh Kumar Singh-I,J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Ramesh Sinha', 'Dinesh Kumar Singh-I']"", ""LAWYER"": ""['A.G.A.', 'Laxman Singh', 'Murlidhar Misra', 'S.P.S. Raghav', 'A.K. Singh', 'Ajay Sengar', 'Arvind Kumar Srivastavaac', 'Brajesh Saha', 'Brijesh Saha', 'C.H.Singh Gautam', 'D.V. Singh', 'Gyanendra Kumar', 'J.S. Sengar', 'Kapil Rathore', 'Lav Srivastava', 'Mukhtar Alam', 'Rohan Gupta', 'Vikram Dev Singh Rathore']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Raghubir Singh', 'Rajeev Shukla', 'Rajeev Trivedi', 'P.N. Misra', 'Rajiv Lochan Shukla', 'Govt. Advocate', 'Laxman Singh']"", ""PETITIONER"": ""['State Of U.P.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Raghav', 'S.P.S. Raghav', 'A.K. Singh', 'Ajay Sengar', 'Arvind Kumar Srivastavaac', 'Brajesh Saha', 'Brijesh Saha', 'C.H.Singh Gautam', 'D.V. Singh', 'Gyanendra Kumar', 'J.S. Sengar', 'Kapil Rathore', 'Lav Srivastava', 'Mukhtar Alam', 'Rohan Gupta', 'Vikram Dev Singh Rathore']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",30.30968976020813
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh Gwalior Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['G.S. Ahluwalia', 'Rajeev Kumar Shrivastava']"", ""LAWYER"": ""['Ashok Jain', 'A.K.Nirankari']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bharat Singh', 'Bali Singh @ Ballu']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of M.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Bharat Singh Vs. State of M.P. (Cr.A. No. 317/2011) Bali Singh @ Ballu Vs. State of M.P. (Cr.A. No. 342/2011) High Court Of Madhya Pradesh Gwalior Bench Division Bench G.S. Ahluwalia & Rajeev Kumar Shrivastava J.J. Cr.A. No. 317 of 2011 Bharat Singh Vs. State of M.P. Cr.A. No. 342 of 2011 Bali Singh @ Ballu Vs. State of M.P. _______________________________________ Shri Ashok Jain Counsel for the Appellant in both the Appeals. Shri A.K.Nirankari Counsel for the State Date of Hearing : 12-04-2022 Date of Judgment : 18th-04-2022 Approved for Reporting : 2 Bharat Singh Vs. State of M.P. (Cr.A. No. 317/2011) Bali Singh @ Ballu Vs. State of M.P. (Cr.A. No. 342/2011) Judgment 18th - April -2022 Per G.S. Ahluwalia J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh Gwalior Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['G.S. Ahluwalia', 'Rajeev Kumar Shrivastava']"", ""LAWYER"": ""['Ashok Jain', 'A.K.Nirankari']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bharat Singh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of M.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.81249499320984
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['N.Balayogi', 'N. Balayogi']"", ""LAWYER"": ""['Mavidi Rama Rao', 'P.Sri Ram']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Nagarjun Valluripalli']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Andhra Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Honble Sri Justice N.Balayogi Criminal Petition No. 4020 Of 2011 23.03.2018 Mr.Nagarjun Valluripalli, Director, Surya Ray Elixiris Private Limited, Office at : Plot No.40, Road No.7, Jubilee Hills, The State of Andhra Pradesh, rep. by its Public Prosecutor, High Court Buildings, Hyderabad & another.... Respondents. Counsel for Petitioner : Sri Mavidi Rama Rao Counsel for Respondents: G.P.For Services. Sri P.Sri Ram. <Gist: >Head Note: ? Cases referred: 1. 2014 Scc Online Ker 12702 2. (2005) 8 Scc 89 3. 2010 (1) Alt (Crl.) 363 (Ap) 4. Air 2012 Sc 31 5. Air 2010 Sc 2835 6. Air 2005 Sc 3512 7. (2007) 9 Scc 481 8. 2002 (2) Arbitration Law Report, 341 Honourable Sri Justice N. Balayogi Criminal Petition No.4020 of 2011 Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Buildings, Hyderabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['N.Balayogi']"", ""LAWYER"": ""['Mavidi Rama Rao', 'G.P.For Services', 'P.Sri Ram']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Surya Ray Elixiris Private Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.03280234336853
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['S.Ganesh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Karnataka']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 In The Supreme Court Of India Criminal Appellate Jurisdiction Criminal Appeal No.1145 Of 2014 S.Ganesh & Anr. Appellant(s) Versus State Of Karnataka & Anr. Respondent(s) O R D E R [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No.1145']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.Ganesh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Karnataka']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.149512529373167
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['S U P R E M E C O U R T O F I N D I A']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['National Campaign Committee For Central Legislation On Construction Labour (Ncc Cl)']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Item No.1501 Court No.4 Section Pil-W (For judgment) S U P R E M E C O U R T O F I N D I A Record Of Proceedings Writ Petition(s)(Civil) No(s). 318/2006 National Campaign Committee For Central Legislation On Construction Labour (Ncc Cl) Petitioner(s) Versus Union Of India & Ors. Respondent(s) With Conmt.Pet.(C) No. 52/2013 In W.P.(C) No. 318/2006 (Pil-W) [/INST]
 {""CASE_NUMBER"": ""['Court No.4', 'W.P.(C) No. 318/2006']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Campaign Committee For Central Legislation On Construction Labour (Ncc Cl)']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.69182825088501
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['V. Kameswar Rao']"", ""LAWYER"": ""['H.L. Tiku', 'Yashmeet Kaur', 'Dhruv Mehta', 'Amish Tandon', 'Ayush Beotra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Ifci Retirees Welfare Forum']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Ifci Limited']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Delhi At New Delhi Judgment delivered on: March 04, 2022 + W.P.(C) 4735/2020, Cm No. 17062/2020 Ifci Retirees Welfare Forum ..... Petitioner Through: Mr. H.L. Tiku, Sr. Adv. with Ms. Yashmeet Kaur, Adv. versus Ifci Limited And Others ..... Respondents Through: Mr. Dhruv Mehta, Sr. Adv. with Mr. Amish Tandon & Mr. Ayush Beotra, Advs. for R-1 Mr. Amish Tandon & Mr. Ayush Beotra, Advs. for R-3 Coram: Hon'Ble Mr. Justice V. Kameswar Rao Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['V. Kameswar Rao']"", ""LAWYER"": ""['H.L. Tiku', 'Yashmeet Kaur', 'Dhruv Mehta', 'Amish Tandon', 'Ayush Beotra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Ifci Retirees Welfare Forum']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Ifci Limited']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.01196551322937
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Dinesh Kumar Singh']"", ""LAWYER"": ""['Mohammad Waseem']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['R.E. Kil Roy Rocky']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of U.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature At Allahabad Judgment reserved on 13.01.2020 Judgment delivered on 20.02.2020 Court No. - 69 Case :- Criminal Revision No. - 4447 of 2019 Revisionist :- R.E. Kil Roy Rocky Opposite Party :- State Of U.P. And 2 Ors. Counsel for Revisionist :- Mohammad Waseem Counsel for Opposite Party :- G.A. Hon'ble Dinesh Kumar Singh-I,J. [/INST]
 {""CASE_NUMBER"": ""['Criminal Revision No. - 4447 of 2019']"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""['13.01.2020', '20.02.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""['Dinesh Kumar Singh-I']"", ""LAWYER"": ""['Mohammad Waseem']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of U.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.67711877822876
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Ramesh Ranganathan', 'Kongara Vijaya Lakshmi']"", ""LAWYER"": ""['Eranki Phani Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['B.R.Meena']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Arun Kumar Agarwal']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Honble The Acting Chief Justice Ramesh Ranganathan And The Honble Smt Justice Kongara Vijaya Lakshmi Contempt Appeal (SR).No.14228 of 2018 20.03.2018 Mr.B.R.Meena, I.A.S, Principal Secretary to Government and others... Appellants Mr.Arun Kumar Agarwal and others.. Respondents Counsel for the appellants : Gp for Revenue Counsel for respondents : Eranki Phani Kumar <Gist: >Head Note: ? Citations: 1. (1978) 2 Scc 370 2. (2000) 4 Scc 400 3. (2004) 13 Scc 610 4. (2016) 14 Scc 251 5. (2001) 7 Scc 549 The Honble The Acting Chief Justice Ramesh Ranganathan And The Honble Smt Justice Kongara Vijaya Lakshmi Contempt Appeal (SR).No.14228 of 2018 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Ramesh Ranganathan', 'Kongara Vijaya Lakshmi']"", ""LAWYER"": ""['B.R.Meena', 'Arun Kumar Agarwal']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(1978) 2 Scc 370', '(2000) 4 Scc 400', '(2004) 13 Scc 610', '(2016) 14 Scc 251', '(2001) 7 Scc 549']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.72150945663452
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka Dharwad Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['K. Natarajan']"", ""LAWYER"": ""['Rajashekhar S. Arani']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Divisional Manager United India Insurance Co. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Puttappa', 'Yallavva', 'Suresh Laxman Vadoni']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Karnataka Dharwad Bench Dated This The 17Th Day Of September, 2019 Before The Hon'Ble Mr.Justice K. Natarajan Miscellaneous First Appeal No.24481/2012(Mv) C/w. Miscellaneous First Appeal NOs.24479/2012, 24483/2012, 24484/2012, 21955/2013, 21957/2013, 24477/2012, 21952/2013, 22178/2013, 21951/2013, 21956/2013, 23931/2012, 24279/2012, 21954/2013, 23932/2012, 24480/2012, 24482/2012, 24476/2012, 24478/2012, 21953/2013, 22179/2013, 21612/2013, 21613/2013, 21614/2013, 23403/2012, 23404/2012, 22334/2013, 22335/2013, 22336/2013, 22337/2013 and 23151/2012 (Mv) Mfa No. 24481 Of 2012 Between: The Divisional Manager United India Insurance Co. Ltd. Rep: By Its Branch Office, Moktali Building Opp: Ksrtc Hangal Road, Haveri, Now Rep By Its Divisional Manager, N K Complex, Keshwapur, Hubli ... Appellant (By Sri. Rajashekhar S. Arani, Advocate) 2 And: 1. Puttappa S/O Ramanna Mannur Age: 26 Years, Occ: Coolie, R/O Karajagi, Tq: Haveri, 2. Smt. Yallavva W/O Yallappa Harakanal Age: 24 Years, Occ: Household Tq: Dist: Haveri, 3. Suresh Laxman Vadoni Age: Major, Occ: Owner Of Ka.27/4329 R/O Karjagi, Tq: Dist: Haveri, ... Respondents (Respondents No. 1 & 2 Are Served; R3 - Notice Dispensed With) --- This Mfa Is Filed U/S 173(1) Of Mv Act Against The Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka Dharwad Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['K. Natarajan']"", ""LAWYER"": ""['Rajashekhar S. Arani']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['United India Insurance Co. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Mv Act']"", ""RESPONDENT"": ""['Puttappa', 'Yallavva', 'Suresh Laxman Vadoni']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.483958005905151
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['K.Natarajan']"", ""LAWYER"": ""['K. Dhananjay', 'Anupama Hegde', 'Mahesh Shetty']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['K. Dhananjay']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Cabinet Secretary For The Hon,Ble President Of India', 'Secretary For The Chief Information Commissioner', 'Divya Prakash Sinha', 'Special Public Prosecutor For Karnataka State By Station House Officer', 'A. Thomeena']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 In The High Court Of Karnataka At Bengaluru Dated This The 26Th Day Of November, 2021 Before The Hon'Ble Mr. Justice K.Natarajan Writ Petition No.11426 of 2020 (Gm-Res) Between K. Dhananjay, Aged About 46 Years, S/O. Late K. Krishnappa, House #48, 8Th Cross, 12Th Main Road, Raghavendera Block, Srinagar, Bengaluru - 560 050. ...Petitioner (By Sri K. Dhananjay, Party-In-Person, Through Vc) And 1. Cabinet Secretary For The Hon,Ble President Of India, Appointments Committee Of The Cabinet, Cabinet Secretariat, Rashtrapati Bhavan, New Delhi - 110 004. 2. Secretary For The Chief Information Commissioner, Central Information Commission, Cic Bhawan, Baba Ganganath Marg, Munirka, New Delhi - 110 067. 3. Mr. Divya Prakash Sinha, Central Information Commissioner, Central Information Commissison, Cic-Bhawan, Baba Ganganath Marg, 2 Munirka, New Delhi - 110 067. 4. Special Public Prosecutor For Karnataka State By Station House Officer, Halasuru Police Station, Old Madras Road, Bengaluru - 560 008. 5. Ms. A. Thomeena, Deputy Registrar, Central Administrative Tribunal, 1St And 2Nd Floor, Sir Visveswarayya Kendriya Bhawana, Next To C.P.W.D. Quarters, Domlur, Bengaluru - 560 039. ...Respondents (By Smt. Anupama Hegde, Cgsc., For R1, 2 & 5, Through Physical Hearing; Sri Mahesh Shetty, Hcgp., For Respondent 4, Through Physical Hearing; R3 Is Served And Unrepresented) This Writ Petition Is Filed Under Articles 226 And 227 Of The Constitution Of India Read With Section 482 Of Cr. P.C., Praying To Quash The Maliciously Instituted Pervert Criminal Proceeding Pending In The Case File Of Crime No.53806/2019 (Now C.C.No.50750/2020-ANNEXURE-J) In The X.A.C.M.M. Court, Mayohall Unit, Bengaluru, As It Is Illegal, Invalid And Impropriety For The Plural Legal Grounds Urged In Paras No.(5.A.1.1. To 5.A.1/3) Of The Writ Petition In Compliance With The Fit Applicable Legal Provisions, Cited In Para No.(5.B.1) Of The Writ Petition And Quash The Deceptively Passed Quasi-Judicial-Order Annexure-F By Respondent No.3 And Further Deceitfully Issued Letters Vide Annexure-L And Annexure-Q On Behalf Of Respondent No.3 As These Are Utter False, Illegal, Invalid And Impropriety For The Legal Ground Urged In Paras No. (5.A.2.1 To 5.A.2.3) Of The Writ Petition In Compliance With The Fit And 3 Applicable Legal Provisions Cited In Para Nos.(5.B.2.1 To 5.B.2.2.) Of The Writ Petition. This Writ Petition Having Been Heard And Reserved For Orders On 08.10.2021 And Coming On For Pronouncement Through Video Conferencing This Day, The Court Pronounced The Following: Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['K. Natarajan']"", ""LAWYER"": ""['K. Dhananjay', 'Divya Prakash Sinha', 'A. Thomeena', 'Mahesh Shetty']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['K. Dhananjay']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Articles 226 and 227', 'Section 482', 'Section 482']"", ""RESPONDENT"": ""['Cabinet Secretary For The Hon,Ble President Of India', 'Central Information Commissioner', 'Central Information Commission', 'Special Public Prosecutor For Karnataka State', 'Deputy Registrar', 'Central Administrative Tribunal', 'Central Public Prosecutor', 'Ms. A. Thomeena', 'Ms. A. Thomeena', 'Sri Mahesh Shetty', 'R3']"", ""STATUTE"": ""['Constitution Of India', 'Cr. P.C.', 'Central Information Commission']"", ""WITNESS"": ""[]""}",19.66323828697205
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Dilip B Bhosale', 'Suneet Kumar']"", ""LAWYER"": ""['Shashi Nandan', 'Kashif Zaidi', 'Udyan Nandan', 'Manish Goyal', 'A.K. Goyal', 'Gyan Prakash', 'Vinay K. Singh', 'Alok Mishra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['U.P. Public Service Commission']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature At Allahabad Reserved Writ-C No. 62997 of 2017 U.P. Public Service Commission through its Chairman & Members Vs. Union of India through Secretary, Department of Personnel and Training, Government of India, New Delhi & Ors. Appearance: For petitioners: Mr. Shashi Nandan, Senior Advocate, with Mr. Kashif Zaidi & Mr. Udyan Nandan, Advocates For respondents: Mr. Manish Goyal, Addl Advocate General, with Mr. A.K. Goyal, Additional Chief Standing Counsel, for respondent no.2-State Mr. Gyan Prakash, Assistant Solicitor General India, with Mr. Vinay K. Singh, Advocate, for respondent no. 1-Union of India For intervenors : Mr. Alok Mishra, Advocate Hon'ble Dilip B Bhosale, Chief Justice Hon'ble Suneet Kumar, J (Per Dilip B Bhosale, Cj) [/INST]
 {""CASE_NUMBER"": ""['Wright-C No. 62997 of 2017']"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Dilip B Bhosale', 'Suneet Kumar']"", ""LAWYER"": ""['Shashi Nandan', 'Kashif Zaidi', 'Udyan Nandan', 'Manish Goyal', 'A.K. Goyal', 'Gyan Prakash', 'Vinay K. Singh', 'Alok Mishra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['U.P. Public Service Commission']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.379676580429075
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Mahabir Singh Sindhu']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Kulbir Singh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Haryana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Punjab And Haryana At Chandigarh Civil Writ Petition No.7925 of 2020 (O&M) Date of decision: April 8th, 2021 Kulbir Singh .....Petitioner Versus State of Haryana and others .....Respondents Coram: Hon'Ble Mr. Justice Mahabir Singh Sindhu [/INST]
 {""CASE_NUMBER"": ""['Civil Writ Petition No.7925']"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""['April 8th, 2021']"", ""GPE"": ""[]"", ""JUDGE"": ""['Mahabir Singh Sindhu']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kulbir Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Haryana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.360390424728394
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Noel Harper']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Reportable In The Supreme Court Of India Civil Original Jurisdiction Writ Petition (Civil) No. 566 Of 2021 Noel Harper & Ors. …Petitioners Versus Union Of India & Anr. …Respondents With Writ Petition (Civil) No. 634 Of 2021 And Writ Petition (Civil) No. 751 Of 2021 Judgment [/INST]
 {""CASE_NUMBER"": ""['Writ Petition (Civil) No. 566 Of 2021', 'Writ Petition (Civil) No. 634 Of 2021', 'Writ Petition (Civil) No. 751 Of 2021']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Noel Harper']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.215953588485718
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh', 'High Court Of Madhya Pradesh Bench Gwalior']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['G.S. Ahluwalia', 'Rajeev Shrivastava']"", ""LAWYER"": ""['V.K. Saxena', 'Ayush Saxena', 'Nathu Singh', 'Ramvir Singh', 'Atul Gupta', 'Ghanshyam Singh', 'B.P.S. Chouhan', 'R.K. Sharma', 'M.K. Choudhary']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Nathu Singh', 'Ghanshyam Singh', 'Ramvir Singh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of M.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 The High Court Of Madhya Pradesh Cr.A. No. 397 of 2005 Nathu Singh Vs. State of M.P. Cr.A. No. 401 of 2005 Ghanshyam Singh Vs. State of M.P. Cr.A. 425 of 2005 Ramvir Singh Vs. State of M.P. High Court Of Madhya Pradesh Bench Gwalior Db : G.S. Ahluwalia & Rajeev Shrivastava J.J. Cr.A. No. 397 of 2005 Nathu Singh Vs. State of M.P. Cr.A. No. 401 of 2005 Ghanshyam Singh Vs. State of M.P. Cr.A. 425 of 2005 Ramvir Singh Vs. State of M.P. Shri V.K. Saxena, Senior Advocate (through Video Conferencing) with Shri Ayush Saxena, Advocate for Appellants Nathu Singh and Ramvir Singh (Cr.A.s No. 397/2005 and 425/2005) Shri Atul Gupta, Counsel for appellant Ghanshyam Singh (Cr.A. No. 401/2005) Shri B.P.S. Chouhan, Public Prosecutor for State Shri R.K. Sharma, Senior Advocate (through video conferencing) with Shri M.K. Choudhary, Advocate for the complainant. ------------------------------------------------------------------------------------ [/INST]
 {""CASE_NUMBER"": ""['Cr.A. No. 397 of 2005', 'Cr.A. No. 401 of 2005', 'Cr.A. No. 425 of 2005']"", ""COURT"": ""['High Court Of Madhya Pradesh', 'Gwalior Db : G.S. Ahluwalia & Rajeev Shrivastava J.J.']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['V.K. Saxena', 'Ayush Saxena', 'Atul Gupta', 'B.P.S. Chouhan', 'R.K. Sharma', 'M.K. Choudhary']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nathu Singh', 'Ghanshyam Singh', 'Ramvir Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of M.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",17.61747145652771
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['S U P R E M E C O U R T O F I N D I A']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Uday Umesh Lalit', 'S. Ravindra Bhat', 'Pamidighantam Sri Narasimha']"", ""LAWYER"": ""['Indu Marwah', 'Jitendar Kr. Sharma', 'Shrikant Prasad', 'Pabitra Kr. Biswal', 'Prahlad Narayan Singh', 'Tanuj Bagga Sharma', 'Ravindra Mishra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rabindra Mishra']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Chhotai Yadav @ Chhote Lal Yadav']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Item No.17+32 Court No.2 Section Ii S U P R E M E C O U R T O F I N D I A Record Of Proceedings Special Leave Petition (Criminal) Diary No(s). 7282/2022 (Arising out of impugned final judgment and order dated 13-09-2021 in Bno. No. 7338/2021 passed by the High Court Of Judicature At Allahabad, Lucknow Bench) Rabindra Mishra Petitioner(s) Versus Chhotai Yadav @ Chhote Lal Yadav & Anr. Respondent(s) (For Admission and I.R. and Ia No.53415/2022-EXEMPTION From Filing O.T. and Ia No.53417/2022-PERMISSION To File Petition (Slp/Tp/Wp/..) and Ia No.53413/2022-PERMISSION To File Additional Documents/Facts/Annexures ) Item No.32 Special Leave Petition (Criminal) Diary No(s). 7281/2022 (For Admission and Ia No.53176/2022-EXEMPTION From Filing O.T. and Ia No.53174/2022-PERMISSION To File Petition (Slp/Tp/Wp/..) and Ia No.53175/2022-PERMISSION To File Additional Documents/Facts/Annexures ) With Diary No(s). 7285/2022 (Ii) (For Admission and Ia No.50939/2022-EXEMPTION From Filing O.T. and Ia No.50938/2022-PERMISSION To File Petition (Slp/Tp/Wp/..) and Ia No.50940/2022-PERMISSION To File Additional Documents/ Acts/ Annexures) Date : 13-04-2022 This petition was called on for hearing today. Coram : Hon'Ble Mr. Justice Uday Umesh Lalit Hon'Ble Mr. Justice S. Ravindra Bhat Hon'Ble Mr. Justice Pamidighantam Sri Narasimha Signature Not Verified For Petitioner(s) Digitally signed by Indu Marwah Date: 2022.04.13 Mr. Jitendar Kr. Sharma, Adv. 17:42:55 Ist Reason: Mr. Shrikant Prasad, Adv. Mr. Pabitra Kr. Biswal, Adv. Mr. Prahlad Narayan Singh, Adv. Mrs. Tanuj Bagga Sharma, Aor Mr. Ravindra Mishra, Adv. 2 For Respondent(s) Upon hearing the counsel the Court made the following O R D E R [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad, Lucknow Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Uday Umesh Lalit', 'S. Ravindra Bhat', 'Pamidighantam', 'Narasimha']"", ""LAWYER"": ""['Jitendar Kr. Sharma', 'Shrikant Prasad', 'Pabitra Kr. Biswal', 'Prahlad Narayan Singh', 'Tanuj Bagga Sharma', 'Ravindra Mishra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rabindra Mishra']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Chhotai Yadav @ Chhote Lal Yadav']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",15.78167200088501
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['S U P R E M E C O U R T O F I N D I A']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['N.V. Ramana', 'S. Abdul Nazeer']"", ""LAWYER"": ""['Ashutosh Dubey', 'Piyush Singh', 'Vaibhav Tyagi', 'Aditya Singh', 'Ajit Pudussery', 'Anirban Tripathi', 'J. Kurian', 'Rajshri Dubey', 'V.S. Rawat', 'Abhishek Chauhan', 'Sushil Pandey']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Biswas Nair']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Shinie Biswas Nair']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Item No.107 Court No.9 Section Iii S U P R E M E C O U R T O F I N D I A Record Of Proceedings Civil Appeal No(s). 1309/2017 Biswas Nair Appellant(s) Versus Shinie Biswas Nair Respondent(s) With Conmt.Pet.(C) No. 241/2016 In Slp(C) No. 31208/2015 (For On Ia 1/2016 For Initiating Criminal Proceedings U/S 340 Of Crpc On Ia 2/2016) Date : 01-02-2018 This appeal was called on for hearing today. Coram : Hon'Ble Mr. Justice N.V. Ramana Hon'Ble Mr. Justice S. Abdul Nazeer For Appellant(s) Mr. Ashutosh Dubey, Aor Mr. Piyush Singh, Adv. Mr. Vaibhav Tyagi, Adv. Mr. Aditya Singh, Aor For Respondent(s) Mr. Ajit Pudussery, Aor Mr. Aditya Singh, Aor Mr. Anirban Tripathi, Adv. Mr. Ashutosh Dubey, Aor Mr. J. Kurian, Adv. Mr. Rajshri Dubey, Adv. Mr. V.S. Rawat, Adv. Mr. Abhishek Chauhan, Adv. Mr. Sushil Pandey, Adv. Upon hearing the counsel the Court made the following O R D E R [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['S U P R E M O U R C O U R T O F I N D I A']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['N.V. Ramana', 'S. Abdul Nazeer']"", ""LAWYER"": ""['Ashutosh Dubey', 'Piyush Singh', 'Vaibhav Tyagi', 'Aditya Singh', 'Ajit Pudussery', 'Aditya Singh', 'Anirban Tripathi', 'J. Kurian', 'Rajshri Dubey', 'V.S. Rawat', 'Abhishek Chauhan', 'Sushil Pandey']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Biswas Nair']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Shinie Biswas Nair']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",16.217905044555664
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Shashi Kant', 'Ajay Bhanot']"", ""LAWYER"": ""['Mayank Bhushan', 'A.K.Mishra', 'Abhishek Kumar Srivastava', 'Ashok Mehta', 'Bhupendra Nath Singh', 'D.P.Singh', 'Sudeep Pathak', 'V.C. Mishra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Girish Chandra Bajpayee']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of U.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature At Allahabad Afr Reserved Judgement. Court No. - 81 Case :- Criminal Appeal No. - 7344 of 2006 Appellant :- Girish Chandra Bajpayee Respondent :- State Of U.P. Counsel for Appellant :- Mayank Bhushan, A.K.Mishra, Abhishek Kumar Srivastava,Ashok Mehta,Bhupendra Nath Singh,D.P.Singh,Sudeep Pathak,V.C. Mishra Counsel for Respondent :- Govt. Advocate Hon'ble Shashi Kant,J. Hon'ble Ajay Bhanot,J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Shashi Kant', 'Ajay Bhanot']"", ""LAWYER"": ""['Mayank Bhushan', 'A.K.Mishra', 'Abhishek Kumar Srivastava', 'Ashok Mehta', 'Bhupendra Nath Singh', 'D.P.Singh', 'Sudeep Pathak', 'V.C. Mishra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Girish Chandra Bajpayee']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of U.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.146788835525513
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Dharmaji Shankar Shinde']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Rajaram Shripad Joshi']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal No.7448 Of 2008 Dharmaji Shankar Shinde And Others …Appellants Versus Rajaram Shripad Joshi (Dead) Through LRs. And Others …Respondents With Civil Appeal No.7449 Of 2008 Judgment [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No.7448', 'Civil Appeal No.7449']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dharmaji Shankar Shinde', 'Rajaram Shripad Joshi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.757305383682253
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Neetu Kumar Nagaich']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Rajasthan']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Criminal Original Jurisdiction Writ Petition (Crl.) No.141 Of 2020 Neetu Kumar Nagaich ...Petitioner (S) Versus The State Of Rajasthan And Others ...Respondent(S) Judgment [/INST]
 {""CASE_NUMBER"": ""['Criminal Original Jurisdiction', 'Crl.']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Neetu Kumar Nagaich']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Rajasthan']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.585866689682007
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Lalit Kumar Jain']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Reportable In The Supreme Court Of India Civil Original Jurisdiction Transferred Case (Civil) No. 245/2020 Lalit Kumar Jain ….Petitioner(S) Versus Union Of India & Ors. …..Respondent(S) With W.P.(C) No. 117/2021, W.P.(C) No. 1371/2020, W.P.(C) No. 1420/2020, W.P.(C) No. 1353/2020, T.P.(C) No. 1252/2020, W.P.(C) No. 1276/2020, W.P.(C) No. 1287/2020, T.P. (C) No. 1285/2020, T.P.(C) No. 1325/2020, W.P.(C) No. 1364/2020, T.C.(C) No. 257/2020, W.P.(C) No. 1434/2020, W.P.(C) No. 38/2021, W.P.(C) No. 1419/2020, T.P.(C) No. 1202/2020, T.P.(C) No. 1220/2020, T.P.(C) No. 1203/2020, T.P.(C) No. 1193/2020, T.P.(C) No. 1196/2020, T.P.(C) No. 1289/2020, T.P.(C) No. 1323/2020, T.P.(C) No. 1333/2020, T.P.(C) No. 1292/2020, T.P.(C) No. 1299/2020, T.P.(C) No. 1331/2020, W.P. (C) No. 1342/2020, T.P.(C) No. 1339/2020, W.P.(C) No. 1348/2020, W.P.(C) No. 1344/2020, W.P.(C) No. 1343/2020, T.C.(C) No. 250/2020, T.C.(C) No. 251/2020, T.C. (C) No. 247/2020, T.C.(C) No. 253/2020, T.C.(C) No. 252/2020, T.C.(C) No. 248/2020, T.C.(C) No. 254/2020, T.C.(C) No. 246/2020, T.C.(C) No. 256/2020, T.C.(C) No. 249/2020, T.C.(C) No. 255/2020, W.P.(C) No. 62/2021, W.P.(C) No. 32/2021, W.P.(C) No. 106/2021, W.P.(C) No. 97/2021, W.P.(C) No. 142/2021, W.P.(C) No. 135/2021, W.P.(C) No. 131/2021, W.P.(C) No. 122/2021, W.P.(C) No. 138/2021, W.P.(C) No. 146/2021, W.P. (C) No. 207/2021, W.P.(C) No. 160/2021, W.P.(C) No. 168/2021, W.P.(C) No. 205/2021, W.P.(C) No. 209/2021, W.P.(C) No. 194/2021, W.P.(C) No. 187/2021, W.P.(C) No. 180/2021, W.P.(C) No. 182/2021, W.P.(C) No. 203/2021, W.P.(C) No. 220/2021, W.P.(C) No. 229/2021, W.P.(C) No. 217/2021, W.P.(C) No. 221/2021, W.P.(C) No. 225/2021, W.P. Signature Not Verified (C) No. 239/2021, W.P.(C) No. 240/2021, W.P.(C) No. 228/2021, W.P.(C) No. 224/2021, Digitally signed by Jayant Kumar Arora Date: 2021.05.21 13:36:48 Ist Reason: W.P.(C) No. 234/2021, W.P.(C) No. 260/2021 and W.P.(C) No. 262/2021, W.P. (C) No. 283/2021. 2 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Lalit Kumar Jain']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Lalit Kumar Jain']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.296489477157593
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Punjab & Haryana High Court At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Amol Rattan Singh']"", ""LAWYER"": ""['Surjit Singh Salar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Parvinder Singh @ Pinda']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Didar Singh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Civil Revision no.4211 of 2018 1 In The Punjab & Haryana High Court At Chandigarh Civil Revision no.4211 of 2018 Date of decision : 31.07.2018 Parvinder Singh @ Pinda and others ... Petitioners Versus Didar Singh ... Respondent Coram: Hon'Ble Mr. Justice Amol Rattan Singh Present: Mr. Surjit Singh Salar, Advocate, for the petitioner. Amol Rattan Singh, J. [/INST]
 {""CASE_NUMBER"": ""['civil Revision no.4211 of 2018']"", ""COURT"": ""['Punjab & Haryana High Court At Chandigarh']"", ""DATE"": ""['31.07.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""['Amol Rattan Singh']"", ""LAWYER"": ""['Surjit Singh Salar', 'Amol Rattan Singh']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Parvinder Singh @ Pinda']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Didar Singh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.371779918670654
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Judicature At Madras Dated : 22.01.2021 Coram: The Hon'Ble Mr.Justice M.Govindaraj Wp Sr Nos.3786 And 3789 Of 2021 Five Member Committee of Employees of Appu Hotels Limited at Chennai Having place of work at Le Royal Meridien, Chennai, No.1, Gst Road, St. Thomas Mount, Chennai – 600 016. ... Petitioner in Wp Sr No.3786/2021 Five Member Committee of Employees of Appu Hotels Limited at Coimbatore Having place of work at Le Meridien, Coimbatore, No.762, Avinashi Road, Chinniampalayam, Neelambur, Coimbatore – 641 062. ... Petitioner in Wp Sr No.3789/2021 Vs. 1.Tourism Finance Corporation of India Limited 4th Floor, Tower No.1, Nbcc Plaza, Pushp Vihar, Sector 5, Saket, New Delhi – 110 017. 1/80 https://www.mhc.tn.gov.in/judis/ 2.Indian Bank Stressed Assets Management Branch 2nd Floor, No.55, Ethiraj Salai, Egmore, Chennai – 600 008. 3.Idbi Trusteeship Services Limited Asian Building, Ground Floor, No.17, R Kamani Marg, Ballard Estate, Mumbai – 400 001. 4.Idbi Bank Limited Npa Management Group (Nmg) No.115, Anna Salai, Saidapet, Chennai – 600 015. 5.State Bank of India Stressed Assets Management Branch No.32, Montieth Road, Egmore, Chennai – 600 008. 6.Edelweiss Arc Edelweiss House, Off Cst Road, Kalina, Mumbai – 400 098. 7.Allium Finance Pvt. Ltd., Tower 3, Wing B, Kohinoor City Mall, Kohinoor City, Kirol Road, Kurla West, Mumbai – 400 070. 8.Bank of India Tarapore Towers, Iv Floor, 826, Anna Salai, Chennai – 600 002. 2/80 https://www.mhc.tn.gov.in/judis/ 9.Radhakrishnan Dharmarajan Corporate Resolution Professional D3, Triumph Apartments, 114, Jawaharlal Nehru Salai, Arumbakkam, Chennai – 600 106. 10.Appu Hotels Limited Pgp House, No.57, Sterling Road, Nungambakkam, Chennai – 600 034. 11.Secretary to Government Labour & Employment Department Govt. of Tamil Nadu Fort St. George, Chennai – 600 009. ... Respondents [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Madras']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['M.Govindaraj']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Five Member Committee of Employees of Appu Hotels Limited at Chennai', 'Five Member Committee of Employees of Appu Hotels Limited at Coimbatore']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Tourism Finance Corporation of India Limited', 'Indian Bank Stressed Assets Management Branch', 'Idbi Trusteeship Services Limited', 'Idbi Bank Stressed Assets Management Branch', 'State Bank of India Stressed Assets Management Branch', 'Edelweiss Arc Edelweiss House, Off Cst Road, Kalina, Mumbai – 400 098', 'Allium Finance Pvt. Ltd.', 'Bank of India Tarapore Towers, Iv Floor, 826, Anna Salai, Saidapet, Chennai – 600 002', 'Radhakrishnan Dharmarajan', 'Appu Hotels Limited']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",20.364575386047363
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[\""Income Tax Appellate Tribunal Kolkata 'A' Bench, Kolkata\""]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Sudhakar Reddy', 'S.S. Viswanethra Ravi']"", ""LAWYER"": ""['A.K. Tulsiyan', 'Radhe Shyam']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Deputy Commissioner of Income Tax, Central Circle-2(2), Kolkata']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Orissa Metaliks Pvt. Ltd']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The Income Tax Appellate Tribunal Kolkata 'A' Bench, Kolkata (Before Sri J. Sudhakar Reddy, Accountant Member & Sri S.S. Viswanethra Ravi, Judicial Member) I.T(Ss).A No. 85/Kol/2017 Assessment Year: 2009-10 Deputy Commissioner of Income Tax, Central Circle-2(2), Kolkata.................................Appellant M/s. Orissa Metaliks Pvt. Ltd..................................................................................................Respondent 39, Shakespeare Sarani 6th Floor Kolkata - 700 001 [Pan : Aaaco 8663 L] Appearances by: Shri A.K. Tulsiyan, Fca, appeared on behalf of the assessee. Shri Radhe Shyam, Cit D/R, appearing on behalf of the Revenue. Date of concluding the hearing : November 22th, 2018 Date of pronouncing the order : January 9th , 2019 Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Income Tax Appellate Tribunal Kolkata 'A' Bench, Kolkata']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Sudhakar Reddy', 'S.S. Viswanethra Ravi']"", ""LAWYER"": ""['A.K. Tulsiyan', 'Radhe Shyam']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Orissa Metaliks Pvt. Ltd']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.979778051376345
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Sanjay Kumar', 'T.Amarnath Goud']"", ""LAWYER"": ""['Vivek Jain', 'B.Vijaysen Reddy', 'Sunil B.Ganu', 'Manjiri S.Ganu', 'V.Manohar Rao']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Suresh Chukkapalli']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['S.Ali Abbas Hussain']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Honble Sri Justice Sanjay Kumar And The Honble Sri Justice T.Amarnath Goud C.C.C.A. No.94 Of 2002 28-08-2018 Suresh Chukkapalli Appellant ... Petitioner Dr.S.Ali Abbas Hussain and others Respondents Counsel for Appellant :Sri Vivek Jain and Sri B.Vijaysen Reddy Counsel for respondent No.1:Sri Sunil B.Ganu Counsel for respondent No.2: Smt. Manjiri S.Ganu Counsel for respondent No.3: Sri V.Manohar Rao <Gist: >Head Note: Cases Referred: -- 1. Air 2003 Delhi 15 (D.B.) 2. (1969) 2 Scc 539 3. Air 2002 Ap 369 4. 2002 (4) Alt 448 (D.B.) 5. (1990) 4 Scc 147 6. (2016) 1 Scc 762 7. Air 1946 Pc 97 8. Air 1968 Sc 1028 9. (2002) 9 Scc 582 10. Air 2014 (Cal) 92 (F.B.) 11. Ilr (2012) V Delhi 703 12. (2010) 8 Scc 1 The Honble Sri Justice Sanjay Kumar And The Honble Sri Justice T.Amarnath Goud C.C.C.A.No.94 Of 2002 J U D G M E N T [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Sanjay Kumar', 'Amarnath Goud']"", ""LAWYER"": ""['Vivek Jain', 'B.Vijaysen Reddy', 'Sunil B.Ganu', 'Manjiri S.Ganu', 'V.Manohar Rao']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Suresh Chukkapalli']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Suresh Chukkapalli Appellant', 'Dr.S.Ali Abbas Hussain', 'Suresh Chukkapalli']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.778058528900146
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature For Rajasthan Bench At Jaipur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Dalip Kumar Targ']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Rajasthan', 'Chief Engineer (Administration), Public Health Engineering Department, 2 Civil Lines, Jal Bhawan, Jaipur', 'Secretary, Department of Personnel Government of Rajasthan']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature For Rajasthan Bench At Jaipur S.B. Civil Writs No. 22187/2018 Dalip Kumar Targ S/o Shri Taru Ram, Aged About 51 Years, Resident Of H. No. A2/12, Sector-22, Pratap Nagar, Jaipur- 302033(Raj.) ----Petitioner Versus 1. State Of Rajasthan Through Principal Secretary, Public Health Engineering Department, Government Secretariat, Jaipur 2. The Chief Engineer (Administration), Public Health Engineering Department, 2 Civil Lines, Jal Bhawan, Jaipur 3. The Secretary, Department of Personnel Government of Rajasthan, Jaipur, Rajasthan ----Respondents [/INST]
 {""CASE_NUMBER"": ""['S.B. Civil Writs No. 22187/2018']"", ""COURT"": ""['High Court Of Judicature For Rajasthan Bench At Jaipur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dalip Kumar Targ']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Rajasthan', 'Chief Engineer (Administration), Public Health Engineering Department, 2 Civil Lines, Jal Bhawan, Jaipur', 'Secretary, Department of Personnel Government of Rajasthan, Jaipur']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.663677215576172
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Karnataka At Bengaluru Dated This The 24Th Day Of May, 2019 Before The Hon'Ble Mr.Justice Ashok G. Nijagannavar Civil Revision Petition No.263 Of 2017 And Civil Revision Petition No.264 Of 2017 Between: 1. Mrs.Nazneen Khaleeli, W/O Late Mr.Md Rafi Khaleeli, Aged About 85 Years, Not Claiming That Any Senior Citizenship. 2. Mr.Atha Khaleeli, S/O Late Mr.Md Rafi Khaleeli, Aged About 68 Years, Not Claiming That Any Senior Citizenship. 3. Mrs.Zeeba Moosavi, W/O Mr.Naseer Moosavi, Aged About 66 Years, Not Claiming That Any Senior Citizenship. 4. Mrs.Shahla Raza, W/O Mr.Saeed Raza, Aged About 64 Years. 5. Mrs.Soraiya, W/O Mr.Sayed Anwar Hassan, Aged About 62 Years. 2 6. Mr.Zia Khaleli, S/O Late Mr.Md Rafi Khaleeli, Aged About 60 Years. 7. Mr.Anwar Hassan, S/O Late Mr.Syed Qamarhassan, Aged About 69 Years, Not Claiming That Any Senior Citizenship. 8. Mrs.Taj Sultana, W/O Late Mr.Jaffer Hassan, Aged About 54 Years. 9. Mr.Syedi Hassan, S/O Late Mr.Jaffer Hassan, Aged About 28 Years. All Are Residing At No.2, Laurel Lane, Richmond Town, Bengaluru - 560025. No.1 To 8 Reptd By Gpa Holder, Mr.Syedi Hassan i.e., Petitioner No.9, S/O Late Mr.Jaffer Hassan, Aged About 28 Years, At No.2, Laurel Lane, Richmond Town, Bengaluru - 560025. ...Petitioners (Common) (By Sri.Raghunath M.D, Advocate) And: 1. M/S.Siraj And Renu, A Registered Firm Having Its Office At No.38, 3Rd Floor, Rain Tree Hall Apartments, No.16, Rhenius Street, Richmond Town, Bengaluru - 560025, Rep. By Authorised Representative. 3 2. Sri K.S.Ponnappa, S/O Sri K.K.Subbaiah, Aged About 57 Years, No.14/3, 2Nd Floor, Sheriff House, 85, Gen, K.S.Thimmaiah Road, Old Richmond Road, Bengaluru - 25. ...Respondents (Common) (By Sri.K.S.Ponnappa, - R2, Party-In-Person) **** This Civil Revision Petition Is Filed Under Section 18 Of The Karnataka Small Causes Court Act., Against The Order Dated 01.04.2017 Passed On Ia No.3 In Ex.No.15131/2013 On The File Of The Xiii Addl. Judge, Court Of Small Causes Bengaluru, Allowing The Ia No.3 Filed Under Order Xxi Rule 98,99 To 101 Of Cpc., This Civil Revision Petition Is Filed Under Section 18 Of The Karnataka Small Causes Court Act., Against The Order Dated 01.04.2017 Passed On Ia No.8 In Ex.No.15131/2013 On The File Of The Xiii Addl. Judge, Court Of Small Causes, Bengaluru Rejecting The Ia No.8 Filed Under Order 21 Rule 97 Read With Section 151 Of Cpc., These Petitions Coming On For Orders This Day, The Court Made The Following: 4 Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Ashok G. Nijagannavar']"", ""LAWYER"": ""['Raghunath M.D', 'K.S.Ponnappa']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Nazneen Khaleeli', 'Atha Khaleeli', 'Zeeba Moosavi', 'Shahla Raza', 'Soraiya', 'Zia Khaleli', 'Anwar Hassan', 'Taj Sultana', 'Syedi Hassan']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 18', 'Order Xxi Rule 98,99 To 101', 'Section 151']"", ""RESPONDENT"": ""['M/S.Siraj And Renu', 'K.S.Ponnappa']"", ""STATUTE"": ""['Karnataka Small Causes Court Act.', 'Cpc.']"", ""WITNESS"": ""[]""}",18.824090480804443
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court At Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Soumen Sen']"", ""LAWYER"": ""['Pratap Chatterjee', 'Sayantan Basu', 'Prithwiraj Sinha', 'Tanmoy Roy', 'Manoj Gupta', 'Abhiroop Dhar', 'Jayanta Kr. Mitra', 'Debnath Ghosh', 'Sayan Roychowdhury', 'Gautam Kr. Roy', 'Sourav Jana', 'Gopal Das']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['La Opala R.G. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Cello Plast & Ors.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court At Calcutta Ordinary Original Civil Jurisdiction Original Side Before: The Hon'ble Justice Soumen Sen G.A. No.490 Of 2018 C.S. No.27 Of 2018 La Opala R.G. Ltd. Vs. Cello Plast & Ors. For the Plaintiffs/Petitioners : Mr. Pratap Chatterjee, Sr. Adv., Mr. Sayantan Basu, Adv., Mr. Prithwiraj Sinha, Adv., Mr. Tanmoy Roy, Adv., Mr. Manoj Gupta, Adv., Mr. Abhiroop Dhar, Adv. For the Defendant/Respondent : Mr. Jayanta Kr. Mitra, Sr. Adv., Mr. Debnath Ghosh, Adv., Mr. Sayan Roychowdhury, Adv., Mr. Gautam Kr. Roy, Adv., Mr. Sourav Jana, Adv., Mr. Gopal Das, Adv. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court At Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Soumen Sen']"", ""LAWYER"": ""['Pratap Chatterjee', 'Sayantan Basu', 'Prithwiraj Sinha', 'Tanmoy Roy', 'Manoj Gupta', 'Abhiroop Dhar', 'Jayanta Kr. Mitra', 'Debnath Ghosh', 'Sayan Roychowdhury', 'Gautam Kr. Roy', 'Sourav Jana', 'Gopal Das']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['La Opala']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Cello Plast']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.72069525718689
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Madurai Bench Of Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['B.Pugalendhi']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Nagarajan']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Crl.A.(MD)No.137 of 2015 and Crl.R.C.(MD)No.248 of 2015 Before The Madurai Bench Of Madras High Court Dated : 29.11.2021 Coram: The Honourable Mr.Justice B.Pugalendhi Crl.A.(MD)No.137 of 2015 and Crl.R.C.(MD)No.248 of 2015 Crl.A.(MD)No.137 of 2015 Nagarajan ... Appellant/Sole accused versus State Rep. by the Inspector of Police, Kannivadi Police Station, Dindigul District. (Cr.No.239 of 2003) ... Respondent [/INST]
 {""CASE_NUMBER"": ""['Crl.A.(MD)No.137 of 2015', 'Crl.R.C.(MD)No.248 of 2015', 'Crl.A.(MD)No.137 of 2015', 'Crl.R.C.(MD)No.248 of 2015']"", ""COURT"": ""['Madurai Bench Of Madras High Court']"", ""DATE"": ""['29.11.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""['B.Pugalendhi']"", ""LAWYER"": ""[]"", ""ORG"": ""['Kannivadi Police Station', 'Dindigul District']"", ""OTHER_PERSON"": ""['Nagarajan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",15.511491775512695
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Central Bureau Of Investigation']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Mohd. Parvez Abdul Kayuum']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Reportable In The Supreme Court Of India Criminal Appellate/ Original Jurisdiction Criminal Appeal Nos.140­151 Of 2012 Central Bureau Of Investigation & Anr. … Appellants Versus Mohd. Parvez Abdul Kayuum Etc. … Respondents With Criminal Appeal Nos. 981­982 Of 2019 (Arising out of Special Leave Petition Nos.9028­9029 of 2016) Criminal Appeal Nos.83­94 Of 2012 Criminal Appeal No. 983 Of 2019 (Arising out of Special Leave Petition No.5530 of 2017) And Writ Petition (Criminal) No.26 Of 2019 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Bureau Of Investigation']"", ""OTHER_PERSON"": ""['Mohd. Parvez Abdul Kayuum']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.209976196289062
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. Kumar']"", ""LAWYER"": ""['Manoj Kumar Pandey', 'Vivek Prasad']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Suraj Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Bihar', 'District Magistrate Patna', 'Assistant Excise Commissioner, Patna', 'S.H.O. Athmalgola Police Station, District- Patna']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Judicature At Patna Civil Writ Jurisdiction Case No.7999 of 2021 ====================================================== Suraj Kumar Son of Rajkumar Prasad Resident of Village - Bhawani Chowck, Bazitpur, P.S. - Barh, and District- Patna ... ... Petitioner/s Versus 1. The State of Bihar Through the Principal Secretary, Excise, Patna 2. The District Magistrate Patna 3. The Assistant Excise Commissioner, Patna 4. The S.H.O. Athmalgola Police Station, District- Patna ... ... Respondent/s ====================================================== Appearance : For the Petitioner/s : Mr.Manoj Kumar Pandey For the Respondent/s : Mr.Vivek Prasad Gp 7 ====================================================== Coram: Honourable The Chief Justice and Honourable Mr. Justice S. Kumar Oral Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. Kumar']"", ""LAWYER"": ""['Manoj Kumar Pandey', 'Vivek Prasad']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Suraj Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Bihar', 'District Magistrate Patna', 'Assistant Excise Commissioner, Patna', 'S.H.O. Athmalgola Police Station, District- Patna']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.606215715408323
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['State Of Himachal Pradesh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Manga Singh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Reportable In The Supreme Court Of India Criminal Appellate Jurisdiction Criminal Appeal No(s). 1481 Of 2018 (Arising out of SLP(Crl.)No.4177 of 2015) The State Of Himachal Pradesh Appellant(s) Versus Manga Singh Respondent(s) J U D G M E N T [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No(s). 1481']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['State Of Himachal Pradesh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Manga Singh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.486603260040283
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Common Cause (A Regd. Society)']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Reportable In The Supreme Court Of India Civil Original Jurisdiction Writ Petition (Civil) No. 215 Of 2005 Common Cause (A Regd. Society) ...Petitioner(s) Versus Union of India and Another …Respondent(s) J U D G M E N T [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Common Cause']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.31331205368042
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['S U P R E M E C O U R T O F I N D I A']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Sanjiv Khanna']"", ""LAWYER"": ""['P.S. Patwalia', 'Natasa Dalmia', 'Ashok K. Mahajan', 'Krishnan Venugopal', 'Pooja Dhar', 'Shivendra Singh', 'Deepanshi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Mohd. Mustafa']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Public Service Commission']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Item No.32+54 Court No.1 Section X S U P R E M E C O U R T O F I N D I A Record Of Proceedings Writ Petition (Civil) No.202/2019 Mohd. Mustafa Petitioner(s) Versus Union Public Service Commission & Ors. Respondent(s) With W.P.(C) No.218 of 2019 (With appln.(s) for appropriate orders/directions) Date : 25-02-2019 These petitions were called on for hearing today. Coram : Hon'Ble The Chief Justice Hon'Ble Mr. Justice Sanjiv Khanna For Petitioner(s) Mr. P.S. Patwalia, Sr. Adv. Mrs. Natasa Dalmia, Adv. Mr. Ashok K. Mahajan, Aor Wp(C) 218/2019 Mr. Krishnan Venugopal, Sr. Adv. Ms. Pooja Dhar, Adv. Mr. Shivendra Singh, Adv. Ms. Deepanshi, Adv. For Respondent(s) Upon hearing the counsel the Court made the following O R D E R [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['S U P R E M O C U R T O F I N D I A']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Sanjiv Khanna']"", ""LAWYER"": ""['P.S. Patwalia', 'Natasa Dalmia', 'Ashok K. Mahajan', 'Krishnan Venugopal', 'Pooja Dhar', 'Shivendra Singh', 'Deepanshi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Mohd. Mustafa']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Public Service Commission']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.611925840377808
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Honourable Dr. Justice B.Siva Sankara Rao Second Appeal No.459 of 2017 03-04-2018 Ramayanam Satish Kumar .Appellant 1.Thamada Bhaskara Rao and another. Respondents Counsel for the Appellant : Sri S.Subba Reddy Counsel for the Respondent No.1: A.K.Kishore Reddy Counsel for the Respondent No.2: T.V.Jaggi Reddy <Gist : >Head Note: ? Cases referred: 2008(1) Alt 10 (Sc) 2 2015(5)Alt 634 3 2002 (3) Scc 676 4 1991(1) Scc 715 5 2004(2) Ald 736 6 1996 (3)Scc 289 7 Air 1991 Kerala 152 8 1987(1) Alt 718 9 Air 1935 Madras 193 10 Air 1917 Madras 4 11 1939(2) Mlj 822 12 2016(1) Scc 411 Honble Sri Justice Dr. B. Siva Sankara Rao Second Appeal No.459 of 2017 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['B.Siva Sankara Rao']"", ""LAWYER"": ""['S.Subba Reddy', 'A.K.Kishore Reddy', 'T.V.Jaggi Reddy']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Ramayanam Satish Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Thamada Bhaskara Rao']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.038811922073364
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Ashok Menon']"", ""LAWYER"": ""['V.T.Raghunath', 'C.V.Rajalakshmi', 'C.S.Hrithwik']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Sunil Raj']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Gopan', 'State Of Kerala']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ""C.R."" In The High Court Of Kerala At Ernakulam Present The Honourable Mr. Justice Ashok Menon Tuesday, The 30Th Day Of June 2020 / 9Th Ashadha, 1942 Crl.MC.No.1797 Of 2017 Against The Order/Judgment In Cra 299/2015 Dated 29-08-2016 Of Ii Additional District Court,Trivandrum Against The Order/Judgment In Cc 1493/2013 Of Judicial Magistrate Of First Class -I,Nedumangad Crime No.193/2013 Of Valiyamala Police Station, Thiruvananthapuram Petitioner/2Nd Accused: Sunil Raj, Corrected As Susil Raj* Aged 25 Years, S/O.Premarajan, Mylamoodu House, Karikkanad, Nedumangad, Trivandrum. *The Name Of The Petitioner Typed As ""Sunil Raj"" In The Cause Title Of The Memorandum Of Crl.M.C., Synopsis, Index And Petition For Interim Direction And On The Docket Is Corrected As ""Susil Raj"" As Per Order Dated 12.11.2019 In Crl.M.A.No.1/2019 In Crl.M.C.No.1797/2017. By Advs. Sri.V.T.Raghunath Smt.C.V.Rajalakshmi Respondents/State & Complainant: 1 Gopan S/O.Manual, Mylamoodu House, Karikkanad, Nedumangad, Trivandrum. 2 State Of Kerala Represented By The Public Prosecutor, High Court Of Kerala. Other Present: Sri.C.S.Hrithwik, Sr Pp This Criminal Misc. Case Having Been Finally Heard On 30.01.2020, The Court On 30.06.2020 Passed The Following: Crl.M.C.No.1797 of 2017 2 ""C.R."" O R D E R [/INST]
 {""CASE_NUMBER"": ""['Crl.M.C.No.1797 of 2017']"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""['30.06.2020']"", ""GPE"": ""['Trivandrum']"", ""JUDGE"": ""['Ashok Menon']"", ""LAWYER"": ""['V.T.Raghunath', 'C.V.Rajalakshmi', 'C.S.Hrithwik']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunil Raj', 'Gopan', 'State Of Kerala']"", ""PETITIONER"": ""['Sunil Raj']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Gopan', 'State Of Kerala']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.854461908340454
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['C.V. Nagarjuna Reddy', 'T. Amarnath Goud']"", ""LAWYER"": ""['T. Niranjan Reddy', 'K. Suresh Reddy']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Batchu Ranga Rao']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Andhra Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Honourable Sri Justice C.V. Nagarjuna Reddy And The Honourable Sri Justice T. Amarnath Goud Criminal Appeal No.607 of 2011 16-02-2018 Batchu Ranga Rao and other---Appellants The State of Andhra Pradesh Rep. by its Public Prosecutor Respondent Counsel for the appellants : Mr. T. Niranjan Reddy, Senior Counsel, for for Mr. K. Suresh Reddy Counsel for the respondent: Public Prosecutor (Ap) <Gist: >Head Note: ?Citations: 1. (1985) 1 Scc 505 2. Air 1973 Sc 501 3. 1993 Crl.LJ 3684 4. (1994) 5 Scc 188 The Honble Sri Justice C.V. Nagarjuna Reddy And The Honble Sri Justice T. Amarnath Goud Criminal Appeal No.607 of 2011 Dated:16-02-2018 The Court Made The Following: Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['C.V. Nagarjuna Reddy', 'T. Amarnath Goud']"", ""LAWYER"": ""['T. Niranjan Reddy', 'K. Suresh Reddy']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Batu Ranga Rao']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Andhra Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.08325457572937
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Income Tax Appellate Tribunal Mumbai Bench \""C\"", Mumbai']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['C.N. Prasad', 'G. Manjunatha']"", ""LAWYER"": ""['Ravi Sawana', 'Kumar Padmapani Bora']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Coast Line Shipping (India) Pvt. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Dy. Commissioner of Income Tax']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The Income Tax Appellate Tribunal Mumbai Bench ""C"", Mumbai Before Shri C.N. Prasad, Hon'Ble Judicial Member And Shri G. Manjunatha, Hon'Ble Accountant Member ITA.NOs. 4941, 4942 & 4943/Mum/2018 (A.Ys: 2013-14, 2014-15 & 2015-16) M/s Coast Line Shipping (India) Pvt. Ltd., v. Dy. Commissioner of Income Tax 405-406-407, Mint Chambers, 45/47 Central Circle - 5(1) Mint Road, Fort, Mumbai - 400 001 Air India Building, Nariman Point Mumbai - 400 021 Pan: Aaccc4110G (Appellant) (Respondent) Assessee by : Shri Ravi Sawana Department by : Shri Kumar Padmapani Bora Date of Hearing : 13.12.2019 Date of Pronouncement : 30.12.2019 Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Income Tax Appellate Tribunal Mumbai Bench \\x2212x2212C', 'Air India Building, Nariman Point Mumbai - 400 021']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['C.N. Prasad', 'G. Manjunatha']"", ""LAWYER"": ""['Ravi Sawana', 'Kumar Padmapani Bora']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Coast Line Shipping (India) Pvt. Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Department']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.73040223121643
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Kalyani']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Sulthan Bathery Municipality']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal NO(s). 3189 Of 2022 (arising out of Slp (Civil) No(s). 4125 of 2019) Kalyani (Dead) Through Lrs. & Ors. ...Appellant(S) Versus The Sulthan Bathery Municipality & Ors. ...Respondent(S) Judgment [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal NO(s). 3189', 'Slp (Civil) No(s). 4125']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kalyani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Sulthan Bathery Municipality']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.512758016586304
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Rajeev Ranjan Prasad']"", ""LAWYER"": ""['Kriti Awasthi', 'Sambhav Gupta', 'Navnit Kumar', 'Shyam Kumar', 'Nadim Seraj', 'Archana Sinha', 'Prabhu Narain Sharma']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Hanif Ur Rahman']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Bihar', 'Meena Khatoon', 'Bihar Police', 'Child Welfare Committee, through Chairperson, Chanakyanagar, Mahmadpur, Begusarai', 'Superintendent, Alpawas Grih, Nirala Nagar, Behind G.D. College, Ratanpur, Begusarai']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Judicature At Patna Criminal Writ Jurisdiction Case No.160 of 2021 Arising Out of Ps. Case No.-58 Year-2020 Thana- Bakhari District- Begusarai ====================================================== Hanif Ur Rahman, son of Azhar Rahman, Resident of C-39, East Nizamuddin, New Delhi. ... ... Petitioner Versus 1. The State of Bihar (through Chief Secretary, Govt. of Bihar) Main Secretariat, Patna - 800015. 2. Meena Khatoon, wife of Mastan @ Noor Mohammad, Resident of Village- Mansurpur Chaksikandar, P.S.- Bidupur, District- Vaishali (Bihar) 3. The Bihar Police, through Standing Counsel. 4. Child Welfare Committee, through Chairperson, Chanakyanagar, Mahmadpur, Begusarai. 5. The Superintendent, Alpawas Grih, Nirala Nagar, Behind G.D. College, Ratanpur, Begusarai. ... ... Respondents ====================================================== Appearance : For the Petitioner : Ms. Kriti Awasthi, Advocate Mr. Sambhav Gupta, Advocate Mr. Navnit Kumar, Advocate Mr. Shyam Kumar, Advocate For the Respondents : Mr.Nadim Seraj, G.P.5 For the Resp. No. 2 : Ms. Archana Sinha, Advocate For the Resp. No. 4 : Mr. Prabhu Narain Sharma, Advocate ====================================================== Coram: Honourable Mr. Justice Rajeev Ranjan Prasad C.A.V. Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Patna']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Rajeev Ranjan Prasad']"", ""LAWYER"": ""['Kriti Awasthi', 'Sambhav Gupta', 'Navnit Kumar', 'Shyam Kumar', 'Nadim Seraj', 'Archana Sinha', 'Prabhu Narain Sharma']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Hanif Ur Rahman']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Bihar', 'Meena Khatoon', 'Bihar Police', 'Child Welfare Committee', 'Superintendent, Alpawas Grih']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.627528429031372
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab & Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Jaswant Singh', 'Lalit Batra']"", ""LAWYER"": ""['Jagmohan Bansal', 'Satya Pal Jain', 'Sourabh Goel', 'Tajender K. Joshi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Akhil Krishan Maggu']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Deputy Director, Directorate General of Gst Intelligence']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Cwp No.24195 of 2019(O&M) #1# In The High Court Of Punjab & Haryana At Chandigarh. Date of Decision:-15.11.2019 Cwp No.24195 of 2019(O&M) Akhil Krishan Maggu & Anr. ......Petitioners. Versus Deputy Director, Directorate General of Gst Intelligence & Ors. ......Respondents. Coram:- Hon'Ble Mr. Justice Jaswant Singh Hon'Ble Mr. Justice Lalit Batra Present:- Mr. Jagmohan Bansal, Advocate for the Petitioners. Mr. Satya Pal Jain, Additional Solicitor General of India (Senior Advocate) assisted by Sh. Sourabh Goel,Advocate & Mr. Tajender K. Joshi, Advocate for the Respondents. *** Jaswant Singh, J. [/INST]
 {""CASE_NUMBER"": ""['Cwp No.24195 of 2019']"", ""COURT"": ""['High Court Of Punjab & Haryana']"", ""DATE"": ""['15.11.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""['Jaswant Singh', 'Lalit Batra']"", ""LAWYER"": ""['Jagmohan Bansal', 'Satya Pal Jain', 'Sourabh Goel', 'Tajender K. Joshi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Akhil Krishan Maggu']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Deputy Director, Directorate General of Gst Intelligence']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.427438735961914
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""['B.D. Verma', 'N.S. Tomar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Meera', 'Reliance General Insurance Company Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Har Prasad', 'Meera']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 The High Court Of Madhya Pradesh Ma No.268/2017 Smt. Meera and others Vs. Har Prasad and others Ma No.295/2017 Reliance General Insurance Company Limited Vs. Smt. Meera and others Gwalior, Dated :13/01/2020 Shri B.D. Verma, Advocate for appellants in Ma No.268/2017 and for respondents no.1 to 3 in Ma No.295/2017. Shri N.S. Tomar, Advocate for appellant in Ma No.295/2017 and for respondent no.3 in Ma No.268/2017. [/INST]
 {""CASE_NUMBER"": ""['Ma No.268/2017', 'Ma No.295/2017']"", ""COURT"": ""['High Court Of Madhya Pradesh']"", ""DATE"": ""['13/01/2020']"", ""GPE"": ""['Gwalior']"", ""JUDGE"": ""[]"", ""LAWYER"": ""['B.D. Verma', 'N.S. Tomar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Meera']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Har Prasad']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.052681922912598
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Madurai Bench Of Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.M.Subramaniam']"", ""LAWYER"": ""['J.Anandhavalli', 'D.Muruganandham']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['R.Ayyapillai']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Tamil Nadu', 'Chief Engineer Water Resource Organization Chepauk, Chennai-5', 'Chief Engineer Water Resource Organization Madurai Division, Madurai', 'Superintending Engineer Water Resource Organization Tamirabarani Basin Circle Palayamkottai, Tirunelveli-2', 'Executive Engineer P.W.D.Water Resources Organization Kothaiyar Basin Division, Nagercoil']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Before The Madurai Bench Of Madras High Court Dated: 11.07.2019 Coram: The Honourable Mr.Justice S.M.Subramaniam W.P.(Md) No.21195 of 2014 R.Ayyapillai ... Petitioner vs. 1.The State of Tamil Nadu rep.by its Secretary Public Works Department Fort St.George, Chennai-9 2.The Chief Engineer Water Resource Organization Chepauk, Chennai-5 3.The Chief Engineer Water Resource Organization Madurai Division, Madurai 4.The Superintending Engineer Water Resource Organization Tamirabarani Basin Circle Palayamkottai, Tirunelveli-2 5.The Executive Engineer P.W.D.Water Resources Organization Kothaiyar Basin Division, Nagercoil ... Respondents Prayer: Writ Petition filed under Article 226 of the Constitution of India for issuance of writ of mandamus directing the 1st respondent to regularize the http://www.judis.nic.in 2 service of the petitioner who is working as Gardener from 1994(Nmr) with all service benefit and grant all monetary benefits within a time stipulated by this Court. For Petitioner : Ms.J.Anandhavalli For Respondents : Mr.D.Muruganandham Additional Government Pleader Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Madurai Bench Of Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.M.Subramaniam']"", ""LAWYER"": ""['J.Anandhavalli', 'D.Muruganandham']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['R.Ayyapillai']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 226']"", ""RESPONDENT"": ""['State of Tamil Nadu', 'Chief Engineer Water Resource Organization Chepauk, Chennai-5', 'Chief Engineer Water Resource Organization Madurai Division, Madurai', 'Superintending Engineer Water Resource Organization Tamirabarani Basin Circle Palayamkottai, Tirunelveli-2', 'Executive Engineer P.W.D.Water Resources Organization Kothaiyar Basin Division, Nagercoil']"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",18.95873022079468
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Mahabir Singh Sindhu']"", ""LAWYER"": ""['Rohit Kapoor', 'Ankur Mittal', 'Pawan Kumar Mutneja', 'Nonish Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Dabra Coop. Transport Society Limited', 'Ramesh Kumar', 'Dada Shyam Ji Co-operative Transport Society Ltd. Rohtak', 'Naya Bans Coop. Transport Society Ltd.', 'Gonder Cooperative Transport Society Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Haryana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Punjab And Haryana At Chandigarh Date of decision: April 8th, 2021 (1) Civil Writ Petition No.8087 of 2020 (O&M) Dabra Coop. Transport Society Limited and others .....Petitioners Versus State of Haryana and others .....Respondents (2) Civil Writ Petition No.7420 of 2020 (O&M) Ramesh Kumar .....Petitioner Versus State of Haryana and others .....Respondents (3) Civil Writ Petition No.9661 of 2020 (O&M) The Dada Shyam Ji Co-operative Transport Society Ltd. Rohtak .....Petitioner Versus State of Haryana and others .....Respondents (4) Civil Writ Petition No.9758 of 2020 (O&M) The Naya Bans Coop. Transport Society Ltd. and others .....Petitioners Versus State of Haryana and others .....Respondents (5) Civil Writ Petition No.10234 of 2020 (O&M) Gonder Cooperative Transport Society Ltd. and others .....Petitioners Versus State of Haryana and others .....Respondents 1 of 64 ::: Downloaded on - 05-06-2021 03:03:08 ::: Cwp No.8087 of 2020 (O&M) -2- along with other connected cases Coram: Hon'Ble Mr. Justice Mahabir Singh Sindhu Present: Mr. Rohit Kapoor, Advocate for the petitioner(s). Mr. Ankur Mittal, Additional Advocate General, Haryana. Mr. Pawan Kumar Mutneja and Mr. Nonish Kumar, Advocates for respondents No.5, 6, 8 to 11, 13 to 19, 21 & 22 (in Cwp- 8087-2020) and for respondents No.4 to 8, 10 to 13 & 15 (in Cwp-10234-2020). ***** Mahabir Singh Sindhu, J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Mahabir Singh Sindhu']"", ""LAWYER"": ""['Rohit Kapoor', 'Ankur Mittal', 'Pawan Kumar Mutneja', 'Nonish Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Dabra Coop. Transport Society Limited', 'Ramesh Kumar', 'Naya Bans Coop. Transport Society Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Haryana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.43947172164917
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Bombay']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. S. Shinde']"", ""LAWYER"": ""['Girish Kulkarni', 'Karan Kadam', 'Kripashankar Pandey', 'Rutuja Ambekar', 'Aabad Ponda', 'Ashish Suryawanshi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Siddharth Sabharwal']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Maharashtra', 'Arzoo S. Govitrikar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Wp 3269-19 (J).doc In The High Court Of Judicature At Bombay Criminal Appellate Jurisdiction Criminal Writ Petition No. 3269 Of 2019 Siddharth Sabharwal ] Age: 40 Years, Occupation- Business ] Having office at, 5, Atur House ] 87, Dr. Annie Besant Road, ] Worli, Mumbai- 400 018. ]...Petitioner Versus 1. The State of Maharashtra ] ] 2. Arzoo S. Govitrikar ] A-3, Alpa Apartments ] Pochkhanwala Road, ] Near Traffic Hq, Worli ] Mumbai- 400030. ]...Respondents Appearances- Mr. Girish Kulkarni a/w. Mr. Karan Kadam i/b. Mr. Kripashankar Pandey for the Petitioner. Mrs. Rutuja Ambekar, App for Respondent No. 1-State. Mr. Aabad Ponda i/b. Mr. Ashish Suryawanshi for Respondent No. 2. Coram : S. S. Shinde, J Reserved On : 30th August 2019 Pronounced On: 18th October 2019 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Bombay']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. S. Shinde']"", ""LAWYER"": ""['Girish Kulkarni', 'Karan Kadam', 'Kripashankar Pandey', 'Rutuja Ambekar', 'Aabad Ponda', 'Ashish Suryawanshi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Siddharth Sabharwal']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Maharashtra', 'Arzoo S. Govitrikar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.496999263763428
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['John Michael Cunha']"", ""LAWYER"": ""['Manohar N', 'Vignesh Shetty']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Marina Annette Rodrigues']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Vijaya Bank', 'G.Sirish Kumar Reddy']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Karnataka At Bengaluru Dated This The 10Th Day Of August 2020 Before The Hon'Ble Mr. Justice John Michael Cunha Writ Petition No.626 Of 2020 (Gm-Res) Between: Marina Annette Rodrigues Aged About 44 Years W/O Rakesh Singh N0.24, 2Nd Cross, Thomas Road, Kammanahalli Bangalore-560084 ...Petitioner (By Sri: Manohar N, Advocate) And 1. Vijaya Bank Mayo Hall Branch Public Utility Buildings, M.G.Road Bangalore-560001 Represented By Its Assistant General Manager M.Bapi Raju 2. G.Sirish Kumar Reddy Aged About 36 Years S/O Sree Ramulu Reddy Flat No.401, Sreedhanyatha Apartments 2 2Nd Main, Gopal Reddy Layout Dodda Banaswadi Bangalore-560043 ...Respondents (By Sri:Vignesh Shetty, Advocate For R1; Vide Order Dated 22.01.2020 R2-Served Through Hand Summons) --- This Writ Petition Is Filed Under Article 226 Of Constitution Of India Praying To Issue A Writ, Order Or Direction In The Nature Of Writ Of Certiorari To Quash Physical Possession Of The Schedule Property Of The Petitioner Taken On 16.12.2019 (Annexure-Q) Under The Provisions Of The Sarfaesi Act By The Respondent Bank As Illegal, Arbitrary And In Violation Of Principles Of Natural Justice And Therefore Violation Of Article 14 Of The Constitution Of India. Further Issue A Writ, Order Or Direction In The Nature Of Writ Of Mandamus Directing The Respondent Bank To Release The Schedule Property From Unlock The Same To Hand Over To The Petitioner And Etc. This Writ Petition Having Been Heard And Reserved For Orders On 04.08.2020 And Coming On For Pronouncment, Through Video Conference, This Day, John Michael Cunha. J, Made The Following:- 3 Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['John Michael Cunha']"", ""LAWYER"": ""['Manohar N', 'Vignesh Shetty', 'Vide Order Dated 22.01.2020', 'Vide Order Dated 04.08.2020']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Marina Annette Rodrigues']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 226', 'Article 14']"", ""RESPONDENT"": ""['Vijaya Bank', 'G.Sirish Kumar Reddy']"", ""STATUTE"": ""['Sarfaesi Act']"", ""WITNESS"": ""[]""}",14.683605432510376
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court At Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Moushumi Bhattacharya']"", ""LAWYER"": ""['S.P. Sarkar', 'A.K. Awasthi', 'Adil Rashid', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Dilip Choudhury']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Pratishruti Projects Limited']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court At Calcutta Ordinary Original Civil Jurisdiction Original Side Present: The Hon'ble Justice Moushumi Bhattacharya G.A. No. 804 Of 2019 Rvwo 11 of 2019 Cs 23 of 2015 Ga 735 of 2018 With G.A. 806 of 2019 Rvwo 12 of 2019 Cs 23 of 2015 Ga 734 of 2018 Dilip Choudhury Vs. Pratishruti Projects Limited and Ors. For the Petitioner : Mr. S.P. Sarkar, Sr. Adv. Mr. A.K. Awasthi, Adv. Mr. Adil Rashid, Adv. For the Respondent : Mr. Shuvasish Sengupta, Adv. Mr. Sarosij Dasgupta, Adv. Mrs. Subhra Das, Adv. Heard on : 7.03.2019, 10.04.2019, 19.06.2019, 25.06.2019, 9.07.2019, 16.07.2019, 18.07.2019, 29.07.2019, 31.07.2019. Delivered on : 17.09.2019. Moushumi Bhattacharya, J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court At Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Moushumi Bhattacharya']"", ""LAWYER"": ""['S.P. Sarkar', 'A.K. Awasthi', 'Adil Rashid', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra Das', 'Shuvasish Sengupta', 'Sarosij Dasgupta', 'Subhra",30.99862575531006
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court of Madhya Pradesh: Bench at Indore']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['P.K. Jaiswal', 'S.K. Awasthi']"", ""LAWYER"": ""['V.K. Tankha', 'Varun Tankha', 'D.S. Panwar', 'Rohit Mangal']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Anjana']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Bank of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Wa No. 119/2018 Smt. Anjana Vs. Bank of India High Court of Madhya Pradesh: Bench at Indore Division Bench: Hon'ble Shri Justice P.K. Jaiswal & Hon'ble Shri Justice S.K. Awasthi, Jj Wa No.119/2018 Smt. Anjana vs. Bank of India & Ors. ------------------------------------------------------------------- Shri V.K. Tankha, learned Senior counsel alongwith Shri Varun Tankha, learned counsel for the appellant. Shri D.S. Panwar, learned counsel for the respondent No.1/Bank of India. Shri Rohit Mangal, learned Govt. Advocate for the respondent No.2/State. Order [/INST]
 {""CASE_NUMBER"": ""['Wa No. 119/2018']"", ""COURT"": ""['High Court of Madhya Pradesh: Bench at Indore']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['P.K. Jaiswal', 'S.K. Awasthi']"", ""LAWYER"": ""['V.K. Tankha', 'Varun Tankha', 'D.S. Panwar', 'Rohit Mangal']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Anjana']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Bank of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.867541551589966
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Madras']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'Subramonium Prasad']"", ""LAWYER"": ""['S.R.Rajagopal', 'P.Gurusamy']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['D.Ramani']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Authorised Officer Bank of India Credit Monitoring and Recovery Department Star House Coimbatore - 641 001', 'Covai Bottles']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 In The High Court Of Judicature At Madras Dated: 20/6/2018 Coram The Honourable Mr.Justice S.Manikumar and The Honourable Mr.Justice Subramonium Prasad Writ Petition No.14937 of 2018 and W.M.P.Nos.17661 and 17662 of 2018 D.Ramani w/o.Dhandapani ... Petitioner Vs 1.The Authorised Officer Bank of India Credit Monitoring and Recovery Department Star House Coimbatore - 641 001 2.M/s.Covai Bottles No.6/6/3, Theppakulathu Parai Masthigoundanpatti Post Thirumalyampalayam Coimbatore - 641 032 ... Respondents Petition filed under Article 226 of the Constitution of India praying for a writ of certiorari calling for the records of the first respondent in issuance of the notice dated 18.05.2018 and quash the notice dated 18.05.2018 with regard to petitioner's residential property situated at the land measuring to an extent of 2504 sq ft comprised in T.S. No.1267 part (G.S.232) T.S.Ward No.11, Block No.35 and situated at Door No.37 (Old No.62 & 63) Gandhipuram 6th extension, Ganapathy Village, Coimbatore North Taluk, Coimbatore District. For Petitioner ... Mr.S.R.Rajagopal http://www.judis.nic.in for Mr.P.Gurusamy ------ 2 Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Madras']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'Subramonium Prasad']"", ""LAWYER"": ""['S.R.Rajagopal', 'P.Gurusamy']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['D.Ramani']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 226']"", ""RESPONDENT"": ""['Authorised Officer Bank of India Credit Monitoring and Recovery Department', 'M/s.Covai Bottles']"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",13.350293397903442
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Vijay Karia']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Prysmian Cavi E Sistemi Srl']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal No. 1544 Of 2020 (Arising Out Of Slp (Civil) No.8304 Of 2019) Vijay Karia & Ors. …Appellants Versus Prysmian Cavi E Sistemi Srl & Ors. …Respondents With Civil Appeal No. 1545 Of 2020 (Arising Out Of Slp (Civil) No.8435 Of 2019) Judgment [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No.1544', 'Civil Appeal No.1545']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vijay Karia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Prysmian Cavi E Sistemi Srl']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.342547178268433
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: W.P.No.9267 of 2017 In The High Court Of Judicature At Madras Dated: 04.09.2019 Coram: The Honourable Mr.Justice S.Manikumar and The Honourable Mr.Justice Subramonium Prasad W.P.No.9267 of 2017 and W.M.P.Nos.10241 to 10243 of 2017 S.Vijayashankar .. Petitioner Vs. 1.The State of Tamil Nadu, Rep. by it's Chief Secretary, Fort St.George, Chennai-9. 2.The State of Tamil Nadu, Rep. by it's Home Secretary, Fort St.George, Chennai-9. 3.The Director General of Police, Mylapore, Chennai - 4. 4.The Additional Director General of Police, (Social Justice and Human Rights) Mylapore, Chennai - 4. 5.The District Collector, The Collector Office, Cuddalore District, Cuddalore. 1/299 http://www.judis.nic.in W.P.No.9267 of 2017 6.The Deputy Inspector General of Police, Villupuram Range, Villupuram District, Villupuram. 7.The Superintendent of Police, Cuddalore District, Cuddalore. 8.The Deputy Superintendent of Police, Cbcid District Police Office Compound, Cuddalore. 9.Mr.Raja The Inspector of Police Neyveli Township Police Station District, Villupuram. 10.Kaligadevi Constable at Neyveli Township Police Station, Villupuram District. 11.The Inspector of Police Nellikuppam Police Station, Nellikuppam, Cuddalore District. 12.The Dean, Jipmer, Dhanvantri Nagar, Gorimedu, Pondicheery-605006. .. Respondents Prayer: Petition filed under Article 226 of the Constitution of India seeking a Writ of Mandamus directing the respondents to pay compensation to legal heirs of deceased Subramaniam of Rupees twenty lakhs for custodial torture resulted in death, within the time limit fixed by this Court. For Petitioner : Ms.P.Uma 2/299 http://www.judis.nic.in W.P.No.9267 of 2017 For Respondents 1 to 8 & 11 : Mr.E.Manoharan Addl. Govt. Pleader Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Madras']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'Subramonium Prasad']"", ""LAWYER"": ""['P.Uma', 'E.Manoharan']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.Vijayashankar', 'Subramaniam']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 226']"", ""RESPONDENT"": ""['State of Tamil Nadu', 'State of Tamil Nadu', 'Director General of Police, Mylapore, Chennai-4', 'Additional Director General of Police, (Social Justice and Human Rights) Mylapore, Chennai-4', 'District Collector, The Collector Office, Cuddalore District, Cuddalore', 'Additional Director General of Police, (Social Justice and Human Rights) Mylapore, Chennai-4', 'District Superintendent of Police, Cuddalore District, Cuddalore', 'Deputy Inspector General of Police, Villupuram Range, Villupuram District, Villupuram', 'Superintendent of Police, Cuddalore District, Cuddalore', 'Deputy Superintendent of Police, Cbcid District Police Office Compound, Cuddalore', 'Inspector of Police Neyveli Township Police Station District, Villupuram', 'Kaligadevi Constable at Neyveli Township Police Station, Villupuram District', 'Inspector of Police Nellikuppam Police Station, Nellikuppam, Cuddalore District', 'Dean, Jipmer, Dhanvantri Nagar, Gorimedu, Pondicheery-605006']"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",29.627740383148197
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature For Rajasthan Bench At Jaipur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Mahaveer', 'Prem Shanker', 'Bhanwar Singh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Rajasthan', 'Moti Lal', 'Pravat', 'Satyanarayan']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court Of Judicature For Rajasthan Bench At Jaipur 1. D.B. Criminal Appeal No. 186/2018 1. Mahaveer S/o Bhanwar Lal R/o Sahaspuriya, Police Station Hindoli, District Bundi. At Present in Central Jail, Kota. 2. Prem Shanker S/o Choga Lal R/o Sahaspuriya, Police Station Hindoli, District Bundi. At Present in Central Jail, Kota. ----Appellants Versus State of Rajasthan through Pp. ----Respondent Connected With 2. D.B. Criminal Appeal (Db) No. 376/2018 Bhanwar Singh S/o Shri Sangram Singh R/o Bus Stand Hindoli, Police Station Hindoli, District Bundi, Raj. ----Appellant Versus 1. State of Rajasthan through Pp. 2. Moti Lal S/o Bhanwar Lal R/o Sahaspuriya, Police Station Hindoli, District Bundi, Raj. 3. Pravat S/o Moti Lal R/o Sahaspuriya, Police Station Hindoli, District Bundi, Raj. 4. Satyanarayan S/o Moti Lal R/o Sahaspuriya, Police Station Hindoli, District Bundi, Raj. ----Respondents Crla No.186/2018 : [/INST]
 {""CASE_NUMBER"": ""['D.B. Criminal Appeal No. 186/2018', 'D.B. Criminal Appeal (Db) No. 376/2018']"", ""COURT"": ""['High Court Of Judicature For Rajasthan Bench At Jaipur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mahaveer', 'Prem Shanker', 'Bhanwar Singh', 'Moti Lal', 'Pravat', 'Satyanarayan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Rajasthan']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.167525053024292
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Asset Reconstruction Company (India) Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Bishal Jaiswal']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal No.323 Of 2021 Asset Reconstruction Company (India) Limited …Appellant Versus Bishal Jaiswal & Anr. …Respondents With Civil Appeal No.3228 Of 2020 Civil Appeal No.3765 Of 2020 Civil Appeal No.3 Of 2021 Civil Appeal No. Of 2021 (@ Slp(C) No.1168 of 2021) Judgment [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No.323', 'Civil Appeal No.3228', 'Civil Appeal No.3765', 'Civil Appeal No.3 Of 2021', 'Civil Appeal No. Of 2021']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Asset Reconstruction Company (India) Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Bishal Jaiswal']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.915772199630736
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Avitel Post Studioz Limited', 'Hsbc Pi Holdings (Mauritius) Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Hsbc Pi Holdings (Mauritius) Limited', 'Avitel Post Studioz Limited']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal No. 5145 Of 2016 Avitel Post Studioz Limited & Ors. …Appellants Versus Hsbc Pi Holdings (Mauritius) Limited …Respondent And Civil Appeal No. 5158 Of 2016 Hsbc Pi Holdings (Mauritius) Limited …Appellant Versus Avitel Post Studioz Limited & Ors. …Respondents With Civil Appeal No. 9820 Of 2016 Judgment [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No. 5145 Of 2016', 'Civil Appeal No. 5158 Of 2016', 'Civil Appeal No. 9820 Of 2016']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Avitel Post Studioz Limited', 'Hsbc Pi Holdings (Mauritius) Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.735586404800417
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Manmohan', 'Sangita Dhingra Sehgal']"", ""LAWYER"": ""['Maninder Singh', 'Smriti Asmita', 'Sarthak Garg', 'Aashaa Tiwari', 'Hrishikesh Baruah', 'Siddhant Kaushik', 'Ajay Kr. Pipaniya', 'Pallavi Pipaniya']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Runeet Gulathi', 'Abhay Dewan alias Gappy', 'Mahima Dewan', 'Jatin']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State', 'State (Govt Of Nct Of Delhi)']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: $~R-12-15 * In The High Court Of Delhi At New Delhi Judgment reserved on:2nd August,2019 Judgment pronounced on:20th September,2019 + Crl.A. 1175/2018 & Crl.M.(Bail) 1815/2018 Runeet Gulathi ..... Appellant Through: Mr. Maninder Singh, Ms. Smriti Asmita and Mr.Sarthak Garg, Advs. versus State ..... Respondent Through: Ms. Aashaa Tiwari, App for State with Insp. Madan Mohan, Ps Maurya Enclave And Crl.A. 1268/2018 & Crl.M.(Bail) Nos.1997/2018, 536/2019 Abhay Dewan alias Gappy ..... Appellant Through: Mr. Hrishikesh Baruah and Mr.Siddhant Kaushik, Advs. versus State ..... Respondent Through: Ms. Aashaa Tiwari, App for State with Insp. Madan Mohan, Ps Maurya Enclave And Crl.A. 27/2019 Mahima Dewan ..... Appellant Through: Mr. Maninder Singh, Ms.Smriti Asmita and Mr.Sarthak Garg, Advs. versus State (Govt Of Nct Of Delhi) ..... Respondent Through: Ms. Aashaa Tiwari, App for State with Insp. Madan Mohan, Ps Maurya Enclave Crl.A. 1175/2018 & other connected matters Page 1 of 159 And Crl.A. 60/2019 & Crl.M.(Bail) 107/2019 Jatin ..... Appellant Through: Mr. Ajay Kr. Pipaniya and Ms.Pallavi Pipaniya, Advs. versus State ..... Respondent Through: Ms. Aashaa Tiwari, App for State with Insp. Madan Mohan, Ps Maurya Enclave Coram: Hon'Ble Mr. Justice Manmohan Hon'Ble Ms. Justice Sangita Dhingra Sehgal Sangita Dhingra Sehgal, J [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Manmohan', 'Sangita Dhingra Sehgal']"", ""LAWYER"": ""['Maninder Singh', 'Smriti Asmita', 'Sarthak Garg', 'Aashaa Tiwari', 'Madan Mohan', 'Hrishikesh Baruah', 'Siddhant Kaushik', 'Aashaa Tiwari', 'Maninder Singh', 'Smriti Asmita', 'Sarthak Garg', 'Aashaa Tiwari', 'Madan Mohan', 'Hrishikesh Baruah', 'Siddhant Kaushik', 'Aashaa Tiwari', 'Madan Mohan']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Runeet Gulathi', 'Abhay Dewan alias Gappy', 'Mahima Dewan', 'Jatin']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",18.809029817581177
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['State of Madhya Pradesh', 'State Of Madhya Pradesh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Killu @ Kailash']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Crl. Appeal Nos. 1709-1710 of 2019 (@ Slp [Crl.]Nos.2497-2498 of 2019) The State of Madhya Pradesh vs. Killu @ Kailash & Ors. 1 Reportable In The Supreme Court Of India Criminal Appellate Jurisdiction Criminal Appeal Nos.1709-1710 Of 2019 (Arising out of Special Leave Petition (Crl.)Nos.2497-2498 of 2019) State Of Madhya Pradesh …Appellant Versus Killu @ Kailash And Ors. …Respondents Judgment [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal Nos.1709-1710 of 2019', 'Special Leave Petition (Crl.)Nos.2497-2498 of 2019']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['State of Madhya Pradesh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Killu @ Kailash']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.276013612747192
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal No. 1537 Of 2016 R. Janakiammal ... Appellant Versus S.K. Kumarasamy(Deceased) Through Legal Representatives And Others ... Respondents With Civil Appeal No.1538 Of 2016 S.R. Somasundaram And Another ... Appellants Versus S.K. Kumarasamy(Deceased) Through Legal Representatives And Others ... Respondents J U D G M E N T [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No. 1537', 'Civil Appeal No.1538']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['R. Janakiammal', 'S.K. Kumarasamy', 'S.R. Somasundaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.129276990890505
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Budihal R.B.', 'B.A. Patil']"", ""LAWYER"": ""['B.G.Namitha Mahesh', 'C.V.Nagesh', 'K.Raghavendra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['State', 'Shanthamma', 'Eeroji Rao @ Veerappa', 'B.V.Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['B.V.Kumar', 'Shanthamma @ Shantabai', 'Eerojirao @ B.Veerappa', 'State of Karnataka']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 In The High Court Of Karnataka At Bengaluru Dated This The 29Th Day Of June 2018 Present The Hon'Ble Mr. Justice Budihal R.B. And The Hon'Ble Mr. Justice B.A. Patil Criminal Appeal No.566/2013 C/W Criminal Appeal No.194/2013 C/W Criminal Appeal No.181/2013 In Crl.A.No.566/2013 Between: State by Women Police Station Davangere. ...Appellant (By Smt. B.G.Namitha Mahesh, Hcgp) And: 1. B.V.Kumar S/o Eerojirao @ B.Veerappa 40 years 2. Smt.Shanthamma @ Shantabai W/o Eerojirao, 64 years 3. Eerojirao @ B.Veerappa S/o B.Somanna, 69 years All are r/o 3rd Main 2 9Th Cross, Vinobhanagara Davangere - 577 001. ...Respondents (By Sri C.V.Nagesh, Senior Counsel for Sri K.Raghavendra, Advocate) This Criminal Appeal is filed under Section 377 Cr.P.C., praying to modify the judgment and order of conviction of sentence dated 23.01.2013 passed by the Ii Additional District and Sessions Judge, Davanagere in S.C. No.16/2009 and impose adequate sentence against the respondents/accused for the offence p/u/s 3 of the Dowry Prohibition Act and etc. In Crl.A. No.194/2013 Between: 1. Smt.Shanthamma Aged about 65 years W/o Sri Eeroji Rao 2. Sri Eeroji Rao @ Veerappa Aged about 70 years S/o Somanna Both are residents of the premises Bearing No.1631/3 9th Cross, Iii Main Vinobhanagara Davanagere. ...Appellants (By Sri C.V.Nagesh, Senior Counsel for Sri K.Raghavendra, Advocate) And: The State of Karnataka By the Station House Officer Women Police Station 3 Davanagere ...Respondent (By Smt. B.G.Namitha Mahesh, Hcgp) This Criminal Appeal is filed under Section 374 (2) Cr.P.C., praying to set aside the judgment dated 23.01.2013 passed by the Ii Additional District and Sessions Judge, Davanagere in S.C. No.16/2009 - convicting the appellants/accused for the offence p/u/s 498A R/W 34 of Ipc and Sec.3, 4 & 6 of D.P.Act and etc. In Crl. A. No.181/2013 Between: Sri B.V.Kumar Aged about 40 years S/o Eerojirao Merchant by Profession Resident of the premises Bearing No.1631/3 9th Cross, Vinobhanagara Davanagere. ...Appellant (By Sri C.V.Nagesh, Senior Counsel for Sri K.Raghavendra, Advocate) And: The State of Karnataka By the Station House Officer Women Police Station Davanagere. ...Respondent (By Smt. B.G.Namitha Mahesh, Hcgp) This Criminal Appeal is filed under Section 374(2) Cr.P.C., praying to set aside the judgment dated 23.01.2013 passed by the Ii Additional District and Sessions Judge, 4 Davanagere in S.C. No.16/2009 - convicting the appellant/accused for the offence p/u/s 498A, 304(B), 302, 506 and 201 R/W 34 of Ipc and Sec.3, 4 & 6 of D.P.Act and etc. These Criminal Appeals having been heard and reserved for judgment on 12.06.2018 and coming on for pronouncement of judgment this day, Budihal R.B. J., delivered the following:- Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Budihal R.B.']"", ""LAWYER"": ""['C.V.Nagesh', 'K.Raghavendra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['State by Women Police Station Davangere']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 377', 'Section 374 (2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2)', 'Section 374(2",32.051186323165894
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Court Of The Xxi Addl. City Civil And Sessions Judge And Prl. Special Judge For Cbi Cases At Bengaluru (Cch-4)']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Sadashiva S. Sultanpuri']"", ""LAWYER"": ""['Praveen C.']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Chikkanna']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Crl.A. No.1011/2017 J In The Court Of The Xxi Addl. City Civil And Sessions Judge And Prl. Special Judge For Cbi Cases At Bengaluru (Cch-4). Dated This The 12th Day Of July 2018 Present: Sri. Sadashiva S. Sultanpuri, B.Com., Ll.B., (Spl.) Xxi Addl. City Civil and Sessions Judge and Prl. Special Judge for Cbi Cases, Bengaluru. Crl. Appeal No.1011/2017 Appellant Mr. Chikkanna, S/o Late Ramalingam, Aged about 58 years, No.302, Paradise Enclave, 8th Main, 5th Cross, Sbn Colony, Mathikere, Bengaluru. (By Sri. Praveen C., Advocate) Vs. Respondent State by Cbi/Acb, Bangalore, (Represented by its Public Prosecutor) Judgment [/INST]
 {""CASE_NUMBER"": ""['Crl.A. No.1011/2017']"", ""COURT"": ""['Xxi Addl. City Civil and Sessions Judge and Prl. Special Judge for Cbi Cases at Bengaluru']"", ""DATE"": ""['12th Day of July 2018']"", ""GPE"": ""['Bengaluru']"", ""JUDGE"": ""['Sadashiva S. Sultanpuri']"", ""LAWYER"": ""['Praveen C.']"", ""ORG"": ""['Cbi/Acb']"", ""OTHER_PERSON"": ""['Chikkanna', 'Ramalingam']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.30137825012207
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court At Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Ravi Krishan Kapur']"", ""LAWYER"": ""['Jishnu Saha', 'Touseef Khan', 'Arindam Paul', 'Parul Mukherjee', 'Partha Sarathi Bhattacharya', 'S. S. Koley']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bharat Heavy Electricals Limited - Electronics Division']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['The West Bengal State Electricity Distribution Co. Ltd.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court At Calcutta Ordinary Original Civil Jurisdiction Original Side Commercial Division (Via Video Conference) Before: The Hon'ble Mr. Justice Ravi Krishan Kapur Ap/243/2021 Bharat Heavy Electricals Limited - Electronics Division. -vs- The West Bengal State Electricity Distribution Co. Ltd. & Anr. For the petitioner : Mr. Jishnu Saha, Sr. Adv. Mr. Touseef Khan, Mr. Arindam Paul, Mr. Parul Mukherjee, For the respondent : Mr. Partha Sarathi Bhattacharya, Mr. S. S. Koley, Heard on : 14.12.2021, 16.12.2021, 22.12.2021 Judgment on : 20.01.2022 Ravi Krishan Kapur, J.: 1. This is an application under Section 9 of the Arbitration and Conciliation Act, 1996 (""the Act""). The facts:- [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court At Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Ravi Krishan Kapur']"", ""LAWYER"": ""['Jishnu Saha', 'Touseef Khan', 'Arindam Paul', 'Parul Mukherjee', 'Partha Sarathi Bhattacharya', 'S. S. Koley']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bharat Heavy Electricals Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 9']"", ""RESPONDENT"": ""['West Bengal State Electricity Distribution Co. Ltd.']"", ""STATUTE"": ""['Arbitration and Conciliation Act, 1996']"", ""WITNESS"": ""[]""}",13.352272033691406
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Satish Chandra Sharma', 'Abhinand Kumar Shavili']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'Ble The Chief Justice Satish Chandra Sharma And The Hon'Ble Sri Justice Abhinand Kumar Shavili Writ Petition Nos.38658 and 42109 of 2016, 996, 1197, 3055, 3056, 3295, 3296, 3298, 3299, 3300, 3301, 3302, 3544, 4560, 4561, 4586, 4588, 6857, 6890, 6902, 6904, 7052, 7146, 7148, 7150, 7154, 7156, 7157, 7159, 7160, 7161, 7215, 7342, 7355, 7514, 7573, 7642, 7646, 7677, 7907, 7942, 8315, 8347, 8523, 8558, 8664, 9358, 9364, 9393, 9621, 9660, 10264, 10924, 11067, 11089, 11642, 14560, 18118 and 18138 of 2017 and 19616 of 2019 Common Order [/INST]
 {""CASE_NUMBER"": ""['Writ Petition Nos.38658 and 42109 of 2016', '19616 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Satish Chandra Sharma', 'Abhinand Kumar Shavili']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.447856187820436
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Subhash Chander']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Bharat Petroleum Corporation Ltd.(Bpcl)']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal NO(s). 7517 Of 2012 Subhash Chander & Ors. ……Appellant(s) Versus M/S Bharat Petroleum Corporation Ltd.(Bpcl) & Anr. .….Respondent(s) Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Subhash Chander']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Bharat Petroleum Corporation Ltd.(Bpcl)']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.374568700790403
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Anil Kumar Yadav']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Uttar Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The Supreme Court Of India Criminal Appellate Jurisdiction Criminal Appeal No. 348 Of 2022 (@ Slp (Crl.) No.8567 Of 2019) Anil Kumar Yadav …Appellant(S) Versus State Of Uttar Pradesh And Anr. …Respondent(S) O R D E R [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No. 348', 'Slp (Crl.) No.8567']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anil Kumar Yadav']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Uttar Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.757431507110596
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['H.P. Sandesh']"", ""LAWYER"": ""['H. Ramachandra', 'H.R. Anantha Krishna Murthy', 'K.R. Lakshminarayana Rao']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['G.L. Jagadish']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Vasantha Kokila']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 R In The High Court Of Karnataka At Bengaluru Dated This The 19Th Day Of February, 2021 Before The Hon'Ble Mr. Justice H.P. Sandesh Criminal Appeal No.176/2011 Between: Sri G.L. Jagadish, S/O Sri G.N. Lingappa, Aged About 52 Years, Residing At No.29, 3Rd Main, Basaveshwara Housing Society Layout, Vijayanagar, Near Bts Depot, Bengaluru-40. ... Appellant [By Sri H. Ramachandra, Advocate For Sri H.R. Anantha Krishna Murthy And Associates - (Through V.C.)] And: Smt. Vasantha Kokila, W/O Late N.R. Somashekhar, Aged About 58 Years, Residing At No.322, 8Th Main, 3Rd Stage, 4Th Block, Basaveshwaranagar, Bengaluru. ... Respondent [By Sri K.R. Lakshminarayana Rao, Advocate] This Criminal Appeal Is Filed Under Section 378(4) Of Cr.P.C. Praying To Set Aside The Order Dated 06.07.2010 Passed By The P.O. Ftc-Ii, Bengaluru In Crl.A. No.470/2009 And Confirming The Order Dated 27.05.2009 Passed By The Xxii Acmm And Xxiv Ascj, Bengaluru In C.C.No.17229/2004 Convicting The Respondent/Accused For The Offence Punishable Under Section 138 Of Ni Act. 2 This Criminal Appeal Having Been Heard And Reserved For Orders On 06.02.2021 This Day, The Court Pronounced The Following: Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['H.P. Sandesh']"", ""LAWYER"": ""['H. Ramachandra', 'H.R. Anantha Krishna Murthy', 'K.R. Lakshminarayana Rao']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['G.L. Jagadish']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 378(4)', 'Section 138']"", ""RESPONDENT"": ""['Vasantha Kokila']"", ""STATUTE"": ""['Cr.P.C.', 'Ni Act']"", ""WITNESS"": ""[]""}",12.787036895751951
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['P.B.Suresh Kumar']"", ""LAWYER"": ""['V.Philip Mathew', 'E.Radhakrishnan', 'Jeph Joseph', 'S.Sreekumar', 'P.Martin Jose', 'P.Prijith', 'Thomas P.Kuruvilla', 'R.Githesh', 'Manjunath Menon', 'Harikrishnan S.', 'Sachin Jacob Ambat', 'Hani P.Nair', 'Ajay Ben Jose', 'Murali Purushothaman']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Anandagopan.K']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Anto Antony']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Kerala At Ernakulam Present The Honourable Mr. Justice P.B.Suresh Kumar Monday, The 23Rd Day Of November 2020 / 2Nd Agrahayana, 1942 El.Pet..No.2 Of 2019 Petitioner: Anandagopan.K, Aged 72 Years, S/O.Late Kesava Panicker, Chaithanya, Vallamkulam P.O.,Eraviperoor, Pathanamthitta-689 542. By Advs. Sri.V.Philip Mathew Sri.E.Radhakrishnan Sri.Jeph Joseph Respondent: Anto Antony, Aged 62 Years, S/O.Antony, Resident Of 12/710A(11/287), Skyline Palm Spring Villa,Kalathipady, Vadavathoor P.O., Kottayam-686 010. R1 By Adv. Sri.S.Sreekumar (Sr.) R1 By Adv. Sri.P.Martin Jose R1 By Adv. Sri.P.Prijith R1 By Adv. Sri.Thomas P.Kuruvilla R1 By Adv. Sri.R.Githesh R1 By Adv. Sri.Manjunath Menon R1 By Adv. Shri.Harikrishnan S. R1 By Adv. Sri.Sachin Jacob Ambat R1 By Adv. Smt.Hani P.Nair R1 By Adv. Sri.Ajay Ben Jose R2 By Sri.Murali Purushothaman, Sc,Ele.Commn. This Election Petition Having Been Finally Heard On 18-11-2020, The Court On 23-11-2020 Delivered The Following: Election Petition No.2 of 2019 ..2.. P.B.Suresh Kumar, J. ----------------------------------------------- Election Petition No.2 of 2019 ----------------------------------------------- Dated this the 23rd day of November, 2020 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['P.B.Suresh Kumar']"", ""LAWYER"": ""['V.Philip Mathew', 'E.Radhakrishnan', 'Jeph Joseph', 'S.Sreekumar', 'P.Martin Jose', 'P.Prijith', 'Thomas P.Kuruvilla', 'R.Githesh', 'Manjunath Menon', 'Harikrishnan S.', 'Ajay Ben Jose', 'Murali Purushothaman', 'Hani P.Nair', 'Sachin Jacob Ambat']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anto Antony']"", ""PETITIONER"": ""['Anandagopan.K']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Anto Antony']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",16.981290578842163
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'Shaji P.Chaly']"", ""LAWYER"": ""['M.P.Chothy', 'Prakashan K.V.', 'B.Unnikrishna Kaimal', 'Sindhumol.T.P.']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['M.P.Chothy']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Kerala', 'Registrar, State Sc/St Commission, Ayyankali Bhavan, Kanaka Nagar, Vellayambalam, Kaudiar P.O, Thiruvananthapuram-695 003', 'Registrar General, High Court Of Kerala, Ernakulam', 'Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Kerala At Ernakulam Present The Honourable The Chief Justice Mr.S.Manikumar & The Honourable Mr. Justice Shaji P.Chaly Tuesday, The 29Th Day Of September 2020 / 7Th Aswina, 1942 WP(C).No.34097 Of 2015(R) Petitioner: M.P.Chothy, Aged 65 Years S/O. Kalamban Painkan, Macherikkudy House, Iringole Kara, Perumbavoor Village, Iringole P.O, Pin 683548. By Adv. M.P.Chothy (Party-In-Person) Respondents: 1 State Of Kerala, Represented By The Chief Secretary, Govt. Secretariat, Thiruvananthapuram-695 001. 2 The Registrar, State Sc/St Commission, Ayyankali Bhavan, Kanaka Nagar, Vellayambalam, Kaudiar P.O, Thiruvananthapuram-695 003. 3 Registrar General, High Court Of Kerala, Ernakulam 4 Union Of India, Represented By Its Secretary, Ministry Of Social Justice And Empowerment, Shastri Bhavan, New Delhi-110001. R1 & R2 By Sri. Prakashan K.V., Special Govt. Pleader . R3 By Adv. Sri.B.Unnikrishna Kaimal R4 By Adv. Smt.Sindhumol.T.P., Cgc This Writ Petition (Civil) Having Been Finally Heard On 18-09-2020, The Court On 29-09-2020 Delivered The Following: W.P(C) No.34097/2015 2 ""C.R."" Judgment [/INST]
 {""CASE_NUMBER"": ""['W.P(C) No.34097/2015']"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""['18-09-2020', '29-09-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'Shaji P.Chaly']"", ""LAWYER"": ""['M.P.Chothy', 'Prakashan K.V.', 'B.Unnikrishna Kaimal', 'Sindhumol.T.P.', 'S.B.Govindan']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['M.P.Chothy']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Kerala', 'Registrar, State Sc/St Commission, Ayyankali Bhavan, Kanaka Nagar, Vellayambalam, Kaudiar P.O, Thiruvananthapuram-695 003', 'Registrar General, High Court Of Kerala, Ernakulam', 'Union Of India, Represented By Its Secretary, Ministry Of Social Justice And Empowerment, Shastri Bhavan, New Delhi-110001']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",22.646581172943115
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Jayant Nath']"", ""LAWYER"": ""['Prabhjit Jauhar', 'Rosemary Raju', 'Aishwarya', 'Upasana Goel', 'Gaurav Mitra', 'Vaibhav Mishra', 'Rashmita Roy Choudhury']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rajeev Tandon']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Rashmi Tandon']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: $~J- * In The High Court Of Delhi At New Delhi Judgment Reserved on: 23.01.2019 % Judgment Pronounced on: 28.02.2019 + Cs(Os) 501/2016 Sh Rajeev Tandon & Anr ..... Plaintiffs Through Mr.Prabhjit Jauhar, Ms.Rosemary Raju, Ms.Aishwarya and Ms.Upasana Goel, Advs. versus Smt Rashmi Tandon ..... Defendant Through Mr.Gaurav Mitra, Mr.Vaibhav Mishra and Ms.Rashmita Roy Choudhury, Advs. Coram: Hon'Ble Mr. Justice Jayant Nath Jayant Nath, J. Ia No. 14323/2016 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Jayant Nath']"", ""LAWYER"": ""['Prabhjit Jauhar', 'Rosemary Raju', 'Aishwarya', 'Upasana Goel', 'Gaurav Mitra', 'Vaibhav Mishra', 'Rashmita Roy Choudhury']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rajeev Tandon']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Rashmi Tandon']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.56414794921875
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. Ravindra Bhat', 'A.K. Chawla']"", ""LAWYER"": ""['Pranav Jain', 'Shalini Kapoor', 'Rhea. G. Munjal', 'Bindita Chaturvedi', 'Dikshant Khanna', 'Ashwani Bhardwaj', 'Ananya Mukherjee', 'Ankit Jain', 'Siddhnat Nath', 'Anuj Aggarwal', 'Vivek Goyal', 'Akshay Makhija', 'Aditya Goyal', 'Kriti Awasthi', 'Simran Mehta', 'Surhid Bhandari', 'Anuj Sarma', 'Jaswinder Singh', 'Pradeep K.B.', 'S.D. Windlesh', 'Abhineet Gulati', 'Anjana Thukral']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Shobha Aggarwal', 'Mahender Yadav', 'Harsh Kumar Agarwal', 'Chaudhary Kishan Chand', 'Raghubir Saran Charitable Trust']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Uoi', 'Union Of India', 'Raymond Ltd']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: * In The High Court Of Delhi At New Delhi Reserved on: 04.10.2018 Pronounced on: 07.01.2019 + W.P.(C) 516/2010 & Cm Appl. 26668/2018 Shobha Aggarwal & Ors. ..... Petitioner versus Uoi & Anr. ..... Respondents + W.P.(C) 7489/2012 Mahender Yadav ..... Petitioner versus Uoi & Anr ..... Respondents + W.P.(C) 4951/2014 Harsh Kumar Agarwal ..... Petitioner versus Union Of India And Ors ..... Respondents + W.P.(C) 917/2018 Chaudhary Kishan Chand & Sons (Huf)..... Petitioner versus Union Of India & Ors ..... Respondents + Cs(Os) 3518/2012, I.A. 3927/2013 & 15957/2013 Raghubir Saran Charitable Trust ..... Plaintiff versus Raymond Ltd & Anr ..... Defendants Through: Petitioner No.1 in person in W.P.(C) 516/2010 with Sh. Pranav Jain, Advocate, for Petitioner Nos. 2 and 3 in W.P.(C) 516/2010. Ms. Shalini Kapoor, Ms. Rhea. G. Munjal, Ms. Bindita Chaturvedi and Sh. Dikshant Khanna, Advocates, for petitioner in W.P.(C) 4951/2014. Dr. Ashwani Bhardwaj with Ms. Ananya Mukherjee, Advocates, for Respondent No.3, in W.P.(C) 516/2010.. Sh. Ankit Jain and Sh. Siddhnat Nath, Advocates, for New Delhi Traders Association, in W.P.(C) 516/2010. W.P.(C) 516/2010 & connected matters Page 1 of 66 Sh. Anuj Aggarwal, Advocate, for Uoi, in W.P.(C) 516/2010. Sh. Vivek Goyal, Advocate, for Uoi, in W.P.(C) 7489/2012. Sh. Akshay Makhija, Cgsc with Sh. Aditya Goyal and Ms. Kriti Awasthi, Advocate, for Uoi, in W.P.(C) 516/2010 and W.P.(C) 4951/2014. Sh. Simran Mehta and Sh. Surhid Bhandari, Advocates for plaintiffs in Cs(Os) 3518/2012. Sh. Anuj Sarma, Advocate, for defendant, in Cs(Os) 3518/2012. Sh. Jaswinder Singh, Advocate, for Defendant Nos. 2 and 3, in Cs(Os) 3518/2012. Sh. Pradeep K.B., Advocate, for petitioner, in W.P.(C) 917/2018. Sh. S.D. Windlesh, Advocate, for Uoi, in W.P.(C) 917/2018. Sh. Abhineet Gulati and Ms. Anjana Thukral, Advocates, for Respondent No.2. Coram: Hon'Ble Mr. Justice S. Ravindra Bhat Hon'Ble Mr. Justice A.K. Chawla Mr. Justice S. Ravindra Bhat % 1. The petitioners [in W.P.(C) 516/2010] are co-owners along with other heirs, of late Sharbati Devi, of property, being No. 4/14A, Asaf Ali Road; [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. Ravindra Bhat', 'A.K. Chawla', 'S. Ravindra Bhat']"", ""LAWYER"": ""['Pranav Jain', 'Rhea. G. Munjal', 'Bindita Chaturvedi', 'Dikshant Khanna', 'Shalini Kapoor', 'Rhea. G. Munjal', 'Ananya Mukherjee', 'Ankit Jain', 'Siddhnat Nath', 'Anuj Aggarwal', 'Vivek Goyal', 'Akshay Makhija', 'Aditya Goyal', 'Kriti Awasthi', 'Anuj Sarma', 'Jaswinder Singh', 'Pradeep K.B.', 'Abhineet Gulati', 'Anjana Thukral']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shobha Aggarwal', 'Mahender Yadav', 'Harsh Kumar Agarwal', 'Chaudhary Kishan Chand & Sons (Huf)', 'Raghubir Saran Charitable Trust', 'Raymond Ltd']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Uoi']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",22.366368770599365
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[\""Income Tax Appellate Tribunal, Delhi Bench: 'E' New Delhi\""]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Kul Bharat']"", ""LAWYER"": ""['Pramita M. Biswas', 'Abhinav Malhotra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Dcit']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Shiv Dayal Singh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The Income Tax Appellate Tribunal, Delhi Bench: 'E' New Delhi Before Shri Kul Bharat, Judicial Member And Shri O.P. Kant, Accountant Member [Through Video Conferencing] Ita No.5849/Del/2017 Assessment Year: 2014-15 Dcit, Vs. Major Shiv Dayal Singh Exemption Circle, Chikitsa Trust, Ghaziabad Phoos Bangla, Civil Lines, Fatehgarh, Farrukhabad Pan :Aabtm7636F (Appellant) (Respondent) Appellant by Ms. Pramita M. Biswas, Cit(Dr) Respondent by Sh. Abhinav Malhotra, Adv. Date of hearing 13.07.2021 Date of pronouncement 29.07.2021 Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Income Tax Appellate Tribunal, Delhi Bench: 'E' New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Kul Bharat', 'O.P. Kant']"", ""LAWYER"": ""['Pramita M. Biswas', 'Abhinav Malhotra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Major Shiv Dayal Singh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Chikitsa Trust, Ghaziabad']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.810698509216309
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['P. Keshava Rao']"", ""LAWYER"": ""['G. Sravan Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['D. Chandra Sekhar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Telangana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Honble Sri Justice P. Keshava Rao Criminal Revision Case No.1625 Of 2018 03-07-2018 D. Chandra Sekhar ...Petitioner The State of Telangana, by Traffic Police Station, Banjara Hills, Hyderabad, rep., by Public Prosecutor, High ct of Judicatu Counsel for Petitioner : Sri G. Sravan Kumar. Counsel for the respondent: Public Prosecutor <Gist: >Head Note: ? Cases referred 1.(2012) 8 Scc 450 Honble Sri Justice P. Keshava Rao Criminal Revision Case No.1625 of 2018 Order [/INST]
 {""CASE_NUMBER"": ""['Criminal Revision Case No.1625']"", ""COURT"": ""[]"", ""DATE"": ""['03-07-2018']"", ""GPE"": ""[]"", ""JUDGE"": ""['P. Keshava Rao']"", ""LAWYER"": ""['G. Sravan Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['D. Chandra Sekhar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Telangana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.030627012252808
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Manmohan']"", ""LAWYER"": ""['Amit Sibal', 'Anuj Berry', 'Abhey J.V.', 'Saksham Dhingra', 'Vinay Tripathi', 'Malak Bhatt', 'Apoorva Murali', 'Surabhi Bhandari', 'Rajeev Virmani', 'Ajay Bhargava', 'Ankur Sangal', 'Sucheta Roy', 'Richa Bhargava', 'Saugaat Khurana', 'Niharika']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Su-Kam Power Systems Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Kunwer Sachdev']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: $~ * In The High Court Of Delhi At New Delhi + Cs(Comm) 1155/2018 & I.As.13597/2018 And 14309/2018 Su-Kam Power Systems Ltd. ..... Plaintiff Through: Mr. Amit Sibal, Senior Advocate with Mr. Anuj Berry, Mr. Abhey J.V., Mr. Saksham Dhingra, Mr. Vinay Tripathi Mr. Malak Bhatt, Ms. Apoorva Murali and Ms. Surabhi Bhandari, Advocates. versus Mr. Kunwer Sachdev & Anr. ..... Defendants Through: Mr.Rajeev Virmani, Sr.Advocate with Mr.Ajay Bhargava, Mr.Ankur Sangal, Ms.Sucheta Roy, Ms.Richa Bhargava,, Ms.Saugaat Khurana and Ms.Niharika, Advocates. Reserved on: 11th October, 2019 % Date of Decision: 30th October, 2019 Coram: Hon'Ble Mr. Justice Manmohan Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Manmohan']"", ""LAWYER"": ""['Amit Sibal', 'Anuj Berry', 'Abhey J.V.', 'Saksham Dhingra', 'Vinay Tripathi', 'Malak Bhatt', 'Apoorva Murali', 'Surabhi Bhandari', 'Rajeev Virmani', 'Ajay Bhargava', 'Ankur Sangal', 'Sucheta Roy', 'Richa Bhargava', 'Saugaat Khurana', 'Niharika']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Su-Kam Power Systems Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Kunwer Sachdev']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",15.752744436264038
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Harinder Singh Sidhu']"", ""LAWYER"": ""['Sanjeev Goyal', 'Diwan S. Adlakha']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Icici Lombard General Insurance Company Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Mehrana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Fao-792-2018 [1] In The High Court Of Punjab And Haryana At Chandigarh Fao No.792 of 2018 (O&M) Date of Decision: August 06, 2018 Icici Lombard General Insurance Company Limited ...Appellant Versus Mehrana and others ...Respondents Coram:- Hon'Ble Mr.Justice Harinder Singh Sidhu Present: Mr.Sanjeev Goyal, Advocate for the appellant-Insurer. Mr.Diwan S. Adlakha, Advocate for respondents No.1 to 5. *** Harinder Singh Sidhu, J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Harinder Singh Sidhu']"", ""LAWYER"": ""['Sanjeev Goyal', 'Diwan S. Adlakha']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Icici Lombard General Insurance Company Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Mehrana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.915804386138916
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Canara Bank']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['N.G. Subbaraya Setty']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal No.4233 Of 2018 (Arising Out Of Slp (C) No.25649 Of 2017) Canara Bank …Appellant Versus N.G. Subbaraya Setty & Anr. ...Respondents Judgment [/INST]
 {""CASE_NUMBER"": ""['slp (C) No.25649 Of 2017']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Canara Bank']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['N.G. Subbaraya Setty']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.757848262786863
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Manju Rani Chauhan']"", ""LAWYER"": ""['Saiful Islam Siddiqui', 'Tahira Kazmi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Mohammad Azam Khan']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of U.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature At Allahabad A.F.R. Court No. - 76 Case :- Application U/S 482 No. - 39535 of 2019 Applicant :- Mohammad Azam Khan And 2 Others Opposite Party :- State Of U.P. And 2 Others Counsel for Applicant :- Saiful Islam Siddiqui,Tahira Kazmi Counsel for Opposite Party :- G.A. Hon'ble Mrs. Manju Rani Chauhan,J. [/INST]
 {""CASE_NUMBER"": ""['A.F.R. Court No. - 39535']"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Manju Rani Chauhan']"", ""LAWYER"": ""['Saiful Islam Siddiqui', 'Tahira Kazmi']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Mohammad Azam Khan']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['U.P.']"", ""RESPONDENT"": ""['State Of U.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.863669157028198
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: C/Lpa/1655/2019 Judgment Dated: 30/06/2021 In The High Court Of Gujarat At Ahmedabad R/Letters Patent Appeal No. 1655 of 2019 In R/Special Civil Application No. 5342 of 2017 With Civil Application (For Stay) No. 1 of 2019 In R/Letters Patent Appeal No. 1655 of 2019 For Approval And Signature: Honourable Mr. Justice J.B.Pardiwala Sd/- and Honourable Ms. Justice Vaibhavi D. Nanavati Sd/- ========================================================== 1 Whether Reporters of Local Papers may be allowed No to see the judgment ? 2 To be referred to the Reporter or not ? No 3 Whether their Lordships wish to see the fair copy No of the judgment ? 4 Whether this case involves a substantial question No of law as to the interpretation of the Constitution of India or any order made thereunder ? ========================================================== Navrangpura Gam Dharmada Trust Thru Trustees Versus Gautambhai Bhikhabhai Thakor ========================================================== Appearance: Mr. Mehul Suresh Shah, Ld. Sr. Counsel With Mr Vishal C Mehta(6152) for the Appellant(s) No. 1,2,3,4 for the Respondent(s) No. 2,3,4,5 Mr. Ansin Desai, Ld. Sr. Counsel With Mr. Zalak B Pipalia(6161) for the Respondent(s) No. 1 ========================================================== Coram:Honourable Mr. Justice J.B.Pardiwala and Honourable Ms. Justice Vaibhavi D. Nanavati Date : 30/06/2021 Page 1 of 34 Downloaded on : Sat Jan 15 09:36:25 Ist 2022 C/Lpa/1655/2019 Judgment Dated: 30/06/2021 Oral Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Gujarat At Ahmedabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['J.B.Pardiwala', 'Vaibhavi D. Nanavati']"", ""LAWYER"": ""['Mehul Suresh Shah', 'Vishal C Mehta', 'Ansin Desai', 'Zalak B Pipalia']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Navrangpura Gam Dharmada Trust']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Gautambhai Bhikhabhai Thakor']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.504698753356934
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Ram Lal']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Himachal Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Criminal Appellate Jurisdiction Criminal Appeal No.576 Of 2010 Ram Lal ….Appellant Versus State Of Himachal Pradesh ….Respondent With Criminal Appeal No. 577 Of 2010 Criminal Appeal No. 578 Of 2010 Judgment [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No.576', 'Criminal Appeal No.577', 'Criminal Appeal No.578']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Lal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Himachal Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.48952603340149
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Farida Begum']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Uttarakhand']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Non­Reportable In The Supreme Court Of India Criminal Appellate Jurisdiction Criminal Appeal No.1560 Of 2013 Farida Begum .. Appellant Versus State of Uttarakhand .. Respondent With Criminal Appeal No. 1652 of 2013 and Criminal Appeal No. 1653 of 2013 J U D G M E N T [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No.1560 Of 2013', 'Criminal Appeal No.1652 of 2013', 'Criminal Appeal No.1653 of 2013']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Farida Begum']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Uttarakhand']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.97626543045044
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Raj Mohan Singh']"", ""LAWYER"": ""['Puneet Kansal', 'Nikhita Kansal', 'Vikas Bahl', 'C.M. Munjal', 'Priyanka Kansal']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Municipal Committee/Council, Jalalabad(W)']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Vimla Devi']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Cr No.4242 of 2019(O&M) 1 In The High Court Of Punjab And Haryana At Chandigarh Cr No.4242 of 2019(O&M) Date of Decision-19.11.2019 Municipal Committee/Council, Jalalabad(W) ... Petitioner Versus Vimla Devi (now deceased) through her Lr and others ... Respondents Coram:-Hon'Ble Mr. Justice Raj Mohan Singh Present: Mr. Puneet Kansal, Advocate and Ms. Nikhita Kansal, Advocate for the petitioners. Mr. Vikas Bahl, Senior Advocate with Mr. C.M. Munjal, Advocate and Ms. Priyanka Kansal, Advocate for respondents No.1 and 2. *** Raj Mohan Singh, J. [/INST]
 {""CASE_NUMBER"": ""['Cr No.4242 of 2019(O&M)']"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""['19.11.2019']"", ""GPE"": ""['Jalalabad(W)']"", ""JUDGE"": ""['Raj Mohan Singh']"", ""LAWYER"": ""['Puneet Kansal', 'Nikhita Kansal', 'Vikas Bahl', 'C.M. Munjal', 'Priyanka Kansal']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Vimla Devi']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.858152866363524
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh : Bench At Indore']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Vivek Rusia']"", ""LAWYER"": ""['A.S. Garg', 'Sapnesh Jain', 'Gulab Sharma']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Sabbir Khan']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Sher Mohmmad']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 S.A. No. 421/2001 High Court Of Madhya Pradesh : Bench At Indore (Single Bench : Hon. Mr. Justice Vivek Rusia) S.A. No.421 of 2001 Sabbir Khan (Deceased) through. ... Appellants. L.Rs. - Habib Khan & others. Defendants no.2 to 4. Vs. Sher Mohmmad & others. ...Respondents ~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~. Shri A.S. Garg, Sr. Advocate with Shri Sapnesh Jain, Advocate for appellants. Shri Gulab Sharma, Advocate for respondent No.1. ~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~. Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh : Bench At Indore']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Vivek Rusia']"", ""LAWYER"": ""['A.S. Garg', 'Sapnesh Jain', 'Gulab Sharma']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sabbir Khan', 'Habib Khan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Sher Mohmmad']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.507412433624268
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['S U P R E M E C O U R T O F I N D I A', 'High Court Of Judicature At Allahabad, Lucknow Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Uday Umesh Lalit', 'Aniruddha Bose']"", ""LAWYER"": ""['Pradeep Kant', 'Divyanshu Sahay', 'Rohit Kumar Singh', 'Shradha Narayan', 'Sanjay Goel']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rakesh Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Uttar Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Item No.16 Court No.7 Section Ii S U P R E M E C O U R T O F I N D I A Record Of Proceedings Special Leave Petition (Criminal) Diary No(s). 16399/2019 (Arising out of impugned final judgment and order dated 06-12-2018 in Crmwp No. 35460/2018 passed by the High Court Of Judicature At Allahabad, Lucknow Bench) Rakesh Kumar Petitioner(s) Versus The State Of Uttar Pradesh & Ors. Respondent(s) (For Admission and I.R. and Ia No.75301/2019-CONDONATION Of Delay In Filing and Ia No.75313/2019-EXEMPTION From Filing O.T. and Ia No.75311/2019-PERMISSION To File Additional Documents/Facts/Annexures ) Date : 23-09-2019 This petition was called on for hearing today. Coram : Hon'Ble Mr. Justice Uday Umesh Lalit Hon'Ble Mr. Justice Aniruddha Bose For Petitioner(s) Mr. Pradeep Kant, Sr. Adv. Mr. Divyanshu Sahay, Adv. Mr. Rohit Kumar Singh, Aor Ms. Shradha Narayan, Adv. Mr. Sanjay Goel, Adv. For Respondent(s) Upon hearing the counsel the Court made the following O R D E R [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Uday Umesh Lalit', 'Aniruddha Bose']"", ""LAWYER"": ""['Pradeep Kant', 'Divyanshu Sahay', 'Rohit Kumar Singh', 'Shradha Narayan', 'Sanjay Goel']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rakesh Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of Uttar Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.429612636566162
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Non­Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal NO(s). 8109 Of 2010 Goli Vijayalakshmi & Ors. ….Appellant(s) Versus Yendru Sathiraju(Dead) By Lrs. & Ors. ….Respondent(s) With Civil Appeal NO(s). 8110 Of 2010 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Goli Vijayalakshmi', 'Yendru Sathiraju']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.210655689239502
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature At Allahabad Afr Reserved Court No. - 39 Case :- Writ - C No. - 12759 of 2019 Petitioner :- Yantraleshwar Gupta Alias Dhreej Kumar And Another Respondent :- State Of U P And 10 Others Counsel for Petitioner :- Ajay Kumar Singh,Ashish Kumar Singh Counsel for Respondent :- C.S.C.,P.K. Upadhyay,Vineet Sankalp With Case :- Writ - C No. - 12768 of 2019 Petitioner :- Rajendra Maheshwari Respondent :- State Of U P And 10 Others Counsel for Petitioner :- Ajay Kumar Singh,Ashish Kumar Singh Counsel for Respondent :- C.S.C.,P.K. Upadhyay,Vineet Sankalp With Case :- Writ - C No. - 12817 of 2019 Petitioner :- Sohrab Ahmad Respondent :- State Of U.P. And 10 Others Counsel for Petitioner :- Ajay Kumar Singh,Ashish Kumar Singh Counsel for Respondent :- C.S.C.,P.K. Upadhyay,Vineet Sankalp With Case :- Writ - C No. - 12821 of 2019 Petitioner :- Durga Prasad Baranwal And Another Respondent :- State Of U.P. And 10 Others Counsel for Petitioner :- Ajay Kumar Singh,Ashish Kumar Singh Counsel for Respondent :- C.S.C.,P.K. Upadhyay,Vineet Sankalp With Case :- Writ - C No. - 12837 of 2019 Petitioner :- Ashish Agarwal And Another Respondent :- State Of U.P. And 10 Others Counsel for Petitioner :- Ajay Kumar Singh,Ashish Kumar Singh Counsel for Respondent :- C.S.C.,P.K. Upadhyay,Vineet Sankalp With Case :- Writ - C No. - 12876 of 2019 Petitioner :- Santosh Kumar Chaurasia And 3 Others Respondent :- State Of U.P. And 10 Others Counsel for Petitioner :- Ajay Kumar Singh,Ashish Kumar Singh Counsel for Respondent :- C.S.C.,P.K. Upadhyay,Vineet Sankalp With Case :- Writ - C No. - 12877 of 2019 Petitioner :- Ishwar Chandra Giri And Another Respondent :- State Of U P And 10 Others Counsel for Petitioner :- Ajay Kumar Singh,Ashish Kumar Singh Counsel for Respondent :- C.S.C.,P.K. Upadhyay,Vineet Sankalp Hon'ble B. Amit Sthalekar,J. Hon'ble Piyush Agrawal,J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['B. Amit Sthalekar', 'Piyush Agrawal']"", ""LAWYER"": ""['Ajay Kumar Singh', 'Ashish Kumar Singh', 'C.S.C.', 'P.K. Upadhyay', 'Vineet Sankalp']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Yantraleshwar Gupta', 'Rajendra Maheshwari', 'Sohrab Ahmad', 'Durga Prasad Baranwal', 'Ashish Agarwal', 'Santosh Kumar Chaurasia', 'Ishwar Chandra Giri']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of U P']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",16.513229846954346
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Commissioner Of Central Excise, Delhi-Iii']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Uni Products India Ltd.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reportable In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal Nos. 302-303 Of 2009 Commissioner Of Central Excise, Delhi-Iii ...Appellant Versus M/S. Uni Products India Ltd. ...Respondent Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Commissioner Of Central Excise, Delhi-Iii']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['M/S. Uni Products India Ltd.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.743123054504396
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature For Rajasthan Bench At Jaipur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""['Ajeet Bhandari', 'Jitendra Mishra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Sudhir Heeralal Dhadda', 'Sunil Heeralal Dhadda']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Assistant Commissioner-I, Devasthan Department, Rajasthan, Jaipur', 'Commissioner, Devasthan Department, Rajasthan, Udaipur', 'Balraj Munot', 'Manju Surana', 'Commissioner, Devasthan Department, Rajasthan, Udaipur.', 'Ajay Jain']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature For Rajasthan Bench At Jaipur (1) S.B. Civil Writs No. 1416/2018 1. Sudhir Heeralal Dhadda Son Of Shri Heeralal Dhadda, Aged About 62 Years 2. Sunil Heeralal Dhadda Son Of Shri Heeralal Dhadda, Aged About 61 Years, Both By Caste Oswal Jain, Resident Of House No. 730, Dhadda House, Gopal Ji Ka Rasta, Chaura Rasta, Jaipur (Rajasthan) ----Petitioners Versus 1. The Assistant Commissioner-I, Devasthan Department, Rajasthan, Jaipur. 2. The Commissioner, Devasthan Department, Rajasthan, Udaipur. 3. Shri Balraj Munot Son Of Shri Manak Raj Munot, Resident Of Raj Vihar Mall, 6/4, Tonk Road, Airport, Sanganer, Jaipur. 4. Smt. Manju Surana Daughter Of Late Shri Manak Raj Munot, Resident Of D-182, Gajraj Marg, Bapu Nagar, Jaipur. ----Respondents (2) S.B. Civil Writs No. 3512/2018 1. Sudhir Heeralal Dhadda Son Of Shri Heeralal Dhadda, Aged About 62 Years 2. Sunil Heeralal Dhadda Son Of Shri Heeralal Dhadda, Aged About 61 Years, Both By Caste Oswal Jain, Resident Of House No. 730, Dhadda House, Gopal Ji Ka Rasta, Chaura Rasta, Jaipur (Rajasthan) ----Petitioners Versus 1. The Assistant Commissioner-I, Devasthan Department, Rajasthan, Jaipur. 2. The Commissioner, Devasthan Department, Rajasthan, Udaipur. 3. Ajay Jain Son Of Late Shri Manak Raj Munot, R/o Raj Vihar Mile, 6/4, Tonk Road, Airport, Sanganer, Jaipur (2 of 20) [Cw-1416/2018] (Raj.) ----Respondents For Petitioner(s) : Mr. Ajeet Bhandari, Adv. with Mr. Jitendra Mishra, Adv. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature For Rajasthan Bench At Jaipur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""['Ajeet Bhandari', 'Jitendra Mishra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sudhir Heeralal Dhadda', 'Sunil Heeralal Dhadda', 'Manju Surana', 'Balraj Munot', 'Manak Raj Munot']"", ""PETITIONER"": ""['Sudhir Heeralal Dhadda', 'Sunil Heeralal Dhadda']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Assistant Commissioner-I, Devasthan Department, Rajasthan, Jaipur', 'Commissioner, Devasthan Department, Rajasthan, Udaipur', 'Ajay Jain']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",16.33819818496704
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Alka Sarin']"", ""LAWYER"": ""['Vijay Kumar Jindal', 'Samar Ahluwalia', 'JanyaSirohi', 'Vikas Bahl', 'Nikhil Sabharwal']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Sunil Dutt Bansal']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Jai Bhagwan&Ors']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: C.R No. 6893 of 2018 -1- In The High Court Of Punjab And Haryana At Chandigarh Date of Decision: 05.02.2020. 1. Cr. No.6893 of 2018 Sunil Dutt Bansal &Ors ...Petitioners Vs. Jai Bhagwan&Ors. ...Respondents 2. Cr. No.7404 of 2018 Sunil Dutt Bansal ...Petitioner Vs. Jai Bhagwan&Ors. ...Respondents Coram: Hon'Ble Mrs. Justice Alka Sarin Present: Mr. Vijay Kumar Jindal, Senior Advocate, with Mr. Samar Ahluwalia, Advocate, and Ms. JanyaSirohi, Advocate, for the petitioners Mr. Vikas Bahl, Senior Advocate, with Mr. Nikhil Sabharwal, Advocate, for the respondents Alka Sarin, J. [/INST]
 {""CASE_NUMBER"": ""['C.R. No. 6893 of 2018', 'Cr. No.7404 of 2018']"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""['05.02.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""['Alka Sarin']"", ""LAWYER"": ""['Vijay Kumar Jindal', 'Samar Ahluwalia', 'JanyaSirohi', 'Vikas Bahl', 'Nikhil Sabharwal']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Sunil Dutt Bansal']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Jai Bhagwan']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.769288539886476
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Madras']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'M.Venugopal']"", ""LAWYER"": ""['A.Thiyagarajan', 'L.Chandrakumar', 'N.G.R.Prasad']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['V.Sridevi']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['C.S.Mani']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 In The High Court Of Judicature At Madras Dated: 29.04.2019 Coram: The Honourable Mr.Justice S.Manikumar And The Honourable Mr. Justice M.Venugopal C.M.A.No.2249 of 2015 M.P.No.1 of 2015 Dr.V.Sridevi .. Appellant vs. Dr.C.S.Mani .. Respondent Prayer: The Civil Miscellaneous Appeal is filed under Section 19 of the Family Courts Act, against the order passed by the IIIrd Additional Family Court at Chennai in I.A.No.3648 of 2011 in O.P.No.3499 of 2009, dated 20.07.2015. For Appellant : Mr.A.Thiyagarajan, Senior Counsel for Mr.L.Chandrakumar For Respondent : Mr.N.G.R.Prasad for M/s.Row & Reddy http://www.judis.nic.in 2 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Madras']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S.Manikumar', 'M.Venugopal']"", ""LAWYER"": ""['A.Thiyagarajan', 'L.Chandrakumar', 'N.G.R.Prasad']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['V.Sridevi']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 19']"", ""RESPONDENT"": ""['C.S.Mani']"", ""STATUTE"": ""['Family Courts Act']"", ""WITNESS"": ""[]""}",12.43292236328125
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Hyderabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['B. Siva Sankara Rao']"", ""LAWYER"": ""['P. Gangarami Reddy', 'Md.Saleem', 'M. Ravindra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['A. Murali']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Andhra Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Honble Dr. Justice B. Siva Sankara Rao Writ Petition Nos.5978 of 2017 22.03.2018 Sri A. Murali and another .Petitioners The State of Andhra Pradesh, rep. by its Principal Secretary, Municipal Administration Department, Secretariat, Velagapudi Counsel for Petitioner: Sri P. Gangarami Reddy Counsel for Respondents:Learned Government Pleader for Municipal Administration for respondent No.1. Sri Md.Saleem, learned Standing Counsel for respondent No.2 Sri M. Ravindra, learned counsel for <Gist: >Head Note: ? Citations: 1. (1978) 1 Ap Lj 459 2. Air 1956 Sc 110 3. 1990(2) Alt 202 (D.B.) 4. 1976 Air (Sc) 1785 5. 2007 (5) Alt 676 6. Air 1995 Ap 17 7. 1991 Air 1453 8. 2006 Air Scw 5192 9. (2004) 8 Scc 733 10. (1999) 6 Scc 464 11. (2000) 7 Scc 425 12. 2016 (4) Alt 426 13. 2009 (15) Scc 705 14. (2013) 5 Scc 336 15. (2006) 7 Scc 597 In The High Court Of Judicature At Hyderabad For The State Of Telangana And The State Of Andhra Pradesh + Writ Petition Nos.5978 and 9673 of 2017 Sri A. Murali and another .Petitioners Versus The State of Andhra Pradesh, rep. by its Principal Secretary, Municipal Administration Department, Secretariat, Velagapudi, Amaravathi, Guntur District and three others. Respondents Date Of Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Hyderabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['B. Siva Sankara Rao']"", ""LAWYER"": ""['A. Murali', 'P. Gangarami Reddy', 'Md.Saleem', 'M. Ravindra', 'M. Ravindra']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['A. Murali']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Andhra Pradesh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.990518808364868
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['S U P R E M E C O U R T O F I N D I A']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['D.Y. Chandrachud', 'M.R. Shah']"", ""LAWYER"": ""['Balbir Singh', 'A.K. Panda', 'Rupesh Kumar', 'B. Krishna Prasad']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Commissioner Of Central Excise And St Daman']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Firmenich Aromatic India Private Limited']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Item No.3 Court 6 (Video Conferencing) Section Xvii-A S U P R E M E C O U R T O F I N D I A Record Of Proceedings Civil Appeal Diary No(s).13886/2020 (Arising out of impugned final judgment and order dated 30-10-2019 in Ea No. 11106/2017 passed by the Custom Excise Service Tax Appellate Tribunal, West Zonal Bench At Ahmedabad) Commissioner Of Central Excise And St Daman Appellant(s) Versus Firmenich Aromatic India Private Limited Respondent(s) (With Ia No.81178/2020-CONDONATION Of Delay In Filing and Ia No.81179/2020-EX-PARTE Stay) Date : 12-02-2021 This appeal was called on for hearing today. Coram : Hon'Ble Dr. Justice D.Y. Chandrachud Hon'Ble Mr. Justice M.R. Shah For Petitioner(s) Mr. Balbir Singh, Asg Mr. A.K. Panda, Sr. Adv. Mr. Rupesh Kumar, Adv. Mr. B. Krishna Prasad, Aor Upon hearing the counsel the Court made the following O R D E R [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Custom Excise And St Daman Appellate Tribunal, West Zonal Bench At Ahmedabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['D.Y. Chandrachud', 'M.R. Shah']"", ""LAWYER"": ""['Balbir Singh', 'A.K. Panda', 'Rupesh Kumar', 'B. Krishna Prasad']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Firmenich Aromatic India Private Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.727400302886965
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['K.Somashekar']"", ""LAWYER"": ""['Abhinav .R', 'V.R. Sarathy']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['T. Karthik Raja']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['V.M. Prabhakar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: :1: In The High Court Of Karnataka At Bengaluru Dated This The 8Th Day Of January, 2021 Before The Hon'Ble Mr.Justice K.Somashekar Criminal Petition No. 580 Of 2017 Between Sri T. Karthik Raja Aged about 38 years S/o Thyagaraj A.K. International No.66, 2nd Right Cross Puttappa Colony New Thippasandra Bengaluru - 560 075. ... Petitioner (By Sri. Abhinav .R, Advocate) And Sri V.M. Prabhakar Aged about 48 years S/o Late V.K. Madhavan M/s. Maruthi Ginger Traders Main Road, Kudige Kushalnagar Hobli Somwarpet Taluk Kodagu District - 571 234. ... Respondent (By Sri V.R. Sarathy, Advocate) This Criminal Petition is filed under Section 482 of the Code of Criminal Procedure, praying to quash the proceedings in Pcr No.117/2016 (C.C.No.433/2016) on the file of Civil Judge and Jmfc, Kushalnagar at Annexure-A as well as the complaint filed by the :2: Respondent in Pcr No.117/2016 dated 09.06.2016 before the Civil Judge and Jmfc, Kushalnagar at Bangalore vide Annexure-B. This Criminal Petition coming on for Admission, this day, the court made the following: Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Karnataka At Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['K.Somashekar']"", ""LAWYER"": ""['Abhinav .R', 'V.M. Prabhakar', 'V.R. Sarathy']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['T. Karthik Raja']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 482']"", ""RESPONDENT"": ""['V.M. Prabhakar']"", ""STATUTE"": ""['Code of Criminal Procedure']"", ""WITNESS"": ""[]""}",12.484361410140991
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 Before The Madurai Bench Of Madras High Court Dated : 27.04.2019 Coram: The Honourable Ms.Justice V.M.Velumani C.M.A(MD)No.864 of 2014 Judgment reserved on Judgment pronounced on 01.11.2018 27.04.2019 Brinks Arya India Private Ltd., Having Office at 3/85-C, Arun Nagar Vadavalli, Coimbatore District, Tramilnadu ... Appellant Vs. 1.G.Bama 2.G.Thulasi 3.Minor G.Lenin (rep. By his mother and next friend 1st respondent) 4.Rengappa Reddi 5.Rukkumani 6.National Insurance Co. Ltd., Through its Divisional Manager, Having office at North Veli Street, Madurai 625 001. ... Respondents Prayer: Civil Miscellaneous Appeal filed under Section 173 of the Motor Vehicles Act, 1988 against the award dated 02.11.2009 made in M.C.O.P.No.830 of 2005 on the file of the Principal District Court, (Motor Accident Claims Tribunal), Madurai. http://www.judis.nic.in 2 For Appellant : Mr.D.Sivaraman For R1 to R5 : Mr.K.Murugesan For R6 : Mr.J.S.Murali Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Madurai Bench Of Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['V.M.Velumani']"", ""LAWYER"": ""['D.Sivaraman', 'K.Murugesan', 'J.S.Murali']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Brinks Arya India Private Ltd.']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 173']"", ""RESPONDENT"": ""['G.Bama', 'G.Thulasi', 'G.Lenin', 'Rengappa Reddi', 'Rukkumani', 'National Insurance Co. Ltd.']"", ""STATUTE"": ""['Motor Vehicles Act, 1988']"", ""WITNESS"": ""[]""}",14.542760133743286
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. Ravindra Bhat', 'Sanjeev Sachdeva']"", ""LAWYER"": ""['Sudhir Chandra', 'Sanjay Kumar', 'Arpita Sawhney', 'Arun Kumar Jana', 'Ripu Daman Bhardwaj', 'T.P. Singh', 'Shashwat Jain', 'Rajeshwari', 'Saya Choudhary Kapur', 'Vivek Ranjan', 'Devanshu Khanna', 'Guru Krishna Kumar', 'Pravin Anand', 'Nishchal Anand', 'Sanchith Shivakumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bayer Corporation', 'Bayer Intellectual Property Gmbh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India', 'Alembic Pharmaceuticals Ltd.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: * In The High Court Of Delhi At New Delhi Reserved on: 12.10.2018 Pronounced on: 22.04.2019 + Lpa No.359/2017, Cm Nos.17922/2017, 20160/2017, 33383- 84/2017, 47167/2017 & 660/2018 Bayer Corporation ..... Appellant Through: Mr. Sudhir Chandra, Sr. Adv. with Mr. Sanjay Kumar, Ms. Arpita Sawhney and Mr. Arun Kumar Jana, Advs. versus Union Of India & Ors ..... Respondents Through: Mr. Ripu Daman Bhardwaj, Cgsc with Mr. T.P. Singh and Mr. Shashwat Jain, Advs. for R-1 & 6. Ms. Rajeshwari, Adv. for R-2 & 5. Ms. Saya Choudhary Kapur, Mr. Vivek Ranjan and Mr. Devanshu Khanna, Advocates for Interveners. + Rfa(Os)(Comm) 6/2017, Cm Nos.17508/2017 & 32128- 29/2017 Bayer Intellectual Property Gmbh & Anr ..... Appellants Through: Mr. Guru Krishna Kumar, Sr. Advocate with Mr. Pravin Anand, Mr. Nishchal Anand and Mr. Sanchith Shivakumar, Advs. versus Alembic Pharmaceuticals Ltd. ..... Respondent Through: Ms. Saya Choudhary Kapur, Mr. Vivek Ranjan and Mr. Devanshu Khanna, Advs. Fao (Os) (Comm) 169/2017 Page 1 of 90 Coram: Hon'Ble Mr. Justice S. Ravindra Bhat Hon'Ble Mr. Justice Sanjeev Sachdeva Mr. Justice S. Ravindra Bhat % [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['S. Ravindra Bhat', 'Sanjeev Sachdeva', 'S. Ravindra Bhat']"", ""LAWYER"": ""['Sudhir Chandra', 'Sanjay Kumar', 'Arpita Sawhney', 'Arun Kumar Jana', 'Ripu Daman Bhardwaj', 'T.P. Singh', 'Shashwat Jain', 'Rajeshwari', 'Saya Choudhary Kapur', 'Vivek Ranjan', 'Devanshu Khanna', 'Guru Krishna Kumar', 'Pravin Anand', 'Nishchal Anand', 'Sanchith Shivakumar', 'Saya Choudhary Kapur', 'Vivek Ranjan', 'Devanshu Khanna', 'Saya Choudhary Kapur', 'Vivek Ranjan', 'Devanshu Khanna', 'Saya Choudhary Kapur', 'Vivek Ranjan', 'Devanshu Khanna']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bayer Corporation']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union Of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",22.133793354034424
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Alexander Thomas']"", ""LAWYER"": ""['P. Radhakrishnan', 'Madhu Radhakrishnan', 'M.D. Joseph', 'Nelson Joseph', 'A.C.Vidhya']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['C.P.Ashok Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Sub Registrar Thrithala, Office Of The Sub Registrar, Thrithala 679534, Palakkad District', 'Inspector General Of Registration Department Of Registration, Vanchiyoor, Thiruvananthpauram-695035']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Kerala At Ernakulam (Cr) Present The Honourable Mr. Justice Alexander Thomas Monday ,The 01St Day Of October 2018 / 9Th Aswina, 1940 WP(C).No. 31900 of 2018 Petitioner/S: C.P.Ashok Kumar Aged 61 Years, S/O.A.P.Achuthan Nair, Kannath Valappil House (Anand Nivas), Arangottukara Po, Pin 679532, Thrissur District, Near Thirumittacode By Advs. P. Radhakrishnan Sri.Madhu Radhakrishnan M.D. Joseph Sri.Nelson Joseph Respondent/S: 1 Sub Registrar Thrithala, Office Of The Sub Registrar, Thrithala 679534, Palakkad District. 2 Inspector General Of Registration Department Of Registration, Vanchiyoor, Thiruvananthpauram-695035. Other Present: Smt.A.C.Vidhya, Govt.Pleader This Writ Petition (Civil) Having Come Up For Admission On 01.10.2018, The Court On The Same Day Delivered The Following: W.P.(C)No.31900/2018 2 (Cr) Alexander Thomas, J. ------------------------------------------- W.P.(C)No.31900 of 2018 ---------------------------------------------- Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Alexander Thomas']"", ""LAWYER"": ""['P. Radhakrishnan', 'Madhu Radhakrishnan', 'M.D. Joseph', 'Nelson Joseph']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['C.P.Ashok Kumar', 'Sub Registrar Thrithala', 'Inspector General Of Registration Department Of Registration, Vanchiyoor, Thiruvananthpauram-695035']"", ""PETITIONER"": ""['C.P.Ashok Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Sub Registrar Thrithala', 'Inspector General Of Registration Department Of Registration, Vanchiyoor, Thiruvananthpauram-695035']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",16.762073516845703
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh : Bench At Indore']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Vivek Rusia', 'Amar Nath (Kesharwani)']"", ""LAWYER"": ""['Aviral Vikas Khare', 'Aditya Garg', 'Rajeev Kumar Jain', 'K.L. Hardia']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Chief Executive Officer, Dewas Development Authority, District Dewas']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Umar Ali', 'Afsar Ali', 'Bismillah Bi', 'State of M.P.', 'Commissioner (Revenue) Ujjain Division', 'Rehmat Ali', 'Kalu', 'Mumtaj Bi', 'Ramjan', 'Kubran Ali', 'Jaajid Ali']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: -: 1 :- R.P. Nos. 1399/2017 & 1401/2017 High Court Of Madhya Pradesh : Bench At Indore [Division Bench: Hon'Ble Mr. Justice Vivek Rusia And Hon'Ble Mr. Justice Amar Nath (Kesharwani)] R.P. No. 1399 of 2017 Chief Executive Officer, Dewas Development Authority, District Dewas. ---Petitioner. Versus 1. Umar Ali S/o. Wazib Ali, Aged 52 years, Occ. Agriculture. 2. Afsar Ali S/o. Wazib Ali, Aged 45 years, Occ. Agriculture. 3. Bismillah Bi W/o. Wazib Ali, Aged 52 years, Occ. None. All R/o. Sulpur Tehsil, District Dewas. 4. State of M.P. Through Collector, Dewas/ Land Acquisition Officer, Collectorate Office, Dewas. 5. Commissioner (Revenue) Ujjain Division,. Commissioner Office, Ujjain. ---Respondents. R.P. No. 1401 of 2017 Chief Executive Officer, Dewas Development Authority, District Dewas. ---Petitioner. Versus 1. Rehmat Ali S/o. Nazir Ali, Aged 70 years, Occ. Agriculture. 2. Decd. Kalu S/o. Nazir Ali through L.R's - a) Mumtaj Bi W/o. Late Kalu, Aged Adult, Occ. Housewife b) Ramjan S/o. Late Kalu, Aged Adult, Occ. Agriculture. c) Kubran Ali S/o. Kalu, Aged Adult, Occ. Agriculture. d) Jaajid Ali S/o. Kalu, Aged Adult, Occ. Agriculture All R/o.Gram Rasulpur Tehsil, District Dewas. 3. State of M.P. Through Collector, Dewas/ Land Acquisition Officer, Collectorate Office, Dewas. 4. Commissioner (Revenue) Ujjain Division,. Commissioner Office, Ujjain. ---Respondents. .-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. Shri Aviral Vikas Khare, learned counsel for the Review Petitioner. Shri Aditya Garg, learned Govt. Advocate for respondents/State. Shri Rajeev Kumar Jain, Advocate on behalf of Shri K.L. Hardia, learned counsel for respondents No.1 to 3 in R.P. No. 1399/2017 and respondents No.1 & 2 in R.P. No.1401/2017. .-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-. -: 2 :- R.P. Nos. 1399/2017 & 1401/2017 Order [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Madhya Pradesh : Bench At Indore']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Vivek Rusia', 'Amar Nath (Kesharwani)']"", ""LAWYER"": ""['Aviral Vikas Khare', 'Aditya Garg', 'Rajeev Kumar Jain', 'K.L. Hardia', 'Rajiv Kumar Jain']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['R.P. No. 1399 of 2017', 'R.P. No. 1401 of 2017']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Umar Ali', 'Afsar Ali', 'Bismillah Bi', 'Rehmat Ali', 'State of M.P.', 'Commissioner (Revenue) Ujjain Division.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",17.204398155212402
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""['S.N. Parashar', 'Pankaj Gupta', 'Suman Bagga']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Babli Dixit']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Satendra Kumar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: $~ * In The High Court Of Delhi At New Delhi % Date of Decision: 14th December, 2018 + Mac.App. 163/2018 Babli Dixit & Anr ..... Appellants Through: Mr. S.N. Parashar, Advocate versus Satendra Kumar & Ors (Iffco Tokio Gen Ins Co Ltd ) ..... Respondents Through: Mr. Pankaj Gupta, Advocate for Ms. Suman Bagga, Advocate for R3. Judgement [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Delhi At New Delhi']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""['S.N. Parashar', 'Pankaj Gupta', 'Suman Bagga']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Babli Dixit']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Satendra Kumar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.018539190292358
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court At Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Samapti Chatterjee']"", ""LAWYER"": ""['Sarvapriyo Mukherjee', 'Sananda Ganguly', 'Avratosh Majumder', 'Prithu Dudheria']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Kalpana Poddar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of West Bengal']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court At Calcutta Constitutional Writ Jurisdiction Original Side Present: The Hon'ble Justice Samapti Chatterjee Wp 134 of 2016 Smt. Kalpana Poddar & Ors. Vs State of West Bengal & Ors. For the Petitioners : Mr. Sarvapriyo Mukherjee, Advocate Ms. Sananda Ganguly, Advocate For the Respondent Bank : Mr. Avratosh Majumder, Advocate Mr. Prithu Dudheria, Advocate Heard on : 20.07.2018, 03.08.2018, 27.08.2018, 10.09.2018, 14.09.2018, 28.09.2018, 05.10.2018, 16.11.2018, 25.01.2018, 04.02.2019, 15.02.2019, 22.02.2019, 04.03.2019, 11.04.2019 & 17.04.2019. Judgment on : July 12, 2019. Samapti Chatterjee, J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court At Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Samapti Chatterjee']"", ""LAWYER"": ""['Sarvapriyo Mukherjee', 'Sananda Ganguly', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu Dudheria', 'Avratosh Majumder', 'Prithu D",30.839990854263306
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Patiala Central Cooperative Bank Ltd Patiala']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Jaswinder Singh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 In The Supreme Court Of India Civil Appellate Jurisdiction Civil Appeal No 366 of 2022 (Arising out of Slp(C) No 8208 of 2020) The Patiala Central Cooperative Bank Ltd Patiala & Ors .... Appellant(s) Versus Jaswinder Singh ....Respondent(s) Order [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No 366 of 2022', 'Slp(C) No 8208 of 2020']"", ""COURT"": ""['Supreme Court Of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Patiala Central Cooperative Bank Ltd']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Jaswinder Singh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.649131536483765
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Bombay']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A.S.Oka', 'A.K.Menon']"", ""LAWYER"": ""['Aspi Chinoy', 'Datta Mane', 'G.S.Hegde', 'Shyamali Gadre', 'Sandeep Marne', 'A.Y.Sakhare', 'A. B. Vagyani', 'Shruti Vyas', 'Rohan Mirpury', 'Sanjay Singhavi', 'Rahul Kamerkar', 'Abhijeet J. Kandarkar', 'Sandeep V. Marne', 'A.B.Vagyani', 'Manish Pabale', 'A.B. Vagyani', 'A.V.Anturkar', 'Prathamesh B. Bhargude', 'Ranjit Shinde', 'Ajinkya Udane', 'Jalan Sandeep', 'Geeta Shastri', 'Amit Shastri']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rajiv Mohan Mishra', 'Bhausaheb Baban Khedkar', 'Krishna Jotiba Naik', 'Mayura Maru', 'Vivek Velankar', 'Janhit Manch']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['City and Industrial Development Corporation of Maharashtra Ltd.', 'Maharashtra Industrial Development Corporation', 'State of Maharashtra']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1 ssp pil80groupwithospil82 .doc In The High Court Of Judicature At Bombay Civil Appellate Jurisdiction Public Interest Litigation No.80 Of 2013 Along With Civil Application No.54 Of 2016, Civil Application No.86 Of 2016, Civil Application No.114 Of 2015, Civil Application No.134 Of 2015, Civil Application No.33 Of 2017, Civil Application No.50 Of 2017 Rajiv Mohan Mishra ...Petitioner vs. City and Industrial Development Corporation of Maharashtra Ltd. And others ...Respondents. Pil/80/2013 Mr.Aspi Chinoy, Senior Advocate i/b Mr.Datta Mane for the Petitioner Mr.G.S.Hegde i/b G.S.Hegde & Associates for the respondent No.1 Ms Shyamali Gadre i/b Little & Co for the respondent No.2 Mr.Sandeep Marne for the respondent No.3 Mr.Mr.A.Y.Sakhare, Senior Advocate a/w Mr. A. B. Vagyani, Gp with Ms Shruti Vyas, Agp `B' Panel and Mr.Rohan Mirpury for the Respondent Nos.4,5 and 9 Mr.Sanjay Singhavi, Senior Advocate i/b Mr.Rahul Kamerkar for applicant in Cai/33/2017 and Cai/50/2017 Mr.Abhijeet J. Kandarkar for the applicant in Cai/54/2016 Along With Writ Petition No.4927 Of 2017 Bhausaheb Baban Khedkar & Ors. ...Petitioners vs. Maharashtra Industrial Development Corporation and others ...Respondents ::: Uploaded on - 03/11/2018 ::: Downloaded on - 04/11/2018 01:30:43 ::: 2 Along With Writ Petition No.7167 Of 2017 Krishna Jotiba Naik ...Petitioner vs. Maharashtra Industrial Development Corporation and others ...Respondents Wp/4927/2018 With Wp/7167/2017 Mr.Sanjay Singhavi, Senior Advocate i/b Mr.Rahul Kamerkar for the petitioner Ms Shyamali Gadre I/b Little & Co. for the respondent No.1 Mr.Sandeep V. Marne for the respondent No.2 Mr.A.Y.Sakhare, Senior Advocate a/w Mr.A.B.Vagyani, Gp a/w Mr.Manish Pabale, Agp a/w Ms Shruti Vyas, Agp `B' Panel and Mr.Rohan Mirpury for the respondent No.3 With Public Interest Litigation No.138 Of 2012 Mayura Maru ...Petitioner Vs. The State of Maharashtra ...Respondent Pil/138/2012 Mr.Mr.A.Y.Sakhare, Senior Advocate a/w Mr.A.B. Vagyani, Gp with Mr.Manish Pabale, Agp with Ms Shruti Vyas, Agp `B' Panel and Mr.Rohan Mirpury for the respondent No.1 Mr.G.S.Hegde I/b G.S.Hegde & Associates for the respondent No.2 Mr.Sandeep Marne for the respondent No.3 Along With Public Interest Litigation No.29 Of 2018 Vivek Velankar ...Petitioner vs. State of Maharashtra & Others ...Respondents ::: Uploaded on - 03/11/2018 ::: Downloaded on - 04/11/2018 01:30:43 ::: 3 Mr.A.V.Anturkar, Senior Advocate i/b Mr.Prathamesh B. Bhargude and Mr.Ranjit Shinde and Mr.Ajinkya Udane for the petitioner. Mr.A.Y.Sakhare, Senior Advocate a/w Mr.A.B.Vagyani, Gp with Mr.Manish Pabale, Agp a/w Ms Shruti Vyas, Agp `B' Panel and Mr.Rohan Mirpury for the respondent Nos.1 and 2. Ordinary Original Civil Jurisdiction Public Interest Litigation No.82 Of 2017 Janhit Manch ...Petitioner vs. The State of Maharashtra ...Respondent Mr.Jalan Sandeep for the petitioner Mr.A.Y.Sakhare, Senior Counsel a/w Ms Geeta Shastri, Addl.G.P. and Mr.Amit Shastri, for the respondent State. Coram : A.S.Oka And A.K.Menon, Jj. Date On Which Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Bombay']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A.S.Oka', 'A.K.Menon']"", ""LAWYER"": ""['Aspi Chinoy', 'Datta Mane', 'G.S.Hegde', 'Shyamali Gadre', 'Sandeep Marne', 'Abhijeet J. Kandarkar', 'Sanjay Singhavi', 'Rahul Kamerkar', 'Abhijeet J. Kandarkar', 'Sanjay Singhavi', 'Rahul Kamerkar', 'A.Y.Sakhare', 'A.B.Vagyani', 'G.P.', 'Manish Pabale', 'Shruti Vyas', 'Rohan Mirpury', 'A.Y.Sakhare', 'A.B.Vagyani', 'G.P.', 'Manish Pabale', 'Shruti Vyas', 'Rohan Mirpury', 'A.Y.Sakhare', 'A.B.Vagyani', 'G.P.', 'Manish Pabale', 'Shruti Vyas', 'Rohan Mirpury', 'A.Y.Sakhare', 'A.B.Vagyani', 'G.P.', 'Manish Pabale', 'Shruti Vyas', 'Rohan Mirpury', 'A.Y.Sakhare', 'A.B.Vagyani', 'G.P.', 'Manish Pabale', 'Shruti Vyas', 'Rohan Mirpury', 'A.Y.Sakhare', 'A.B.Vagyani', 'G.P.', 'Manish Pabale', 'Shruti Vyas', 'Rohan Mirpury', 'A.Y.Sakhare', 'A.B.Vagyani', 'G.P.', 'Manish Pabale', 'Shruti Vyas', 'Rohan Mirpury', 'A.Y.Sakhare', 'A.B.V",32.46152663230896
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Rajiv Sharma', 'Kuldip Singh']"", ""LAWYER"": ""['A.P.S. Deol', 'Vishal R. Lamba', 'Himmat Singh Deol', 'J.S. Bedi', 'Harsimranjeet Kaur', 'Shivansh Mahi', 'Shubhra Singh', 'J.S. Hooda']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Shyam Singh', 'Pardeep Soni @ Mintu']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Haryana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Cra-D-568-Db of 2011 1 In The High Court Of Punjab And Haryana At Chandigarh (1) Cra-D-568-Db of 2011 Shyam Singh and another .... Appellants Versus State of Haryana ..... Respondent (2) Cra-D-592-Db of 2011 Pardeep Soni @ Mintu and another .... Appellants Versus State of Haryana ..... Respondent Reserved on : 08.02.2019 Date of decision : 26.02.2019 Coram :- Hon'Ble Mr. Justice Rajiv Sharma Hon'Ble Mr. Justice Kuldip Singh Present: Mr. A.P.S. Deol, Senior Advocate, with Mr. Vishal R. Lamba and Mr. Himmat Singh Deol, Advocates, for the appellants (in Cra-D-568-Db of 2011). Mr. J.S. Bedi, Senior Advocate, with Mr. Harsimranjeet Kaur and Mr. Shivansh Mahi, Advocates, for the appellants (in Cra-D-592-Db of 2011) Ms. Shubhra Singh, Addl. A.G., Haryana. Mr. J.S. Hooda, Advocate, for the complainant. *** 1 of 39 ::: Downloaded on - 18-03-2019 07:41:28 ::: Cra-D-568-Db of 2011 2 Rajiv Sharma, J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Punjab And Haryana At Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Rajiv Sharma', 'Kuldip Singh']"", ""LAWYER"": ""['A.P.S. Deol', 'Vishal R. Lamba', 'Himmat Singh Deol', 'J.S. Bedi', 'Harsimranjeet Kaur', 'Shivansh Mahi', 'Shubhra Singh', 'J.S. Hooda']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Shyam Singh']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State of Haryana']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.267779350280762
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Bombay']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A.K. Menon']"", ""LAWYER"": ""['Shyam Mehta', 'Bimal Rajshekhar', 'Birendra Saraf', 'Ranjit Carvalho', 'Sanaya Dadachanji', 'Rohit Lalwani', 'Manilal Kher Ambalal', 'Zal Andhyarujina', 'Kartikeya Desai', 'Karan Bhide', 'Asadali Mazgaonwala', 'Aspi Chinoy', 'Karl Tamboly', 'Jehangir Jejeebhoy', 'Vivek Vashi', 'Kanika Sharma Goenka', 'Shaheda Madrasawala', 'Swati Khinvasara', 'Cyrus Jal', 'S. U. Kamdar', 'Sarosh Bharucha', 'Shaheda Madraswala', 'Janak Dwarkadas']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Yogesh Mehra', 'Ajay Mehra', 'Wind World (India) Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Enercon GmbH', 'Wobben Properties Gmbh', 'Wind World India Limited', 'Ajay Mehra', 'Yogesh Mehra', 'Wobben Properties']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Carbp-196 of 2016.odt rrpillai In The High Court Of Judicature At Bombay Ordinary Original Civil Jurisdiction Commercial Arbitration Petition No. 196 Of 2016 With Notice Of Motion No. 708 Of 2018 Yogesh Mehra ... Petitioner vs. 1. Enercon GmbH ... Respondents 2. Wobben Properties Gmbh 3. Wind World India Limited 4. Ajay Mehra With Commercial Arbitration Petition No. 205 Of 2016 With Notice Of Motion No. 726 Of 2018 Ajay Mehra ... Petitioner vs. 1. Enercon GmbH . ... Respondents 2. Wobben Properties Gmbh 3. Wind World India Limited 4. Yogesh Mehra With Commercial Arbitration Petition No. 16 Of 2017 With Notice Of Motion (L) No.1655 Of 2018 Wind World (India) Limited ... Petitioner vs. 1. Enercon GmbH ... Respondents 2. Wobben Properties gmbH 3. Mr. Yogesh Mehra 4. Mr. Ajay Mehra 1 of 58 ::: Uploaded on - 19/12/2018 ::: Downloaded on - 27/12/2018 07:22:37 ::: Carbp-196 of 2016.odt Mr. Shyam Mehta, Senior Advocate i/b. Mr. Bimal Rajshekhar for the Petitioner in Carbp/205/2016. Dr. Birendra Saraf a/w. Mr. Ranjit Carvalho, Ms. Sanaya Dadachanji, Mr. Rohit Lalwani i/b. Manilal Kher Ambalal & Co. for the Petitioner in Carbp/196/2016 and Respondent no. 4 in Carbp/205/2016 and Respondent no. 3 in Carbp/16/2017. Mr. Zal Andhyarujina a/w. Mr. Kartikeya Desai, Mr. Karan Bhide and Mr. Asadali Mazgaonwala i/b. M/s. Kartikeya & Associate for Petitioner in Carbp/16/2017. Mr. Aspi Chinoy, Senior Advocate a/w. Mr. Karl Tamboly, Mr. Jehangir Jejeebhoy, Mr. Vivek Vashi, Mrs. Kanika Sharma Goenka, Ms. Shaheda Madrasawala,Ms. Swati Khinvasara and Mr. Cyrus Jal i/b. Vashi and Vashi for Respondent no. 1 and 2 in Carbp/196/2016. Mr. S. U. Kamdar, Senior Advocate a/w. Mr. Sarosh Bharucha, Mr. Jehangir Jejeebhoy, Mr. Vivek Vashi, Mrs. Kanika Sharma Goenka, Ms. Shaheda Madraswala,Ms. Swati Khinvasara and Mr. Cyrus Jal i/b. Vashi and Vashi for Respondent no. 1 and 2 in Carbp/205/2016. Mr. Janak Dwarkadas. Senior Advocate a/w. Mr. Jehangir Jejeebhoy, Mr. Vivek Vashi, Mrs. Kanika Sharma Goenka, Ms. Shaheda Madraswala,Ms. Swati Khinvasara and Mr. Cyrus Jal i/b. Vashi and Vashi for Respondent no. 1 and 2 in Carbp/16/2016. Coram : A.K. Menon, J. Reserved Date : 14 th August, 2018 Prounounced On : 14 th December, 2018 Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Bombay']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A.K. Menon']"", ""LAWYER"": ""['Shyam Mehta', 'Bimal Rajshekhar', 'Birendra Saraf', 'Ranjit Carvalho', 'Sanaya Dadachanji', 'Rohit Lalwani', 'Manilal Kher Ambalal & Co.', 'Zal Andhyarujina', 'Kartikeya Desai', 'Karan Bhide', 'Asadali Mazgaonwala', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Kartikeya & Associate', 'Karti",32.18737435340881
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Bombay']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A. S. Oka', 'M. S. Sonak']"", ""LAWYER"": ""['D.J. Khambatta', 'Naira Jejeebhoy', 'Pheroze F. Mehta', 'Gayatri Singh', 'Aditi Saxena', 'Meenaz Kakalia', 'Kranti L.C.', 'Anil C. Singh', 'Purnima Awasti', 'Anusha Pravin Amin', 'Geetika Gandhi', 'AB. Vagyani', 'Y.S. Khochare', 'P.P. More', 'Udayan Shah', 'Rajiv Chavan', 'Priyanka Chavan', 'Anupama Pawar', 'D.S. Shingade', 'Vinod Mahadik', 'Madhavi Patil', 'Kuldeep U. Nikam', 'Poornima Awasthi', 'P.H. Kantharia', 'Deepali Patankar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Xyz']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: dss 1 Judgment-wp-10835-18-g.doc In The High Court Of Judicature At Bombay Civil Appellate Jurisdiction Writ Petition No. 10835 Of 2018 Xyz ... Petitioner Versus Union of India and ors. ... Respondents Mr. D.J. Khambatta, Sr. Advocate (Amicus Curiae) a/w. Ms Naira Jejeebhoy and Mr. Pheroze F. Mehta. Ms Gayatri Singh, Sr. Advocate a/w. Ms Aditi Saxena, Ms Meenaz Kakalia and Mr. Kranti L.C. for the Petitioner. Mr. Anil C. Singh, A.S.G. a/w. Mrs. Purnima Awasti a/w Ms Anusha Pravin Amin and Ms Geetika Gandhi for Respondent Nos.1 and 3. Mr.AB. Vagyani, Government Pleader a/w. Mr Y.S. Khochare, Agp and Mr. P.P. More, Agp and Mr. Udayan Shah for Respondent No.2. Mr. Rajiv Chavan, Sr. Advocate a/w. Ms Priyanka Chavan, Ms Anupama Pawar I/b Mr. D.S. Shingade, Mr. Vinod Mahadik, Dr.Madhavi Patil and R.N. Cooper Hospital for Mcgm. With Writ Petition No. 9748 Of 2018 Xyz ... Petitioner Versus Union of India and ors. ... Respondents Ms Gayatri Singh, Sr. Advocate a/w. Ms Aditi Saxena, Ms Meenaz Kakalia and Mr. Kranti L.C. for the Petitioner. Mr.AB. Vagyani, Government Pleader a/w. Mr Y.S. Khochare, Agp and Mr. P.P. More, Agp and Mr. Udayan Shah for Respondent No.2. With Ordinary Original Civil Jurisdiction Writ Petition (L) No. 3172 Of 2018 Xyz ... Petitioner Versus Union of India and anr. ... Respondents Mr. Kuldeep U. Nikam for the Petitioner. 1 of 78 ::: Uploaded on - 03/04/2019 ::: Downloaded on - 04/04/2019 04:17:27 ::: dss 2 Judgment-wp-10835-18-g.doc Ms Poornima Awasthi for Respondent No.1 - Uoi. Ms P.H. Kantharia,Government Pleader a/w. Ms Deepali Patankar, Assistant to G.P. for Respondent No.2- State. ..... Coram : A. S. Oka And M. S. Sonak, Jj. Reserved On : 2nd November 2018. Pronounced On : 3rd April, 2019. Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Bombay']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A. S. Oka', 'M. S. Sonak']"", ""LAWYER"": ""['D.J. Khambatta', 'Naira Jejeebhoy', 'Pheroze F. Mehta', 'Gayatri Singh', 'Aditi Saxena', 'Meenaz Kakalia', 'Kranti L.C.', 'Anil C. Singh', 'Purnima Awasti', 'Anusha Pravin Amin', 'Geetika Gandhi', 'Anil C. Singh', 'Purnima Awasti', 'Anusha Pravin Amin', 'Geetika Gandhi', 'Rajiv Chavan', 'Priyanka Chavan', 'Anupama Pawar', 'D.S. Shingade', 'Vinod Mahadik', 'Madhavi Patil', 'R.N. Cooper Hospital']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Xyz']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Union of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",21.4778835773468
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Anil K.Narendran']"", ""LAWYER"": ""['P.Ravindran', 'Sreekumar S', 'N.Raghuraj', 'S.Sreekumar', 'Soumiya']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['George Varghese.P']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['A.J.Abraham', 'K.I.Thankachan', 'Peter N Chacko', 'M.K.Geore', 'M.T.Issac', 'Saju P.Poulose', 'V.G.Kuriakose', 'District Educational Officer, Office Of The District Educational Officer,Ernaku- Lam-682011.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In The High Court Of Kerala At Ernakulam Present The Honourable Mr. Justice Anil K.Narendran Tuesday, The 13Th Day Of July 2021 / 22Nd Ashadha, 1943 Op(C) No. 446 Of 2021 Against The Order Dated 06.02.02021 In E.A.No.780/2020 In E.P.No.565/2020 In Os 163/1977 Of I Additional District Court, Ernakulam, Petitioner: 0 George Varghese.P, Aged 55 Years Pandyamyalil House, Kanjiramattom.P.O, Ernakulam-682315. By Advs. Sri.P.Ravindran (Sr.) Shri.Sreekumar S Sri.N.Raghuraj Respondents: 1 Fr. A.J.Abraham, Aged 46 Years, S/O.A.T.Jacob,Vicar,St.Ignatius Orthodox Syrian Church,Kanjiramattom,Ernakulam District-682315. 2 K.I.Thankachan, Aged 53 Years, S/O Ittan,Trustee,St.Ignatius Orthodox Syrian Church,Kanjiramattom,Ernakulam District-682315. 3 Peter N Chacko, Aged 61 Years, S/O Chacko,Manager Elected,St.Ignatius Vocational Higher Secondary School,Kanjiramattom,Ernakulam District-682315, Nedumattathil House,Chethikkode.P.O, Ernakulam. 4 M.K.Geore, Vazhakkalayil House,Chethikkode.P.O, Ex-Trustee,St.Ignatius Orthodox Syrian Church,Kani- Ramattom,Ernakulam -682315. 5 M.T.Issac, Ex-Trustee,St.Ignatius Orthodox Syrian Church,Kan- Jiramattom,Ernakulam District-682315. 6 Saju P.Poulose, S/O Poulose,Pallamkunnel House,Chethicode, Kanjiramattom,Ernakulam District-682315(Ex- Trustee). 7 V.G.Kuriakose, Kaniyamparambil House,Ex-Trustee,Kanjiramattom, O.P.(C)No.446 of 2021 & :-2-: C.R.P.No.81 of 2021 Ernakulam District-682315. 8 The District Educational Officer, Office Of The District Educational Officer,Ernaku- Lam-682011. By Advs. Sri.S.Sreekumar (Sr.) Smt.Soumiya C.D This Op (Civil) Having Come Up For Admission Along With C.R.P.No.81 Of 2021 On 09.04.2021 And Thereafter On 04.06.2021, 08.06.2021, 21.06.2021 And 30.06.2021 For Further Arguments, The Court On 13.07.2021 Delivered The Following: The Honourable Mr. Justice Anil K.Narendran Tuesday, The 13Th Day Of July 2021 / 22Nd Ashadha, 1943 Crp No. 81 Of 2021 Against The Common Order Dated 06.02.02021 In E.P.No.565/2020 In Os 163/1977 Of The I Additional District Court, Ernakulam Revision Petitioners/Judgment [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Kerala At Ernakulam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Anil K.Narendran']"", ""LAWYER"": ""['P.Ravindran', 'Sreekumar S', 'N.Raghuraj', 'P.Ravindran (Sr.)', 'Sreekumar S', 'N.Raghuraj', 'P.Ravindran (Sr.)', 'Sreekumar S', 'N.Raghuraj']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['George Varghese']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Fr. A.J.Abraham', 'K.I.Thankachan', 'Peter N Chacko', 'M.K.Geore', 'M.T.Issac', 'Saju P.Poulose', 'V.G.Kuriakose', 'District Educational Officer']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",18.642723083496094
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature At Allahabad, Lucknow Bench Afr Reserved on 29.4.2019 Delivered on 13.05.2019 Case :- Criminal Appeal No. - 1426 of 2005 Appellant :- Rama Pasi And Another Respondent :- State Of U.P. Counsel for Appellant :- A.V.S. Chauhan,Manish Kumar Yadav (Amicu,R B S Rathaur,S N Pandey,S.M. Mohsin Zaidi Counsel for Respondent :- Govt. Advocate along with Case :- Criminal Appeal No. - 1530 of 2005 Appellant :- Matauley @ Khushi Ram Respondent :- The State Of U.P. Counsel for Appellant :- Arun Sinha,(Amicus Curie),Balram Singh,Dinesh Kumar,Manish Kumar Singh Yadav Counsel for Respondent :- Govt.Advocate Hon'ble Ritu Raj Awasthi,J. Hon'ble Virendra Kumar-II,J. [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No. - 1426 of 2005', 'Criminal Appeal No. - 1530 of 2005']"", ""COURT"": ""['High Court Of Judicature At Allahabad, Lucknow Bench']"", ""DATE"": ""['29.4.2019', '13.05.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""['Ritu Raj Awasthi', 'Virendra Kumar-II']"", ""LAWYER"": ""['A.V.S. Chauhan', 'Manish Kumar Yadav', 'R B S Rathaur', 'S N Pandey', 'S.M. Mohsin Zaidi', 'Arun Sinha', 'Balram Singh', 'Dinesh Kumar', 'Manish Kumar Singh Yadav', 'Govt.Advocate']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Rama Pasi']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['State Of U.P.']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",18.76338577270508
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Rohit Ranjan Agarwal']"", ""LAWYER"": ""['Pankaj Agarwal', 'Akash Deep Srivastava', 'K.M. Tripathi', 'Krishna Mohan Tripathi', 'Sunil Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Reptakos Brett Company Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Utkarsh Granite Private Limited']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: High Court Of Judicature At Allahabad Reserved on 01.04.2022 Delivered on 12.04.2022 Court No. - 10 Case :- Second Appeal No. - 203 of 2021 Appellant :- M/S Reptakos Brett Company Limited Respondent :- M/S Utkarsh Granite Private Limited Counsel for Appellant :- Pankaj Agarwal, ,Akash Deep Srivastava Counsel for Respondent :- K.M. Tripathi,Krishna Mohan Tripathi,Sunil Kumar Hon'ble Rohit Ranjan Agarwal,J. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court Of Judicature At Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Rohit Ranjan Agarwal']"", ""LAWYER"": ""['Pankaj Agarwal', 'Akash Deep Srivastava', 'K.M. Tripathi', 'Krishna Mohan Tripathi', 'Sunil Kumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['M/S Reptakos Brett Company Limited']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['M/S Utkarsh Granite Private Limited']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.893295526504517
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['R.C. Cooper v. Union of India, (1970) 1 SCC 248', 'Maneka Gandhi v. Union of India, (1978) 1 SCC 248']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: True, our Constitution has no 'due process' clause or the VIII Amendment; but, in this branch of law, after R.C. Cooper v. Union of India, (1970) 1 SCC 248 and Maneka Gandhi v. Union of India, (1978) 1 SCC 248, the consequence is the same. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['R.C. Cooper', 'Maneka Gandhi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",8.622727870941162
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['G.P. Singh']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (See Principles of Statutory Interpretation by Justice G.P. Singh, 9th Edn., 2004 at p. 438.). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['G.P. Singh']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.147757530212402
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['England']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Heydon']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Their Lordships have said -- ""It is a sound rule of construction of a statute firmly established in England as far back as 1584 when Heydon's case was decided that --""...... [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['England']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Heydon']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.059646129608154
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['29/12/2004']"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In para 13 of the plaint, it has been further averred that, ""When the plaintiffs asked the defendant to obtain requisite documents immediately, the defendant assured the plaintiffs that he would obtain the requisite documents and would be available on 29/12/2004 at the office of the Sub­Registrar, Geeta Colony, Delhi and would execute the sale deed"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['29/12/2004']"", ""GPE"": ""['Geeta Colony', 'Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.005830764770508
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 2', 'Section 172']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hyderabad Land Revenue Act, 1317']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Counsel for appellants contended that who is the Jagirdar against whom the legal fiction is to apply, is not pleaded by the claim petitioners and the scope and ambit of Rule 2 of the Rules regarding 'Grant of Pattadari rights in non-Khalsa villages', 1356 Fasli framed under Section 172 of the Hyderabad Land Revenue Act, 1317 Fasli is nebulous. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 2', 'Section 172']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hyderabad Land Revenue Act', 'Hyderabad Land Revenue Act, 1317 Fasli']"", ""WITNESS"": ""[]""}",10.02777910232544
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 19(3)', 'section 20 to 24']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SG Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further, section 19(3) of the SG Act specifies that unless a different intention appears, rules contained in section 20 to 24 rules for ascertaining the intention of the parties as to the time at which the property and goods is to passed to the buyer. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 19(3)', 'section 20 to 24']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SG Act']"", ""WITNESS"": ""[]""}",7.655835151672363
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)', 'Section 13(1)(e)', 'Sections 120B and 193']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PC Act', 'IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence, the Trial Court convicted the Appellant under Section 13(2) read with Section 13(1)(e) of the PC Act; as well as Sections 120B and 193 of the IPC, and sentenced him to rigorous imprisonment for two years and payment of fine of Rs 1.5 lakhs. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)', 'Section 13(1)(e)', 'Sections 120B and 193']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PC Act', 'IPC']"", ""WITNESS"": ""[]""}",10.053876638412476
"{""CASE_NUMBER"": ""['Appeal Suit No. 274/2007', 'OS No. 155/05', 'WP Nos. 19670/07, 20667/07 and 22043/07']"", ""COURT"": ""['High Court of Andhra Pradesh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The LoA stipulated that: ""17. The allotment of said land is subject to the outcome of the Appeal Suit No. 274/2007 in (OS No. 155/05), WP Nos. 19670/07, 20667/07 and 22043/07 pending before the Hon'ble High Court of Andhra Pradesh."" PART A 4 [/INST]
 {""CASE_NUMBER"": ""['Appeal Suit No. 274/2007', 'WP Nos. 19670/07', '20667/07', '22043/07']"", ""COURT"": ""['High Court of Andhra Pradesh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.489895820617676
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.05.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 143(3)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Income-tax Act, 1961']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The appeal filed by assessee is against order of CIT(A)-7, Pune, dated 22.05.2018 relating to assessment year 2015-16 against order passed under section 143(3) of the Income-tax Act, 1961 (in short 'the Act'). 2. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['CIT(A)-7, Pune']"", ""DATE"": ""['22.05.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 143(3)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Income-tax Act, 1961']"", ""WITNESS"": ""[]""}",9.098077297210692
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Punjab v. Jagdip Singh [(1964) 4 SCR 964 : AIR 1964 SC 521]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this context, we have also to bear in mind the exposition of law by a Constitution Bench in State of Punjab v. Jagdip Singh [(1964) 4 SCR 964 : AIR 1964 SC 521] . [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Punjab v. Jagdip Singh [(1964) 4 SCR 964 : AIR 1964 SC 521]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.18528938293457
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Surajit Sarkar Vs. State of West Bengal36']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ""..........Deficiencies in investigation by way of omissions and lapses on the part of investigating agency cannot in themselves justify a total rejection of the prosecution case."" Hon'ble the Supreme Court has again in the case of Surajit Sarkar Vs. State of West Bengal36, has addressed the issue and held that:- 49. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Surajit Sarkar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.045203447341919
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 7']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If a Family Court before which an application is made under Section 7 of the Act finds that the minor whose guardianship is sought in the application, ordinarily resides within its territorial jurisdiction, such Family Court is bound to entertain the application and decide that application on merit in accordance with law. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 7']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.340318441390991
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Explanation 2.- The terms on which an adjournment or postponement may be granted include, in appropriate cases, the payment of costs by the prosecution or the accused. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.224012613296509
"{""CASE_NUMBER"": ""['Crl Appeal no. 508/2019']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['15.03.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Rohitbhai Jivanlal Patel vs State of Gujarat']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this regard in Rohitbhai Jivanlal Patel vs State of Gujarat decided by hon'ble Apex Court in Crl Appeal no. 508/2019 decided on 15.03.2019, it has been held as under: [/INST]
 {""CASE_NUMBER"": ""['Crl Appeal no. 508/2019']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['15.03.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""['Rohitbhai Jivanlal Patel']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.703808069229126
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Bihar v. Maharajadhiraja Sir Kameshwar Singh [1952 SCR 889 : AIR 1952 SC 252]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A claim for arrears of rent has also been held to be an actionable claim (State of Bihar v. Maharajadhiraja Sir Kameshwar Singh [1952 SCR 889 : AIR 1952 SC 252] , SCR at p. 910). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Bihar v. Maharajadhiraja Sir Kameshwar Singh [1952 SCR 889 : AIR 1952 SC 252]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.472493886947632
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14th February, 2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Textile Labour Association']"", ""OTHER_PERSON"": ""['Amar N. Barot']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 14th February, 2018, one Mr. Amar N. Barot, General Secretary of the Textile Labour Association made a mention before the court that the judgment in the case may either be dictated or the matter may be released and sent to the regular bench. 2. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14th February, 2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Textile Labour Association']"", ""OTHER_PERSON"": ""['Amar N. Barot']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.859146595001221
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This will be clarified in the instant case by comparison of sub- section (1) of Section 15 with sub-section (1) of Section 15-A. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub- section (1) of Section 15', 'sub-section (1) of Section 15-A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.390043497085571
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13.03.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, the Minister for Legislative Affairs at 10 a.m. on 13.03.2018 stood up and directly recommended for expulsion of 2 members and suspension of 11 members and the Speaker immediately accepted and expelled both the petitioners and suspended the others without there being any deliberation, discussion, debate or giving reasonable opportunity to explain their version before expelling them. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13.03.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.71983790397644
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['9-11-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted by the Counsel for the State, that in the compliance report dated 9-11-2020, it was mentioned that the respondents no. 3 to 5 have been line-attached, but looking to the seriousness of the misconduct committed by them, today, they have been placed under suspension. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['9-11-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.997965574264526
"{""CASE_NUMBER"": ""['G.A. No. 464 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Datta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The contention of Mr. Datta, therefore, has been that learned Judges of this Court have uniformly held, upon duly reading the said order, that the retired employees are entitled to pension from the date of refund and there being no valid reason for taking a different view, there is no need for clarification of the said order; accordingly, G.A. No. 464 of 2018 merits outright dismissal. [/INST]
 {""CASE_NUMBER"": ""['G.A. No. 464 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Datta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.485480308532715
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order 7 Rule 11', 'Section 304']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC', 'Rajasthan Court Fee and Suit valuation (Amendment) Act, 2009', 'Municipality Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The defendant no. 9 also filed an application under Order 7 Rule 11 CPC, wherein it was averred that the plaintiff neither filed the suit in accordance with the provisions of Rajasthan Court Fee and Suit valuation (Amendment) Act, 2009 nor in accordance with the provisions of Section 304 of the Municipality Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order 7 Rule 11', 'Section 304']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Rajasthan Court Fee and Suit valuation (Amendment) Act, 2009', 'Municipality Act']"", ""WITNESS"": ""[]""}",9.520933151245115
"{""CASE_NUMBER"": ""['W.P.(C) No.616 of 2020']"", ""COURT"": ""[]"", ""DATE"": ""['21.07.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sanjay Hegde']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 32']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: another writ petition under Article 32 of the Constitution of India was again filed being W.P.(C) No.616 of 2020, which was dismissed as withdrawn on 21.07.2020, the order is extracted herein under: “After arguing for sometime, Mr. Sanjay Hegde, learned senior counsel [/INST]
 {""CASE_NUMBER"": ""['W.P.(C) No.616']"", ""COURT"": ""[]"", ""DATE"": ""['21.07.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sanjay Hegde']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 32']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",10.189899921417236
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When a statute is impugned under Article 14 what the court has to decide is whether the statute is so arbitrary or unreasonable that it must be struck down. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.042810440063477
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['ITAT']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The learned Commissioner of Income Tax (Appeals) erred in not following the ratio laid down by ITAT. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.105962753295898
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['B.R.A. Bihar University, Muzaffarpur']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 3. B.R.A. Bihar University, Muzaffarpur through its Registrar. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Muzaffarpur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['B.R.A. Bihar University']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.463522434234619
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['B. Shama Rao v. Union Territory of Pondicherry [AIR 1967 SC 1480 : (1967) 2 SCR 650 : 20 STC 215]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In B. Shama Rao v. Union Territory of Pondicherry [AIR 1967 SC 1480 : (1967) 2 SCR 650 : 20 STC 215] it was observed, ‘it is trite to say that a decision is binding not because of its conclusions but in regard to its ratio and the principles, laid down therein’. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['B. Shama Rao v. Union Territory of Pondicherry [AIR 1967 SC 1480 : (1967) 2 SCR 650 : 20 STC 215]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.108468055725098
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The existing highway has only two lane and approximately 25 meters wide land. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.3214638233184814
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: No doubt, the benefit of the scheme will be available from the specified date, irrespective of the fact when the concerned Government servant actually retired from service. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.128187417984009
"{""CASE_NUMBER"": ""['A.S NO.86/2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence, the contention that has been raised by Plaintiffs being a fact in issue, same is the subject matter of A.S NO.86/2019 evidence which cannot be appreciated by this Court in the present suit. [/INST]
 {""CASE_NUMBER"": ""['A.S NO.86/2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.076882123947144
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.07.2002']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In pursuance to the aforesaid decision, A-1 to A-13 went to the residence of the deceased on 18.07.2002 at about 9:30 p.m. in three material objects, namely, - (i) an auto-rickshaw, (ii) a motorbike, and (iii) a jeep, armed with deadly weapons like swords, knives, chopper, etc. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.07.2002']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.755231142044067
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kapur', 'Govind Sarda']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Kapur also submitted that if one lifted the veil of SEARS and Sarda one would find that these two entities were creatures of Govind Sarda and his group. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SEARS', 'Sarda']"", ""OTHER_PERSON"": ""['Govind Sarda']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.550025224685669
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Government', 'Government of India']"", ""OTHER_PERSON"": ""['Sri Iyer']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Sri Iyer, Senior Advocate sought to read the aforesaid judgement where the contents of the White Paper issued by the Central Government quoted to suggest that these are the findings of the Government of India having taken note by the Apex Court and, therefore, should be treated to be concluded. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Iyer']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.463489294052124
"{""CASE_NUMBER"": ""['Criminal Complaint bearing No.74136']"", ""COURT"": ""[]"", ""DATE"": ""['04.06.2013', '22.07.2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Sukhbir Kataria']"", ""PRECEDENT"": ""['Om Parkash Vs. Satish Kumar and others']"", ""PROVISION"": ""['Section 420, 467, 468, 471, 120-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner Sukhbir Kataria, who is accused no.14 in Criminal Complaint bearing No.74136 dated 04.06.2013 (Annexure P-1) titled as 'Om Parkash Vs. Satish Kumar and others' seeks quashing of the same alongwith the summoning order dated 22.07.2013 (Annexure P-2), whereby he had been summoned to face trial under Section 420, 467, 468, 471, 120-B IPC. [/INST]
 {""CASE_NUMBER"": ""['Criminal Complaint bearing No.74136']"", ""COURT"": ""[]"", ""DATE"": ""['22.07.2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Om Parkash', 'Satish Kumar']"", ""PETITIONER"": ""['Sukhbir Kataria']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 420, 467, 468, 471, 120-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",12.316383361816406
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Apex Court, however, observed that applying of belting system for grant of compensation was not appropriate and, therefore, compensation for 'B' category area was also enhanced to the one as determined by the Hon'ble High Court for 'A' category. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.874180316925049
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: They did not even suggest the witness that he was siding with the claimants. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.697497844696045
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Pooja Mahajan', 'Ritubala']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The testimony of the prosecutrix (PW-4) must have been appreciated in the light of the background of the case; more so, the prosecutrix (PW-4) was reluctant to go back to the house of her aunt and complained the act of sexual intercourse committed by the respondent-accused to her teachers, Pooja Mahajan (PW-1) and Ritubala (PW-2). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pooja Mahajan', 'Ritubala']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.422759532928467
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay high Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Property Owners Association and Ors. vs. State of Maharashtra and Ors. reported in MANU/MH/0735/2019']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In case of Property Owners Association and Ors. vs. State of Maharashtra and Ors. reported in MANU/MH/0735/2019, the Bombay high Court has held as under: "" 181. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay high Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Property Owners Association and Ors. reported in MANU/MH/0735/2019']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.69089388847351
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Digitally signed by:RAJENDER SINGH KARKI Signing Date:13.01.2021 18:54:39 31. Claimant(s) to respond to the offer of the Insurance Company within 30 days [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13.01.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['RAJENDER SINGH KARKI']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.699049472808838
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Frozen Foods Exports Pvt. Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Apex Court in the case of M.D. Frozen Foods Exports Pvt. Ltd. & ors (supra) has framed legal issues which are as under : respondent can be carried on along with the SARFAESI proceedings simultaneously ? B. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['M.D. Frozen Foods Exports Pvt. Ltd.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.056106567382812
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: I cannot understand when even according to the police the said information was received on telephone how and what basis a computer photograph could be prepared. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.461761951446533
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, this is not the only kind of fee which can be charged. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.872498273849487
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Maru Ram2']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Punjab v. Joginder Singh4', 'Gopal Vinayak Godse v. State of Maharashtra [1961 AIR 600]']"", ""PROVISION"": ""['Articles - 72 and 161']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: v) In State of Punjab v. Joginder Singh4, the Apex Court relying on the principle laid down by it in Gopal Vinayak Godse v. State of Maharashtra [1961 AIR 600] and Maru Ram2 held that power under Articles - 72 and 161 of the Constitution of India is absolute and cannot be lettered by any statutory provision, such . [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Gopal Vinayak Godse', 'Maru Ram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Punjab v. Joginder Singh4', 'Maru Ram2']"", ""PROVISION"": ""['Articles - 72 and 161']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",10.930577039718628
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Parasaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 25']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Shri Parasaran further submits that the fundamental right of the Muslim community under Article 25, to offer namaz, is not affected because the Babri Masjid was not a mosque with particular significance for that religion. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Parasaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 25']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.167248964309692
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Government']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Correspondingly, by delegated legislation incorporated by the Central Government, it may extend that time limit. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Government']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.113141059875488
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On facts, the front side open space usurpations by the petitioner are in excess of 50% and on one side 33 1/3 % and it is impossible to manoeuvre even a mobile fire fighting equipment through one metre passage on that side and reasons for violation not forthcoming. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.601245164871216
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Pertinently, Plot no. 8, which is a part of Zone C, is not a part of the central vista region. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.955629587173462
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['8 th February, 1999']"", ""GPE"": ""['Bhagwanpura']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dharam Chand']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The complainant, along with other neighbours, went to search deceased Dharam Chand on 8 th February, 1999 and at village Bhagwanpura, outside the godown of brother deceased Dharam Chand, found his motorcycle but his whereabouts were not made known. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['8th February, 1999']"", ""GPE"": ""['Bhagwanpura']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dharam Chand']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.814023494720459
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It includes articles having the characteristics of textile floor coverings (e.g., thickness, stiffness and strength) but intended for use for other purposes (for example, as wall hangings or table covers or for other furnishing purposes). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.038285732269287
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Articles 246A, 269A(1) read with 269A(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: And which power to designate inter-State supply also comes from Articles 246A, 269A(1) read with 269A(5) as discussed earlier. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Articles 246A', '269A(1)', '269A(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.930279970169067
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Fort', 'Mumbai', 'Byculla']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['HDFC Bank', 'State Bank of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further, the Assessing Officer is directed to deposit the amount of Rs.7,59,185/- in HDFC Bank, Fort, Mumbai and Rs.34,265/- in State Bank of India, Byculla, Mumbai within a period of one week from today. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mumbai']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['HDFC Bank', 'State Bank of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.657353162765503
"{""CASE_NUMBER"": ""['C.C.NO.7919/2017']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['T. Vasanthakumar -vs- Vijayakumari, reported in AIR 2015']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Negotiable Instruments Act (26 of 1881)']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 2. T. Vasanthakumar -vs- Vijayakumari, reported in AIR 2015 Supreme Court 2240 wherein it has held that Negotiable Instruments Act (26 of 1881), Ss.138 and 139 - C.C.NO.7919/2017 Dishonour of Cheque - Appeal against acquittal - Cheque as well as signature on it not disputed by accused respondent - [/INST]
 {""CASE_NUMBER"": ""['C.C.NO.7919/2017']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['T. Vasanthakumar']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vijayakumari']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 2015 Supreme Court 2240']"", ""PROVISION"": ""['Negotiable Instruments Act (26 of 1881), Ss.138 and 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.236267566680908
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.12.2007']"", ""GPE"": ""['Chandigarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vijay Pahwa', 'Vinod Malhotra']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Rent Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petition was filed through Sh. Vijay Pahwa, General Power of Attorney and it was asserted in the petition under Section 13-B of the Rent Act that 1 of 23 50% share of the demised premises had been purchased by the landlord from Sh. Vinod Malhotra vide sale deed No.4226 registered on 20.12.2007 with Sub Registrar, Chandigarh. [/INST]
 {""CASE_NUMBER"": ""['sale deed No.4226']"", ""COURT"": ""[]"", ""DATE"": ""['20.12.2007']"", ""GPE"": ""['Chandigarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vinod Malhotra']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Rent Act']"", ""WITNESS"": ""[]""}",9.221929550170898
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is seen from the record that the arbitration proceedings were held by Arbitrator Ms. Rashmi Jain, Advocate at her office at Shop No.12, Club Road Market, Punjabi Bagh, New Delhi-110026. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Punjabi Bagh', 'New Delhi']"", ""JUDGE"": ""['Rashmi Jain']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.978022575378418
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: According to her, the patient arrived at 21.23 hours and was examined at 21.25 hours. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.765300273895264
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Evidence Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Such signed statements are covered by the definition of ''document'' given in section 3 of the Indian Evidence Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Evidence Act']"", ""WITNESS"": ""[]""}",8.606210470199585
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Imambaksh', 'Jameel']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He had not seen any other shop of Imambaksh and Jameel. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Imambaksh', 'Jameel']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.225040674209595
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But the revisit should not be fact- centric or quantum-centric. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.038188219070435
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Finance Bill, 2021', 'PF and ESI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We note that the Finance Bill, 2021 has brought in an amendment which disallows the employees' contribution made in PF and ESI if not made within the due date as prescribed by the respective statutes (PF and ESI Act). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PF and ESI Act']"", ""WITNESS"": ""[]""}",7.083856344223023
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Jaspur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mukhtar Ahmed', 'Sameena Begum', 'Farida Begum']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: PW1, in his evidence, has categorically stated that the deceased Mukhtar Ahmed was elected as the Chairman of the Municipality, Jaspur in the election prior to the election at the time of occurrence and that his wife Smt. Sameena Begum had contested the next election for the post of the Chairman against Smt. Farida Begum and Sameena Begum had lost that election. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Jaspur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mukhtar Ahmed', 'Farida Begum', 'Sameena Begum']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.361266374588013
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26.07.1992', '12.08.1992']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There is another important factor which is taken for consideration is that the alleged sample was taken on 26.07.1992 and it was sent to the Chemical Examiner on 12.08.1992. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26.07.1992', '12.08.1992']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.734850645065308
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunil B.Ganu']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14(3)(c)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Sri Sunil B.Ganu, learned counsel, would however press into service Section 14(3)(c) and assert that the plaintiffs suit is barred thereunder. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunil B.Ganu']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14(3)(c)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.207788705825806
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Authorized Officer, State Bank of Travancore vs. Mathew K.C.2']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In support of his contention, he relied upon the decision of the Hon'ble Supreme Court in 'Authorized Officer, State Bank of Travancore vs. Mathew K.C.2'. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Authorized Officer, State Bank of Travancore vs. Mathew K.C.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.211712837219238
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ramprakash Sarkar', 'Mrinal Kanti Ghosh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Gopinath Dasgupta', 'Omit Namchu']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The management witness Shri Gopinath Dasgupta - DRM North Bengal Regional Office, Ramprakash Sarkar - sub- staff Mahabirsthan Branch as well as Ms. Omit Namchu management witness stated in their examination in chief that the appellant made a confessional statement in writing accepting the fraudulent withdrawal of Rs.23,000/-only from the bank account of Shri Mrinal Kanti Ghosh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['North Bengal Regional Office', 'Ramprakash Sarkar', 'Mahabirsthan Branch']"", ""OTHER_PERSON"": ""['Omit Namchu', 'Mrinal Kanti Ghosh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.923104763031006
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['A. K. Kraipak v. Union of India, (1969) 2 SCC 262']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The origins of the law can also 80 of 164 be traced to the principles of natural justice, as developed in the following cases: in A. K. Kraipak v. Union of India, (1969) 2 SCC 262, it was held that the rules of natural justice operate in areas not covered by any law. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['A. K. Kraipak v. Union of India, (1969) 2 SCC 262']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.480634212493896
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the first minutes no explanation was given for increase in the authorized share capital of the company whereas in the second it was stated that funds were needed to make repayment of loans of the creditors. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.526988506317139
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 3G']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Applying the law aforesaid, the acquisition of land stood completed on publication of Section 3G declaration and the same remains unaffected. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 3G']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.396789789199829
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 5, 6 and 7', 'Sections 294, 376 & 34']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PITA, Act', 'ITP Act', 'RPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He also deposed that he examined PW-1 and after her examination additional offences under Sections 5, 6 and 7 of PITA, Act i.e. ITP Act and Sections 294, 376 & 34 RPC were added on different dates. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 5, 6 and 7', 'Sections 294, 376 & 34']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PITA, Act i.e. ITP Act', 'RPC']"", ""WITNESS"": ""[]""}",9.201859951019289
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2014) 2 SCC 1']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, if the information given clearly mentions the commission of a cognizable offence, there is no other option but (2014) 2 SCC 1 to register an FIR forthwith. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2014) 2 SCC 1']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.76705527305603
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 50']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NDPS Act 1985']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thereafter, he was told about his legal rights under Section 50 of the NDPS Act 1985 and a notice under Section 50 of the NDPS Act 1985 was served to him. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 50']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NDPS Act 1985']"", ""WITNESS"": ""[]""}",7.763988494873047
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Janardan Reddy v. The State reported in AIR 1951 SC 124']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This is because prima facie every legislation is prospective (see para 7 of the Constitution Bench judgment in Janardan Reddy v. The State reported in AIR 1951 SC 124). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Janardan Reddy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",8.260680437088013
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Andhra Pradesh High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['V. Narayana Rao v. State of A.P. [AIR 1987 AP 53 : 1987 Lab IC 152 : (1986) 2 Andh LT 258]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this connection, reference may be had to the Full Bench decision of the Andhra Pradesh High Court in V. Narayana Rao v. State of A.P. [AIR 1987 AP 53 : 1987 Lab IC 152 : (1986) 2 Andh LT 258] , striking down the enhancement of reservation from 25% to 44% for OBCs. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Andhra Pradesh High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['V. Narayana Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Lab IC 152 : (1986) 2 Andh LT 258']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.18436360359192
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: i) An order of injunction, attachment or appointment of a receiver can be initiated only at the instance of the bank or the financial institution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.892505884170532
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Reference Court enhanced the amount of compensation to Rs.1,80,000/- per hectare for cultivable land and Rs.90,000/- per hectare for uncultivable land. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.472359180450439
"{""CASE_NUMBER"": ""['Suo Motu Writ Petition (C) No.1 of 2020', 'KL,J W.P. Nos.20421 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['07.05.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Arnesh Kumar v. State of Bihar [(2014) 8 SCC 273]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Suo Motu Writ Petition (C) No.1 of 2020, dated 07.05.2021 KL,J W.P. Nos.20421 of 2019 & batch Arnesh Kumar v. State of Bihar [(2014) 8 SCC 273] during pandemic......"" ""10. [/INST]
 {""CASE_NUMBER"": ""['W.P. Nos.20421 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['07.05.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Arnesh Kumar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.097559213638306
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 120B, 212, 302, 147, 148, 149, 506B', 'Section 27']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC', 'Indian Arms Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Before re-appreciating the evidence, we would like to make it clear at the first instance itself that though charge sheet is filed against accused Nos.1 to 7 invoking offences under Sections 120B, 212, 302, 147, 148, 149, 506B of IPC and Section 27 of Indian Arms Act [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 120B, 212, 302, 147, 148, 149, 506B of IPC and Section 27 of Indian Arms Act']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",11.069798707962036
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Chapter XIII']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Chapter XIII deals with offences, punishments for violation of various clauses of the Act and procedures thereon. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.646910190582275
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.05.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 306/34']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, crime No. 136/2018 under Section 306/34 of IPC was registered on 22.05.2018. [/INST]
 {""CASE_NUMBER"": ""['crime No. 136/2018']"", ""COURT"": ""[]"", ""DATE"": ""['22.05.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 306/34']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",10.079257726669312
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Clause (1) of the agreement provided that the agent would be allowed 5% commission on the total value of the order. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.947039365768433
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: So a person cannot be both, a [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.57013463973999
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Malegaon']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['NIA']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is not in dispute that there is no witness to the fact alleged by the NIA that appellants/accused persons used the bicycles to purchase and planted bombs causing explosion at Malegaon. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Malegaon']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['NIA']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.397733449935913
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ministry of Railways (Railway Board), Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Chapter-X']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Railways Code']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Chapter-X of the Indian Railways Code for the Engineering Department, issued by the Ministry of Railways (Railway Board), Government of India, relates to the custody, management and disposal of land. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ministry of Railways', 'Railway Board']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Chapter-X']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.766184568405151
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26.03.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Laxmi Pat Surana v. Union Bank of India, Civil Appeal No. 2734 of 2020', 'Babulal Vardharji Gurjar v. Veer Gurjar Aluminium Industries (P) Ltd., (2020) 15 SCC 1 [\u201cBabulal\u201d]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , in Laxmi Pat Surana v. Union Bank of India, Civil Appeal No. 2734 of 2020, a judgment delivered on 26.03.2021, this Court, after referring to various judgments of this Court, including the judgment in Babulal Vardharji Gurjar v. Veer Gurjar Aluminium Industries (P) Ltd., (2020) 15 SCC 1 [“Babulal”], then held: “35 [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No. 2734 of 2020']"", ""COURT"": ""[]"", ""DATE"": ""['26.03.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Babulal Vardharji Gurjar v. Veer Gurjar Aluminium Industries (P) Ltd.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.2354838848114
"{""CASE_NUMBER"": ""['C.C.No.2468/2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: C.C.No.2468/2018 That, the accused shall deposit the fine amount of Rs.90,000/- and in default of deposit of said fine amount, he shall undergo a simple imprisonment for one month. [/INST]
 {""CASE_NUMBER"": ""['C.C.No.2468/2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.504873037338257
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14.10.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The accused agreed to repay the said amount with interest at the rate of 18% per annum and towards the repayment of the said amount, the accused had issued a cheque dated 14.10.2008 in favor of the complainant for a sum of Rs.20 lakhs. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14.10.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.776829957962036
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Parashuram Pottery Works Co. Ltd. V. ITO, Circle I, Ward A, Rajkot, (1977) 106 ITR 1 (SC)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Our attention was drawn to Parashuram Pottery Works Co. Ltd. V. ITO, Circle I, Ward A, Rajkot, (1977) 106 ITR 1 (SC) which records that the Assessing Officer entrusted with the task of calculating and realizing tax should familiarize themselves with the relevant provisions and become well versed with the law on the subject. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parashuram Pottery Works Co. Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Assessing Officer entrusted with the task of calculating and realizing tax should familiarize themselves with the relevant provisions and become well versed with the law on the subject']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.855992794036863
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Bhag Chand Khateek']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, the statement of witness A.D.2 Bhag Chand Khateek cannot be considered distrust worthy that his name in the charge sheet is not mentioned as witness."" (emphasis supplied) 28. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Bhag Chand Khateek']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.074591159820557
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 23']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['DV Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At this juncture, it would be apt to reproduce herein below Section 23 of the DV Act, which reads as under:- 23. Power to grant interim and ex parte orders. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 23']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['DV Act']"", ""WITNESS"": ""[]""}",7.522680997848511
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Sargur Town', 'H.D.Kote Taluk', 'Mysuru District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Town Panchayath, Sargur']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is the case of the petitioner that the petitioner was elected as a member of Town Panchayath, Sargur, from ward No.11 of Sargur Town, H.D.Kote Taluk, Mysuru District and has been serving the public since 2015. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Sargur', 'H.D.Kote', 'Mysuru']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.538174152374268
"{""CASE_NUMBER"": ""['Application No.567/2002']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['L.M.Menezes']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: i) The learned Counsel referred to the earlier litigation filed by Mr.L.M.Menezes and others in Application No.567/2002. [/INST]
 {""CASE_NUMBER"": ""['Application No.567/2002']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['L.M.Menezes']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.623736143112183
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['29/30.10.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Primary Health Centre, Narayanakhed, Sanga Reddy District', 'Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Gollapalli Madhuri']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner, Dr. Gollapalli Madhuri, who is serving on the post of Medical Officer, Primary Health Centre, Narayanakhed, Sanga Reddy District, has challenged the constitutional validity of the executive instructions, dated 29/30.10.2014 issued by the Government of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['29/30.10.2014']"", ""GPE"": ""['Sanga Reddy District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""['Gollapalli Madhuri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.985026121139526
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Vikram Singh @ Vicky v. Union of India16']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The principle of proportionality has been recognized by this Court in Vikram Singh @ Vicky v. Union of India16 wherein it was stated that punishment must be proportionate to the nature and gravity of offences. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vikram Singh @ Vicky']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.492796421051025
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also mentioned that a letter has been sent to the Radiology Department. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.593332767486572
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After deducting 30% towards income tax, the income would be Rs.19,639/-. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.981820106506348
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Arun Kumar Rai']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Anand Kumar Keshri']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Sri Arun Kumar Rai, Ld. Counsel for the accused has raised the point that P.W.1 Anand Kumar Keshri told in para 3 of his deposition that the accused was firing inside the Shop had pistols in his both hands. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Arun Kumar Rai', 'Anand Kumar Keshri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.624653339385986
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even though the assessee during the assessment proceedings, mentioned that the supply of machinery for TPD Plant and the installation and commissioning services are separate and independent of each other, a careful perusal of this document reveal that as per the terms and conditions of the contract the effective mandate given to the assessee is in the nature of composite contract . [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.251447200775146
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The defendant No.1 continued to manage the affairs of the mill till 1989 when he resigned. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.6529717445373535
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Karnataka']"", ""OTHER_PERSON"": ""['B.K. Pavitra', 'Nagaraj']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was observed that judgment in B.K. Pavitra (I) held that no exercise as mandated by Nagaraj was undertaken by the State of Karnataka before providing reservation in promotion and providing consequential seniority and the State had not collected quantifiable data on the three parameters. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Karnataka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['B.K. Pavitra']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.72641372680664
"{""CASE_NUMBER"": ""['Writ Petition No.12837 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, on the basis of these documents when the shop number and address of the shop is not known these factual aspects of the matter cannot be examined in writ jurisdiction Accordingly, the Writ Petition No.12837 of 2019 is also dismissed. [/INST]
 {""CASE_NUMBER"": ""['Writ Petition No.12837 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.58413815498352
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.07.2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Such Award dated 12.07.2012 has been proved as Ex. R-1. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.07.2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.573690176010132
"{""CASE_NUMBER"": ""['Civil Appeal No.4060-61 of 2020']"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Telangana']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Challenging the same, the State of Telangana filed Civil Appeal No.4060-61 of 2020 in the Supreme Court of India. [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No.4060-61']"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Telangana']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.077764511108398
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Punjab', 'Legislature of the State of Punjab']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 13A, 18A and 18B', 'Sections 13 and 19']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Rent Act', 'Punjab Act 2 of 1985']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In 1985, the provisions of the Rent Act as applicable to the State of Punjab were amended by the Legislature of the State of Punjab vide Punjab Act 2 of 1985 by inserting new Sections 13A, 18A and 18B, a new Second Schedule and amendments in Sections 13 and 19 substantially similar to those that had been effected by Ordinance 14 of 1976. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Punjab']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 13A, 18A and 18B', 'Sections 13 and 19']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Rent Act', 'Punjab Act 2 of 1985', 'Ordinance 14 of 1976']"", ""WITNESS"": ""[]""}",11.698398113250732
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: One of the arguments raised in Sibbia, as also in the present case, was that the power to grant anticipatory bail ought to be left to the discretion of the court concerned, depending on the facts and circumstances of each case. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sibbia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.913257360458374
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['02.03.2012']"", ""GPE"": ""['Tamil Nadu']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Ground Water Potential Assessment was done as on March 2009 and the Panchayat Union Blocks in Tamil Nadu were categorized as Over Exploited, Critical, Semi Critical, Safe and Saline blocks and this categorization was approved by the Government vide G.O(Ms).No.52, Public Works(R2)Department dated 02.03.2012. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['March 2009']"", ""GPE"": ""['Tamil Nadu']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.844106912612915
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 68', 'Section 434(1)(c)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Amendment Act, 1988']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (d) Whether Section 68 of the Amendment Act, 1988 continues to subsist regardless of the coming into force of Section 434(1)(c) of the 2013 Act in relation to matters that were filed in the High Court prior to coming into force of the Amendment Act, 1988? [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 68', 'Section 434(1)(c)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Amendment Act, 1988', '2013 Act']"", ""WITNESS"": ""[]""}",9.942566156387327
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 15(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Commercial Courts Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the present case, no steps were admittedly taken by the plaintiff to transfer the suit to a commercial suit by applying before the Commercial Appellate Division by invoking Section 15(5) of the Commercial Courts Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 15(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Commercial Courts Act']"", ""WITNESS"": ""[]""}",7.543184280395508
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Maharashtra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The municipal corporations in the State of Maharashtra like in any other part of the country are vested with the power to demolish structures which violate the laws and have been built without any building plans or in violation of the laws. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Maharashtra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.218099117279053
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He pointed out that on two occasions, the State Government came out with a policy for regularization and this Court held that the policy was illegal on the ground that it is not consistent with the law. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.633730411529541
"{""CASE_NUMBER"": ""['I.A.No.804 of 2019', 'I.A.No.803 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When I.A.No.804 of 2019 for impleadment itself is not permissible, the question of granting ancillary relief in I.A.No.803 of 2019 does not arise and, therefore, the relief deserves to be denied. [/INST]
 {""CASE_NUMBER"": ""['I.A.No.804 of 2019', 'I.A.No.803 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.726994276046751
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['9th June 2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Fifth Schedule']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Provided that, the above reservation shall not be applicable to the posts reserved in favour of the Scheduled Tribes candidates in the Scheduled Areas of the State under the Fifth Schedule to the Constitution of India as per the notification issued on the 9th June 2014 in this behalf. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['9th June 2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Fifth Schedule']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",7.577982187271118
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pranay Sethi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Third and most importantly, it is unfair on part of the respondent insurer to contest grant of future prospects considering their submission before the High Court that such compensation ought not to be paid pending outcome of the Pranay Sethi (supra) reference. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pranay Sethi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.245258808135986
"{""CASE_NUMBER"": ""['CRP.No.191 of 2014']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['N.Laxmamma', 'Laxmaiah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondents to the revision are selfsame revision respondents in CRP.No.191 of 2014 supra besides one N.Laxmamma W/o. Laxmaiah. 2(a). [/INST]
 {""CASE_NUMBER"": ""['CRP.No.191 of 2014']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['N.Laxmamma', 'Laxmaiah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.026947975158691
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There are therefore legal formalities to be carried out for the constitution of a Welfare Board. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.90034818649292
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Income Tax v. M/s Maruti Suzuki (India) Ltd. (2014) 362 ITR 215.The']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The amended provision came to be considered by a Division Bench of the Delhi High Court in Commissioner of Income Tax v. M/s Maruti Suzuki (India) Ltd. (2014) 362 ITR 215.The [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Income Tax v. M/s Maruti Suzuki (India) Ltd. (2014) 362 ITR 215']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.307803630828856
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order VIII Rule 1', 'Rule 3 of Chapter-VI']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also noted that this Court and the Supreme Court has interpreted Order VIII Rule 1 of CPC and Rule 3 of Chapter-VI of Old Rules to mean the period of 90 days for filing the written statement is not mandatory and for good, valid and sufficient cause being shown, the time for filing written statement beyond 90 days can be extended. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order VIII Rule 1', 'Rule 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC', 'Old Rules']"", ""WITNESS"": ""[]""}",11.083682537078856
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He had seen the dead body from distance of about 6 - 7 steps which was a Skeleton without flesh which was seen by him in truck. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.834717273712158
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Hariram', 'Chhotelal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After 4-5 days, a further demand of Rs.5.000 was made by Hariram, which was paid by Chhotelal (2 Wi10)}. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Hariram', 'Chhotelal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.316437482833862
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Hydernagar Village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: From the above material, it is clear that third parties/pattedars were in long possession of land in Survey No.172 of Hydernagar Village. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Hydernagar Village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.990073204040527
"{""CASE_NUMBER"": ""['M.A.C.M.A. No.685 of 2006', 'O.P.No.493 of 1999']"", ""COURT"": ""['Motor Vehicle Accident Claims Tribunal-cum-V Additional District Judge, Vijayawada']"", ""DATE"": ""['18.1.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Accordingly, the appeal filed by the claimant in M.A.C.M.A. No.685 of 2006 is partly allowed, while setting aside and modifying the order and decree dated 18.1.2006 in O.P.No.493 of 1999 on the file of the Motor Vehicle Accident Claims Tribunal-cum-V Additional District Judge, Vijayawada [/INST]
 {""CASE_NUMBER"": ""['M.A.C.M.A. No.685 of 2006', 'O.P.No.493 of 1999']"", ""COURT"": ""['Motor Vehicle Accident Claims Tribunal-cum-V Additional District Judge, Vijayawada']"", ""DATE"": ""['18.1.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.857986450195312
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Acquisition Act, 1894']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The draft declaration under Section 6 of the Land Acquisition Act, 1894 was approved by the [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Acquisition Act, 1894']"", ""WITNESS"": ""[]""}",8.707919836044312
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 37']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A policy-oriented interpretation, when a welfare legislation falls for determination, especially in the context of a developing country, is sanctioned by principle and precedent and is implicit in Article 37 of the Constitution since the judicial branch is, in a sense, part of the State. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 37']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",7.045713663101196
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['AICTE', 'Bharathidasan University']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The next contention revolves around the role of the AICTE and the decision of the Supreme Court in Bharathidasan University. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['AICTE']"", ""OTHER_PERSON"": ""['Bharathidasan University']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.695193767547607
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagdish Prasad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This according to the learned senior counsel, has also been accepted by the Apex Court in Jagdish Prasad (supra). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagdish Prasad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.284643411636352
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gwalior']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If the respondents no. 3 and 5 were of the view that the petitioner is the same person against whom reward of Rs. 5000 has been declared by the S.P., Gwalior, then there was no impediment for arresting the petitioner formally. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gwalior']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.12510347366333
"{""CASE_NUMBER"": ""['W.A.No.755/2021']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sub Section 5 of Section 3', 'sub-section (1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Sub Section 5 of Section 3 stipulates that the State Government W.A.No.755/2021 & con. cases :: 81 :: shall, for applying the reservation under sub-section (1), by a notified order, issue a roster which shall be continuously applied till it is exhausted. [/INST]
 {""CASE_NUMBER"": ""['W.A.No.755/2021']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (1)', 'sub-section']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.082226991653442
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Court must carefully examine if false averments, evasive or false denials are introduced, in deciding a case, and insist that those who approach the Court must approach it with clean hands. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.904577493667602
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further assume that the claimant supplies the output Y having value of Rs. 3,000/- during the relevant period for which the refund is being claimed. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.494210720062256
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pranab']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Learned Counsel for Pranab argued that no mortgage was created in favour of Bank in respect of the said properties. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pranab']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.079293489456177
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kolkata']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nakul', 'Neha', 'Shruti', 'Ritu', 'Rajesh', 'Ashok Kumar Goenka']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: They were Nakul, Neha, Shruti, Ritu, Rajesh and Ashok Kumar Goenka, all living in Kamdhenu Building, 4A Ray Street, Kolkata - 700020. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kolkata']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nakul', 'Neha', 'Shruti', 'Ritu', 'Rajesh', 'Ashok Kumar Goenka']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.605816841125488
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['28.11.2007']"", ""GPE"": ""['New Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Citi Financial Consumer Finance (India) Ltd.', 'Tirupati Rice Mills Pvt. Ltd.']"", ""OTHER_PERSON"": ""['Vikas Garg', 'Nidhi Garg', 'Vinay Garg', 'Deepika Garg']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thereafter, on 28.11.2007 Vikas Garg, Nidhi Garg W/o Vikas Garg, Vinay Garg and Deepika Garg have taken a total loan of Rs.1,65,80,000/- through loan account nos. 14013241 and 14081767 (hereinafter referred to as the first loan) on an 11.5 % interest from a Non-Banking Financial company known as M/s Citi Financial Consumer Finance (India) Ltd. New Delhi, mentioning themselves to be the Directors of Tirupati Rice Mills Pvt. Ltd. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['28.11.2007']"", ""GPE"": ""['New Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Citi Financial Consumer Finance (India) Ltd.', 'Tirupati Rice Mills Pvt. Ltd.']"", ""OTHER_PERSON"": ""['Vikas Garg', 'Nidhi Garg', 'Vinay Garg', 'Deepika Garg']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.391424894332886
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ramjilal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: His field and field of Ramjilal are adjoining to each other with a common mud boundary. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ramjilal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.995477676391602
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26/11/2005']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['A.R.Infrastructure']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Satya Kumar Kasliwal']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The aforesaid statement falsified in the wake of statement of Satya Kumar Kasliwal (P.W.6) bank manager that the aforesaid pay orders were submitted for cancellation only on 26/11/2005 by A.R.Infrastructure and after cancellation, the amount has been credited in the account holder. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26/11/2005']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['A.R.Infrastructure']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Satya Kumar Kasliwal']""}",8.165831327438354
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Orissa v. Madan Gopal Rungta', 'Cotton Corporation of India v. United Industrial Bank Ltd', 'State of A.P. v. M/s.Maheswari Minerals']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (State of Orissa v. Madan Gopal Rungta ; Cotton Corporation of India v. United Industrial Bank Ltd ; The State of A.P. v. M/s.Maheswari Minerals ). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Orissa v. Madan Gopal Rungta', 'Cotton Corporation of India v. United Industrial Bank Ltd', 'The State of A.P. v. M/s.Maheswari Minerals']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.856770038604736
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['31.1.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The land-owning agency later submitted a revised proposal to the Authority in respect of plot No. 1 (out of the eight plots), vide communication dated 31.1.2020. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['31.1.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.547197341918945
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Rameshwar Pathak']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Report of the incident was lodged by (PW-5) Rameshwar Pathak. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rameshwar Pathak']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.201448678970337
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The writ applicant has paid 50% amount of arrears of tax to show his bonafide and also gave an undertaking to pay the remaining amount of tax after recording of transfer of ownership, as due to slowdown in the business, he could not be in a position to pay the full amount of tax, interest and penalty. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.374392986297607
"{""CASE_NUMBER"": ""['WP No. 2126 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Backward Class Commission']"", ""OTHER_PERSON"": ""['Patil']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 4(3)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We have also extensively heard Advocate Patil, counsel for petitioner in WP No. 2126 of 2018 who has posed a challenge to Section 4(3) of the Act and would submit that the Backward Class Commission cannot create a separate class. [/INST]
 {""CASE_NUMBER"": ""['WP No. 2126 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Patil']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 4(3)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.1601243019104
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Goa Vs. Babu Thomas']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Same is the conclusion from State of Goa Vs. Babu Thomas holding that when sanction is required from the act connected with the duty of the public servant, taking cognizance by a Court without sanction is incompetent and the error was so fundamental that invalidates the proceedings right from the stage of cognizance. 45(p). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Goa Vs. Babu Thomas']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.265844821929932
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Manoj Nai', 'Rohit', 'Amit', 'Anil', 'Pankaj', 'Raja']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Dharmender']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: PW2, wife of the deceased corroborated the testimony of PW1 while deposing that her son Dharmender (PW1) was caught hold by accused Manoj Nai, Rohit, Amit, Anil, Pankaj and Raja on the roof and they gave beatings to him. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dharmender', 'Manoj Nai', 'Rohit', 'Amit', 'Anil', 'Pankaj', 'Raja']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.351518154144289
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['DEMPL']"", ""OTHER_PERSON"": ""['Mukul Rohtagi', 'Arvind P. Datar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In fact, before us, the ex­Director of the company in liquidation was represented by Shri Mukul Rohtagi, learned senior counsel and DEMPL was represented by Shri Arvind P. Datar, learned senior counsel. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mukul Rohtagi', 'Arvind P. Datar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.050320386886597
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vithal Tukaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In support of their contention, reliance was placed upon the judgment in Vithal Tukaram. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vithal Tukaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.040721893310547
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Learned District Magistrate at Bhojpur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Allahabad Bank']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act 2002']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is further submitted that Allahabad Bank (Consortium Member) has also filed an Application under Section 14 of SARFAESI Act 2002 before the Learned District Magistrate at Bhojpur, which is pending. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['District Magistrate at Bhojpur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Allahabad Bank']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act 2002']"", ""WITNESS"": ""[]""}",9.837956190109251
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Tarachand', 'Mansingh']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The plaintiffs witnesses Tarachand (PW 2) and Mansingh (PW 3) further stated before the trial Court that after the sale deed was executed in their favour, their names have been recorded in the revenue records and they have deposited the property tax, the receipts were brought on record as Ex.P/12 to Ex.P/14 and the payment of water charges were brought on record as Ex.P/18. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Tarachand', 'Mansingh']""}",7.446484565734863
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reintegration into society by means of confident and assertive occupations leading to a sense of self-worth will have to be devised. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.915143728256226
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Deepak Mahajan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Customs Act', 'FERA']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble Supreme Court had relied on the judgment in Deepak Mahajan (supra) wherein the Hon'ble Supreme Court was confronted with the similar issue in the context of the Customs Act and the FERA. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Deepak Mahajan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Customs Act', 'FERA']"", ""WITNESS"": ""[]""}",8.01891279220581
"{""CASE_NUMBER"": ""['Claim Case No. 38/2009 and 39/2009']"", ""COURT"": ""['6 th Additional Motor Accident Claims Tribunal']"", ""DATE"": ""['05.01.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The certified copy of the award dated 05.01.2010 passed by 6 th Additional Motor Accident Claims Tribunal in Claim Case No. 38/2009 and 39/2009 have been marked as Annexure P-9. [/INST]
 {""CASE_NUMBER"": ""['Claim Case No. 38/2009 and 39/2009']"", ""COURT"": ""['6 th Additional Motor Accident Claims Tribunal']"", ""DATE"": ""['05.01.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.425306558609009
"{""CASE_NUMBER"": ""['W.P.(C) No. 17110 of 2020']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (3) of Section 105', 'Fourth Schedule']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['RFCTLARR Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: And whereas, sub-section (3) of Section 105 of the RFCTLARR Act provided for issuing of notification to make the provisions of the Act relating to, the determination of the compensation, rehabilitation and W.P.(C) No. 17110 of 2020 ::64:: resettlement applicable to cases of land acquisition under the enactments specified in the Fourth Schedule to the RFCTLARR Act; 60. [/INST]
 {""CASE_NUMBER"": ""['W.P.(C) No. 17110 of 2020']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (3) of Section 105', 'Fourth Schedule']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['RFCTLARR Act']"", ""WITNESS"": ""[]""}",10.53563928604126
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Satellite Town scheme for the land ad measuring 467 acres alone leaving out the remaining land. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.603801250457764
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22nd April 2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The first respondent was called upon to secure outstanding debt equivalent to Indian Rs.1,742,04,53,503.56 (Rupees One Thousand Seven Hundred Forty Two Crore Four Lakh Fifty Three Thousand Five Hundred and Three Rupees and Paise Fifty Six only) as on 22nd April 2020. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22nd April 2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.536961555480957
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 18']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: They did not seek reference under Section 18 of the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 18']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.896994352340698
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 2 to 88', 'Sections 147 to 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Finance Act, 2021', 'Income Tax Act, 1961']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There is also no power with the Executive/Respondents/Revenue to defer/postpone the implementation of Sections 2 to 88 of the Finance Act, 2021 which includes the substituted Sections 147 to 151 of the Income Tax Act, 1961. 43. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 2 to 88', 'Sections 147 to 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Finance Act, 2021', 'Income Tax Act, 1961']"", ""WITNESS"": ""[]""}",10.381385803222656
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble court has passed an order below the said affidavit at Exhibit-35 that ""The documentary evidences at mark-34/1 to 34/59 referred to in the affidavit be exhibited on the condition that the evidentiary value of the same shall be determined at the stage of final hearing."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.7204506397247314
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Petition(s) for Special Leave to Appeal (Crl.) [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.899437189102173
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Meghalaya SEB v. Jagadindra Arjun [(2001) 6 SCC 446 : 2001 SCC (L&S) 976]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, in absence of any rules or regulations governing the service conditions of its employees, issuance of administrative order is permissible in law vide Meghalaya SEB v. Jagadindra Arjun [(2001) 6 SCC 446 : 2001 SCC (L&S) 976] .” [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Meghalaya SEB v. Jagadindra Arjun [(2001) 6 SCC 446 : 2001 SCC (L&S) 976]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.136052370071411
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (1)', 'section 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (2) The provisions of sub-section (1) as to the issue of notice shall be subject to the provisions of section 151."" 12. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (1)', 'section 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.841768264770508
"{""CASE_NUMBER"": ""['Case No. 772/05']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Police Station Mohammadi, District Kheri']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 25(1)-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arms Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Case No. 772/05 under Section 25(1)-B Arms Act, Police Station Mohammadi, District Kheri (Ext. Kha-3) were also submitted by them. [/INST]
 {""CASE_NUMBER"": ""['Case No. 772/05']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kheri']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 25(1)-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arms Act']"", ""WITNESS"": ""[]""}",9.402421951293944
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['03.07.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""['U. DURGA PRASAD RAO']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: U. DURGA PRASAD RAO, J Date: 03.07.2018 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['03.07.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""['U. Durga Prasad Rao']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.853952646255493
"{""CASE_NUMBER"": ""['A.P. No.129 of 2010', 'A.P. No.776 of 2011', 'C.C. No.3 of 2008']"", ""COURT"": ""[]"", ""DATE"": ""['29th November, 2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rahul Maheshwari', 'Sheila Guha']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The said application was taken up along with two other applications being A.P. No.129 of 2010 and A.P. No.776 of 2011 and a contempt application being C.C. No.3 of 2008 all filed by Rahul Maheshwari against Sheila Guha and disposed of by a common judgment and order dated 29th November, 2011. [/INST]
 {""CASE_NUMBER"": ""['A.P. No.129 of 2010', 'A.P. No.776 of 2011', 'C.C. No.3 of 2008']"", ""COURT"": ""[]"", ""DATE"": ""['29th November, 2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rahul Maheshwari', 'Sheila Guha']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.12509822845459
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Directions were sought for in these writ petitions for the release of the vehicles. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.072954893112183
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Prasad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, the evidence of DW.3 is not a substitute for the evidence of Prasad. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Prasad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.713744401931763
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Haryana v. Jagdish and Harpal8']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ix) In State of Haryana v. Jagdish and Harpal8, a Three- Judge Bench of the Apex Court held that the case of the accused can be considered on the strength of the policy that was existing on the date of his conviction, and in case of liberal policy prevails on date of consideration of case of 'lifer' for premature release, he should be given benefit thereof. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Haryana v. Jagdish and Harpal8']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.393204689025879
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Wasia Naveed']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Though the bio-metric records of Dr.Wasia Naveed indicate that she was absent in the entire month of June 2018, her signatures are present in the attendance register of the same month. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Wasia Naveed']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.546650648117065
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['28.09.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has further deposed that on 28.09.2017, he sent report regarding seizure and arrest of accused to the ACP. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['28.09.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.943271636962891
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ministry of Information & Broadcasting']"", ""OTHER_PERSON"": ""['Sanjiv Datta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Articles 129 and 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble Supreme Court while considering the provisions of Articles 129 and 142 of the Constitution of India, in the case of Sanjiv Datta, Dy. Secy., Ministry of Information & Broadcasting, reported in (1995)3 SCC 619, has held at paragraphs 19 and 20 as under: 19. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sanjiv Datta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Articles 129 and 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",8.766525030136108
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The fees charged for granting a permission or privilege to a person to do something, either heavy or moderate, not on the basis of the costs incurred by the Government, but upon the benefit that the individual receives, cannot but be regarded as a Tax. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.534657955169678
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['District Court, Nagpur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Highways Authority']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 34']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The National Highways Authority being aggrieved by the enhancement granted by the Arbitrator approached the District Court, Nagpur by filing proceedings under Section 34 of the Act of 1996. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['District Court, Nagpur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Highways Authority']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 34']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['National Highways Authority Act of 1996']"", ""WITNESS"": ""[]""}",8.55601716041565
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['04/09/2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, without there being any enabling provision in this regard in the rules of 1983, the impugned order specially clause 3 of Government order dated 04/09/2020 is without jurisdiction, illegal and arbitrary. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['04/09/2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.552255630493164
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 67']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Kerala Court Fees and Suits Valuation Act, 1959']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The learned counsel has also drawn the attention of this Court to Section 67 of the Kerala Court Fees and Suits Valuation Act, 1959. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 67']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Kerala Court Fees and Suits Valuation Act, 1959']"", ""WITNESS"": ""[]""}",7.950172424316406
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.01.2002']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The cadre controlling authority, considering the seniority list prepared by the committee circulated a tentative seniority list as on 01.01.2002 calling for objections. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.01.2002']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.538270473480225
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['02.09.2019', '13.10.2020']"", ""GPE"": ""['Prayagraj']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Securitisation and Reconstruction of Financial Assets and Enforcement of Securities Interest Act, 2002', 'SARFAESI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Petitioners have filed the present writ petition praying to quash the order dated 02.09.2019 under Section 14 of The Securitisation and Reconstruction of Financial Assets and Enforcement of Securities Interest Act, 2002 (the SARFAESI Act) passed by the District Magistrate, Prayagraj and the consequential letter dated 13.10.2020 issued by the Additional District Magistrate (II), Prayagraj. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['District Magistrate, Prayagraj', 'Additional District Magistrate (II), Prayagraj']"", ""DATE"": ""['02.09.2019', '13.10.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act', 'SARFAESI Act']"", ""WITNESS"": ""[]""}",11.196579217910768
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A finding was also recorded by that Court that the bus that was seized was found to be a ""66 seater"", whereas the bus bearing registration no.PUV-9440 was a ""61 seater"". 9 of 16 22. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.201690435409546
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Andhra Pradesh']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner has been rightly allocated to the State of Andhra Pradesh as per the study details of the petitioner as her local status is the State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.536030054092407
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['July 21, 2014', '11.06.1025']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Telecom Regulatory Authority of India (TRAI)', 'Telecom Commission (TC)', 'Central Government']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that Telecom Regulatory Authority of India (TRAI) made recommendations on ‘Guidelines on Spectrum Sharing’ on July 21, 2014, which was considered and approved by the Telecom Commission (TC) in its meeting held on 11.06.1025 and subsequently approved by the Central Government. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['July 21, 2014', '11.06.1025']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Telecom Regulatory Authority of India (TRAI)', 'Telecom Commission (TC)', 'Central Government']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.968626976013184
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.07.2006']"", ""GPE"": ""['UTTAR PRADESH', 'ALLAHABAD', 'Allahabad', 'Rosa', 'Shahjhanpur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['McDowell & Company Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: OFFICE OF EXCISE COMMISSIONER, UTTAR PRADESH, ALLAHABAD No. 7244/9-Alcohol/131/Rosa/Fire Incident Allahabad Dated – 11.07.2006 ORDER M/s McDowell & Company Ltd., Rosa, District Shahjhanpur is a PD-2 Licensed distillery. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.07.2006']"", ""GPE"": ""['Rosa', 'Shahjhanpur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['McDowell & Company Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.741107702255247
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Flipkart', 'Amazon']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Flipkart itself held more than 53 % of the market shares in the relevant market in the first quarter of 2019 and Amazon held 36% of the market shares in the relevant market in the first quarter of 2019. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Flipkart', 'Amazon']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.423637866973877
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The assessee in this case had been procuring raw-materials from different manufacturers and out of such materials, they had been producing car mattings and other mattings as well, such as bath mats, telephone mats, floor foot mats etc. with the aid of power operated machines. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.979585647583008
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['MoHUA']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The minutes of the meeting read thus: “Item No.18/2020 Regarding proposed change of land use of Plot Nos.1,2,3,4,5,6,7 and 8.F.20(12)2019/MP a) The proposal was presented by Joint Secretary (L&E), MoHUA, In-charge of Central Vista Development/Redevelopment Project, who was present as Special Invitee. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['MoHUA']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.927737951278687
"{""CASE_NUMBER"": ""['No. 369/1986', 'C/CA/305/2019 JUDGMENT']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Banwari Lal', 'Swaraj']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Balbir Singh']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Respondent-Balbir Singh filed a suit bearing No. 369/1986 against one Banwari Lal and Swaraj for declaration and Page 25 C/CA/305/2019 JUDGMENT permanent injunction. [/INST]
 {""CASE_NUMBER"": ""['369/1986']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Banwari Lal', 'Swaraj']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['C/CA/305/2019']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.86774206161499
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The fact regarding demand of Rs. 5 lakhs was also told by her husband to her. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.6636643409729
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24th March, 2007']"", ""GPE"": ""['Nagapur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He deposed that on 24th March, 2007 Head Constable on Station Diary duty informed him on phone that at Nagapur Shivar dacoits had come and killed a woman. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24th March, 2007']"", ""GPE"": ""['Nagapur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.790382623672485
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, the complaint of facts should disclose absence of reasonable excuse to the limited extent the Official Liquidator, by exercising due diligence, can ascertain such facts. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.865198373794556
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench', 'Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Soni Vallabhdas Liladhar and another v. The Assistant Collector of Customs, Jamnagar, AIR 1965 SC 481']"", ""PROVISION"": ""['Section 25']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Evidence Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Soni Vallabhdas Liladhar and another v. The Assistant Collector of Customs, Jamnagar, AIR 1965 SC 481, a Constitution Bench of the Supreme Court held that the Customs Officers are not police officers and the statements made to them were not inadmissible under Section 25 of the Indian Evidence Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Soni Vallabhdas Liladhar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Jamnagar']"", ""PROVISION"": ""['Section 25']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Evidence Act']"", ""WITNESS"": ""[]""}",9.691636800765991
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The documents sent with show cause notice were never required to be sent as per above mentioned Act and Rules. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.205839157104492
"{""CASE_NUMBER"": ""['Special Civil Application No. 8894 of 2013']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: | further say and submit that what were actually the arguments of the learned Advocate for the applicants in Special Civil Application No. 8894 of 2013 have been deviously portrayed as the observations of this Court only with a view to create a false merit in the captioned application. [/INST]
 {""CASE_NUMBER"": ""['Special Civil Application No. 8894 of 2013']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.200008630752563
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Andhra Pradesh', 'Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She has rightly been allocated to the State of Andhra Pradesh, keeping in view the executive instructions issued by the Government of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.045093536376953
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 433A.']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The case of the petitioners is that Parliament has broken the law of the Constitution by enacting Section 433A."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 433A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",7.7570641040802
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Deepak Kapoor', 'Shivam']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Vishal Verma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At about 11:30 p.m., Deepak Kapoor called PW-19/Vishal Verma and inquired about the whereabouts of Shivam. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Deepak Kapoor', 'Shivam']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Vishal Verma']""}",8.652647018432617
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['GKN (83 of 113) [CW-969/2022] Driveshafts (India) Ltd. Vs. Income-tax Officer, (2003) 259 ITR 19 (SC)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As is well known the Supreme Court in case of GKN (83 of 113) [CW-969/2022] Driveshafts (India) Ltd. Vs. Income-tax Officer, (2003) 259 ITR 19 (SC), had introduced a requirement of the Assessing Officer providing reasons recorded for issuing notice for reopening of assessment upon being demanded by the assessee and to consider and dispose of his objections to the notice for reopening, if so raised. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['GKN (83 of 113) [CW-969/2022] Driveshafts (India) Ltd. Vs. Income-tax Officer']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.570842266082764
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court of Delhi']"", ""DATE"": ""['1st April, 2019', '31.05.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India', 'Ministry of Mines', 'Central Bureau of Investigation']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Leave to place on record the communication dated 1st April, 2019 by the Government of India, Ministry of Mines addressed to the Director, Central Bureau of Investigation as well as the impugned order dated 31.05.2019 passed by the High Court of Delhi by which the High Court has stayed the communication dated 1st April, 2019. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court of Delhi']"", ""DATE"": ""['1st April, 2019', '31.05.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India', 'Central Bureau of Investigation']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.43528938293457
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The standard of proof beyond reasonable doubt could not have been applied. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.799900531768799
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 143']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India26']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (In Reference, under Article 143, of the Constitution of India26). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 143']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",8.284023761749268
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26.07.1972']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shankar Shinde']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Obviously, all the legal action were started in the year 1980 by the present plaintiffs based upon a receipt-Ex.P-69 dated 26.07.1972 under which an amount of Rs.800/- is said to have been paid to Shankar Shinde. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26.07.1972']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shankar Shinde']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.260106563568115
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Given under my hand and seal of the court this day of 2022. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.492250680923462
"{""CASE_NUMBER"": ""['I.A. No. 5/2014', 'Civil Appeal No. 2878 of 2014']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As noted above in paras 6.7 & 6.8 (supra), the appellant vide its application bearing I.A. No. 5/2014 in its Civil Appeal No. 2878 of 2014 sought similar directions to the respondent to refund an amount of Rs.90 lacs with 12% interest. [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No. 2878 of 2014', 'I.A. No. 5/2014']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.649112701416016
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(1)(e)', 'Section 20']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In our opinion, the pro- vision in Section 2(1)(e) has to be construed keeping in view the provisions in Section 20 which give recog- nition to party autonomy. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(1)(e)', 'Section 20']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.697470188140869
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Price Water House Cooper', 'Deloitte Haskins & Sells']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: According to the petitioner­firm, the firms like M/s Price Water House Cooper, Deloitte Haskins & Sells, etc. who are having global presence in various countries were transferring foreign currencies into their firms/member firms registered in India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Price Water House Cooper', 'Deloitte Haskins & Sells']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.365599870681764
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Dasarahalli', 'Byrathikhane', 'Chellakere', 'Geddalahalli', 'K.Narayanapura', 'Rachenahalli', 'thanisandra', 'Amaruthahalli', 'Jakkur', 'Kempapura', 'Sampigehalli', 'Srirampura', 'Venkateshapura', 'Hennur', 'Hebbala', 'Nagavara']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BDA']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Under the said notifications, the BDA proposed to acquire 3839 acres & 12 guntas of land situate in 16 villages namely Dasarahalli, Byrathikhane, Chellakere, Geddalahalli, K.Narayanapura, Rachenahalli, thanisandra, Amaruthahalli, Jakkur, Kempapura, Sampigehalli, Srirampura, Venkateshapura, Hennur, Hebbala and Nagavara, for the formation of Arkavathi Layout. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Dasarahalli', 'Byrathikhane', 'Chellakere', 'Geddalahalli', 'K.Narayanapura', 'Rachenahalli', 'thanisandra', 'Amaruthahalli', 'Jakkur', 'Kempapura', 'Sampigehalli', 'Srirampura', 'Venkateshapura', 'Hennur', 'Hebbala', 'Nagavara']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BDA']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",14.049345254898071
"{""CASE_NUMBER"": ""['SLP No.20691/1994']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['18.09.1995']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Special Leave Petition, being SLP No.20691/1994, filed against that judgment was also dismissed by the Apex Court vide judgment dated 18.09.1995. [/INST]
 {""CASE_NUMBER"": ""['SLP No.20691/1994']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['18.09.1995']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.962682247161865
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.08.2016', '23.08.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was further undertaken that the interest of Rs.3.3 Crores from 01.08.2016 would be paid at the contractual rate till the date of payment and 8% interest on Rs.63,32,500/- would also be deposited by 23.08.2016. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.08.2016', '23.08.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.42799949645996
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['2019(1) PLJR 628 (SC)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The aforesaid judgment rendered by the learned Division Bench of this Court in the case of Khas Mahal Citizen Welfare Society (supra) has also been upheld by a judgment rendered by the Hon'ble Apex Court, reported in 2019(1) PLJR 628 (SC). 7. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Khas Mahal Citizen Welfare Society (supra)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.941829204559326
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order VII Rule 11']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure, 1908 (CPC)']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This application filed by the defendant no. 3, is for dismissal of the suit and rejection of the plaint under Order VII Rule 11 of The Code of Civil Procedure, 1908 (CPC) on the ground that the suit is barred by law. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order VII Rule 11']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure, 1908 (CPC)']"", ""WITNESS"": ""[]""}",9.546098709106444
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sub\\xadsection (8) of Section 100', 'Section 187']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C', 'IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Sub­section (8) of Section 100 Cr.P.C clearly spells out that if a public witness refuses or neglects to attend a search without reasonable cause in spite of an order in writing, he shall be deemed to have committed an offence under Section 187 IPC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub\\bsection\\b (8) of Section 100', 'Section 187']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C', 'IPC']"", ""WITNESS"": ""[]""}",9.543112754821776
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['O. Konavalov vs. Commander, Coast Guard Region and Ors']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the case of O. Konavalov vs. Commander, Coast Guard Region and Ors.: (supra), the Supreme Court observed thus: ""POWER TO CONFISCATE 30. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['O. Konavalov']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.077293872833252
"{""CASE_NUMBER"": ""['RFA 10&17/20']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order 23 Rule1(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In RFA 10&17/20 such circumstances, I fail to understand how the appellants can assert a contention of non- maintainability against the present suit, under the provisions of Order 23 Rule1(4) of the CPC; and am, consequently, without doubt that these contentions are without merit. [/INST]
 {""CASE_NUMBER"": ""['RFA 10&17/20']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order 23 Rule1(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC']"", ""WITNESS"": ""[]""}",9.625345706939695
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 3(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Enabling Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence, no time extension could ever be made under section 3(1) of the Enabling Act, read with the Notifications issued thereunder. 68. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 3(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.22512674331665
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Khagadia', 'Bihar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sumitra Devi Poddar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In such an event, the logical conclusion cannot be drawn that the mother of the defendant would possibly have been ordinarily residing with her mother who had a separate residential premises elsewhere and further that the deceased tenant Sumitra Devi Poddar died not in the suit premise but at Khagadia, Bihar, as would be borne out from Exhibit 1. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Khagadia', 'Bihar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sumitra Devi Poddar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.229487657546995
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Satyanarayana Reddy', 'Ramachandra Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This Court, on an examination of all the facts, which are highlighted by the counsels, notices that OP filed in 1980 against Satyanarayana Reddy with a wrong surname and one Ramachandra Rao is allowed to be decreed in 1989 on the very same day that a written statement is filed admitting the suit claim. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Satyanarayana Reddy', 'Ramachandra Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.856144189834595
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Sarwarlal Vs. State of Hyderabad31']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The challenge to these Regulations was rejected by the Supreme Court in Sarwarlal Vs. State of Hyderabad31. 243. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sarwarlal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.760596513748169
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['R.V. Raveendran']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pushpa Devi Bhagat (Dead) Through LR. Sadhna Rai (Smt.) Vs. Rajinder Singh and Ors., (2006) 5 SCC 566']"", ""PROVISION"": ""['Order XXIII Rule 3 and Rule 3A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The next judgment to be noted is Pushpa Devi Bhagat (Dead) Through LR. Sadhna Rai (Smt.) Vs. Rajinder Singh and Ors., (2006) 5 SCC 566, Justice R.V. Raveendran speaking for the Court noted the provisions of Order XXIII Rule 3 and Rule 3A and recorded his conclusions in paragraph 17 in following words:­ “17. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['R.V. Raveendran']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pushpa Devi Bhagat', 'Sadhna Rai']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Rajinder Singh']"", ""PROVISION"": ""['Order XXIII Rule 3', 'Rule 3A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.075267553329468
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was for the SPS_3of1998.odt plaintiff to establish the same by leading evidence. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.555320739746094
"{""CASE_NUMBER"": ""['W.P. No.25434 of 2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Ibrahimpatnam', 'Vijayawada']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ayesha Meera']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioners in W.P. No.25434 of 2017 are the parents of Miss. Ayesha Meera, a student of B. Pharmacy, who was, during the relevant period, staying in Sree Durga Ladies Hostel, Ibrahimpatnam, Vijayawada. [/INST]
 {""CASE_NUMBER"": ""['W.P. No.25434']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Ibrahimpatnam', 'Vijayawada']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Sree Durga Ladies Hostel']"", ""OTHER_PERSON"": ""['Ayesha Meera']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.49828004837036
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Manoj Narula v Union of India']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: What the decision in the case of Manoj Narula v Union of India says, speaking through a fve judge Bench of the Hon'ble Supreme Court, is eloquent enough. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Manoj Narula']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.241954326629639
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Probably, after marking the entire resolution book, it might have been returned to the trust on production of certified copies of relevant pages containing resolutions of the trust. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.141182661056519
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 148', 'Section 147']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per Section 148 of the Act before making any such assessment, reassessment or recomputation under Section 147 the Assessing Officer has to serve a notice on the assessee requiring him to furnish the return of his income. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 148', 'Section 147']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.659712553024292
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Punjab v. Devans Modern Breweries Ltd., reported in (2004) 11 SCC 26']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Law cannot afford to be static and therefore, Judges are to employ an intelligent technique in the use of precedents."" (iv) In State of Punjab v. Devans Modern Breweries Ltd., reported in (2004) 11 SCC 26, the Hon'ble Supreme Court explained the doctrine of precedents as thus: ""334. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Punjab v. Devans Modern Breweries Ltd.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.33076000213623
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Jaipur Metals']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He argued that Jaipur Metals (supra) makes it clear that even independent proceedings under the Code can only continue when the stage is before a winding up order is passed, which was the case on the facts before the Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Jaipur Metals']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.31666111946106
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Karnataka Housing Board']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble Supreme Court in the case of Commissioner., Karnataka Housing Board (supra) opined that in appropriate cases denial of full backwages would amount to permitting the employer to take advantage of his own wrongs. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Karnataka Housing Board']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.004795789718628
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['29.10.2014', '30.10.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India', 'State of Andhra Pradesh']"", ""OTHER_PERSON"": ""['Burugula Ravi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 77']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Reorganisation Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner before this Court, Dr. Burugula Ravi, who is serving on the post of Civil Assistant Surgeon, has challenged the constitutional validity of the executive instructions, dated 29.10.2014 issued by the Government of India in exercise of powers conferred under Section 77 of the Reorganisation Act, which was re-issued by the State of Andhra Pradesh on 30.10.2014. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['29.10.2014', '30.10.2014']"", ""GPE"": ""['Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Burugula Ravi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 77']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Reorganisation Act']"", ""WITNESS"": ""[]""}",10.393685817718506
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CS No.3462/2016 PAGE NO. 28/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For such person the signature of the defendant was in the nature of a photograph CS No.3462/2016 PAGE NO. 28/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS which was to be copied and not something having any meaning. [/INST]
 {""CASE_NUMBER"": ""['CS No.3462/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.L. GARG', 'N.D. GROVER']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.074052333831789
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 243T', 'Part IXA']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Article 243T of the Constitution of India included in Part IXA, provides for reservation of seats. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 243T']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",8.980115175247192
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Rent Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The landlord in the eviction petition filed under Section 13-B of the Rent Act had placed reliance upon US passport issued to him in the year 2006. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Rent Act']"", ""WITNESS"": ""[]""}",7.489429235458374
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Raj Kumar @ Raja', 'Pankaj']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 27']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arms Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Appellants Raj Kumar @ Raja and Pankaj have also been convicted for the offence punishable under Section 27 of the Arms Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Raja', 'Pankaj']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 27']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arms Act']"", ""WITNESS"": ""[]""}",9.1471688747406
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Vijendra Singh Vs. State of U.P. reported in (2017) 11 SCC 129']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Supreme Court in the case of Vijendra Singh Vs. State of U.P. reported in (2017) 11 SCC 129 has held [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Vijendra Singh Vs. State of U.P. reported in (2017) 11 SCC 129']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.3045494556427
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dana Yadav @ Dahu']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Dana Yadav @ Dahu (Supra) relied upon by the State, the Supreme Court carved out certain exceptions to the ordinary rule that identification of an accused for the first time in court is a weak type of evidence. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dana Yadav @ Dahu']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.597638607025146
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Rajinder Kumar Chopra']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: PW-3, Rajinder Kumar Chopra was travelling in the Indigo at the time of the accident and the FIR was registered on his statement. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Rajinder Kumar Chopra']""}",7.952102184295654
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['05.10.2018', '31.05.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Based on the CAT order, the applicant made a representation dated 05.10.2018 requesting to cancel the order dated 31.05.2016. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['05.10.2018', '31.05.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.768307447433472
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Chapter VIII']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Chapter VIII of the Act deals with the procedure and powers of theses Special Courts and the procedure for recording evidence of the child victim. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.764910221099853
"{""CASE_NUMBER"": ""['Crime No. 80 of 2014']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['MIDC Latur Police Station, Latur, Maharashtra']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The appellant herein is accused No. 5 in Crime No. 80 of 2014 of MIDC Latur Police Station, Latur, Maharashtra. [/INST]
 {""CASE_NUMBER"": ""['Crime No. 80']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Latur', 'Maharashtra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.227766036987305
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['2021 SCC Online SC 788', 'Triyambak S. Hegde Vs. Sripad', 'Kaushalya Devi Massand Vs. Roopkishore reported in AIR 2011 SC 2566']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble Supreme Court in a decision reported in 2021 SCC Online SC 788 in the case of Triyambak S. Hegde Vs. Sripad has referred the decision of Kaushalya Devi Massand Vs. Roopkishore reported in AIR 2011 SC 2566 and has held that it is not like IPC cases wherein the sentence of imprisonment is called. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Triyambak S. Hegde', 'Sripad', 'Kaushalya Devi Massand', 'Roopkishore']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Triyambak S. Hegde Vs. Sripad', 'Kaushalya Devi Massand Vs. Roopkishore', 'AIR 2011 SC 2566']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.42832374572754
"{""CASE_NUMBER"": ""['Crl.Appeal No.1357 of 2019', 'Crl.Appeal (V) No.33 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['13.01.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is pertinent to note that the death in this case had Crl.Appeal No.1357 of 2019 & Crl.Appeal (V) No.33 of 2019 occurred on 13.01.2017. [/INST]
 {""CASE_NUMBER"": ""['Crl.Appeal No.1357 of 2019', 'Crl.Appeal (V) No.33 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['13.01.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.9419105052948
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['29.04.2018']"", ""GPE"": ""['Bhopal']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Police Sation, Goutam Nagar']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thereafter, the police received the information and registered the Marg No. 0/2018 on 29.04.2018 at Police Sation, Goutam Nagar, Bhopal. [/INST]
 {""CASE_NUMBER"": ""['Marg No. 0/2018']"", ""COURT"": ""[]"", ""DATE"": ""['29.04.2018']"", ""GPE"": ""['Bhopal']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Police Sation, Goutam Nagar']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.23857879638672
"{""CASE_NUMBER"": ""['CWJC No.2502 of 1988']"", ""COURT"": ""['Patna High Court', 'Supreme Court']"", ""DATE"": ""['dt.02-09-2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Patna High Court CWJC No.2502 of 1988 dt.02-09-2019 Challenge before the Hon'ble Supreme Court [/INST]
 {""CASE_NUMBER"": ""['CWJC No.2502']"", ""COURT"": ""['Patna High Court', 'Supreme Court']"", ""DATE"": ""['02-09-2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.042666673660278
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 21']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: So far as offence under Section 21 of the Act 1957 is concerned , it is for the authorized person to file a complaint after investigation before the magistrate concerned,upon which cognizance can be taken by the magistrate concerned. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 21']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.624757528305054
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The trial Court was therefore in error in concluding that continuing with the suit proceedings for passing procedural orders would not be violative of the moratorium order passed under Section 14 of the Code of 2016. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of 2016']"", ""WITNESS"": ""[]""}",8.30931043624878
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Aghore Nath Dey', 'Suraj Prakash Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Clearly in two judgments (Aghore Nath Dey and Suraj Prakash Gupta) the promotions were made in disregard of the rules; even in excess of their quota, and against direct recruit quota. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Aghore Nath Dey', 'Suraj Prakash Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.852569103240967
"{""CASE_NUMBER"": ""['W.P. No.27105 of 2016', 'W.P. Nos.20421 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['19.12.2016', '17.02.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: vii) This Court vide order dated 19.12.2016 in W.P. No.27105 of 2016 while considering the submission of life-convict that he has completed 18 years of actual sentence including remand period and 24 years of a total sentence including remission is entitled and eligible KL,J W.P. Nos.20421 of 2019 & batch for premature release and since he has completed 19 years including remission in terms of G.O.Ms.No.16, dated 17.02.2016. [/INST]
 {""CASE_NUMBER"": ""['W.P. No.27105 of 2016', 'W.P. Nos.20421 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['19.12.2016', '17.02.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['KL']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['G.O.Ms.No.16']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.70832085609436
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Firstly, as to whether the sale consideration was not paid of which the burden of proof rested upon the plaintiff and secondly, whether the appellants-defendants were entitled to the return of the sale consideration which according to them was Rs. 10,000/-. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.243422031402588
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: No case for interference is made out by the petitioner in the matter of allocation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.847185850143433
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Part III']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On account of a Chapter on Fundamental Rights in Part III of our Constitution right from 1950, Indian Courts did not suffer from the disability similar to the one experienced by English Courts for declaring as unconstitutional legislation on the principle of proportionality or reading them in a manner consistent with the charter of rights. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Part III']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",8.790225505828857
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: They bear within them a shining beauty and a heavenly light. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.774892091751099
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Jaipur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He deposed that at about 6.00 to 6.30 p.m. a motorcyclist moving towards Jaipur and at that time, a pick-up van came from behind and hit the motorcyclist. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Jaipur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.426479816436768
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302/34 & 148']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Learned trial court had found that the offence punishable under Sections 302/34 & 148 IPC is proved to the hilt , hence they were convicted for life imprisonment with a fine of Rs.15,000/- and three years rigorous imprisonment and both the sentences were directed to run concurrently and in case of default, further simple imprisonment of six months. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302/34 & 148']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",8.272615909576416
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: That, in regard to paragraph-13 and 14 of the Advocates Commission report, it is submitted that the demand to create the post of Safai Karmachari and Ward Boys has been sent to the State Government. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.790347099304199
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Supreme Court Legal Services Committee']"", ""OTHER_PERSON"": ""['Manjeet Chawla']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Accordingly Mrs. Manjeet Chawla, Advocate, has been nominated by the Supreme Court Legal Services Committee as amicus to contest the appeal on behalf of the respondent-accused. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Manjeet Chawla']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.937881231307983
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Division Bench dismissed those writ appeals, subject to the observations as made above regarding opening of new branches/offices. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.827873468399048
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Maharashtra']"", ""OTHER_PERSON"": ""['Katneshwarkar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Taking note of the above suggestion, we asked Mr. Katneshwarkar, learned counsel for the State of Maharashtra, as to what steps were taken by the State for reformation and rehabilitation of the prisoners. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Maharashtra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Katneshwarkar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.227175235748291
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['TADA Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Magistrate is not expected to take the position of a superior postman in the sense, receive the confessional statements and forward the same to the TADA Court by putting them in another envelope. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.522866725921631
"{""CASE_NUMBER"": ""['Motor Accident Claim Petition No. 232 of 2009']"", ""COURT"": ""['Motor Accident Claims Tribunal/Additional District Judge, Court no. 6, Sultanpur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Motor Accident Claim Petition No. 232 of 2009 was filed by the wife of the deceased, two minor children and his parents before the Motor Accident Claims Tribunal/Additional District Judge, Court no. 6, Sultanpur. [/INST]
 {""CASE_NUMBER"": ""['Motor Accident Claim Petition No. 232 of 2009']"", ""COURT"": ""['Motor Accident Claims Tribunal/Additional District Judge, Court no. 6, Sultanpur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.029026985168455
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The prayer was granted as prayed for. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.911717176437378
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['1 st February 2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Union of India vs. K. A. Najeeb [Criminal Appeal No.98 of 2021']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We should look into the order passed by the Hon'ble Supreme Court in the case of the Union of India vs. K. A. Najeeb [Criminal Appeal No.98 of 2021 decided on 1 st February 2021]. [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No.98 of 2021']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['1st February 2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['K. A. Najeeb']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.298738479614258
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Anantapur', 'Chennampalli', 'Bukkarayasamudram']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The witness admitted that to reach Anantapur from Chennampalli cross, they have to pass through Bukkarayasamudram where there was a Police Station as well as a Government Hospital. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Anantapur', 'Chennampalli', 'Bukkarayasamudram']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.225687742233276
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24-9-1984']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Act 68 of 1984']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Consequently, therefore, it would apply to all acquisitions made subsequent to 24-9-1984, the date on which Act 68 of 1984 came into force. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24-9-1984']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Act 68 of 1984']"", ""WITNESS"": ""[]""}",9.452204704284668
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 148']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Amendment Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Undisputedly, the concession of suspension of sentence was granted to the petitioner(s) subject to the valid pre-condition for deposit of 25% amount of compensation in terms of Section 148 of the Amendment Act and in the eventuality of breach of the same [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 148']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.766675710678101
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He also observed that the decision whether or not the continued treatment and care of a PVS patient confers any benefit on him is essentially one for the practitioners in charge. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.465884685516357
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, if he is required in any other case, then it is entirely a different matter. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.058637380599976
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kapada']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If he had participated in the alleged marriage under duress, then he could have filed complaint at Kapada where he having regular place of resident. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kapada']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.010005950927734
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This was in addition to the reservation of 15% and 3% for Scheduled Caste and Scheduled Tribe respectivelyd and result of the order was 68% of the seats available for admission to engineering and medical colleges came to be reserved, leaving only 32% seats available to the merit pool. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.408112049102783
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gadhva', 'Mau-Gurdari']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The road which leads from village Gadhva to Mau-Gurdari, the same crosses the river, from there the place where they had gone for nature's call, must have been about .750 meter towards east where they had sat for defecating; the same place must have been four to five paces away from Bardaha river. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gadhva', 'Mau-Gurdari']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.571482181549072
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.01.1955']"", ""GPE"": ""['Hafeezpet Village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Muneerunnisa Begum']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the instant case, in our opinion, Smt. Muneerunnisa Begum had no title to Ac.140.00 in Sy.No.80 of Hafeezpet Village as on 01.01.1955 when she allegedly executed the wakfnama endowing this land as Wakf property. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.01.1955']"", ""GPE"": ""['Hafeezpet Village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Muneerunnisa Begum']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.288948059082031
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Murarilal v. State of M.P.; 1980 AIR (SC) 531', 'Alamgir v. State (NCT, Delhi); 2003 AIR (SC) 282', 'Ravichandran v. State by Dy. Superintendent of Police, Madras; 2010 AIR (SC) 1922']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: [Ref. Murarilal v. State of M.P.; 1980 AIR (SC) 531, Alamgir v. State (NCT, Delhi); 2003 AIR (SC) 282 and Ravichandran v. State by Dy. Superintendent of Police, Madras; 2010 AIR (SC) 1922]. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['SC']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Murarilal', 'Alamgir', 'Ravichandran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.418681621551514
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 427']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The discretion under Section 427 of the Code can also be exercised at the stage when the court records the subsequent conviction. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 427']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.504827976226807
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 43 (5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To summarise the conclusions: (i) The challenge to the constitutional validity of the proviso to Section 43 (5) of the Act is rejected. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 43 (5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.380048751831055
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Dilution on the Constitutional Principles would result in disaster consequences. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.358693838119507
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ashwani Kumar Singh Vs. U.P.Public Service sh Commission and others-(2003) 11 SCC-584', 'Bhavnagar University Vs. Palitana Sugar Mill (P) ad Ltd. and others-(2003) 2 SCC-111', 'Indian Pr Performing Rights Society Ltd. Vs. Sanjay Dalia and another-(2015)10 SCC-161', 'Vishal N.Kalsaria Vs. a Bank of India and others-(2016) 3 SCC-762']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: {See: Ashwani Kumar Singh Vs. U.P.Public Service sh Commission and others-(2003) 11 SCC-584, e Bhavnagar University Vs. Palitana Sugar Mill (P) ad Ltd. and others-(2003) 2 SCC-111, Indian Pr Performing Rights Society Ltd. Vs. Sanjay Dalia and another-(2015)10 SCC-161, Vishal N.Kalsaria Vs. a Bank of India and others-(2016) 3 SCC-762}. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ashwani Kumar Singh', 'Bhavnagar University', 'Indian Pr Performing Rights Society Ltd.', 'Sanjay Dalia', 'Vishal N.Kalsaria']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Vishal N.Kalsaria Vs. a Bank of India and others-(2016) 3 SCC-762']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.81999397277832
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Nagar Properties']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: That this transaction has been finalised with efforts of M/s. Nagar Properties who shall be entitled to get the commission @1% from each party on the total amount of this transaction and the default party will pay the commission @_% to the said dealer. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['M/s. Nagar Properties']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.081740379333496
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['South Africa']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SAPS']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In South Africa, prior to 1994, the SAPS followed an 8- hour shift pattern, consisting of three shifts (0600-1400 hours, 1400-2200 hours, 2200-0600 hours) in various cycles. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['South Africa']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SAPS']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.213610172271729
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14-10-1979']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pati Ram', 'Maharaj Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mani Ram']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: According to PW 1 Mani Ram he was working at the 'Rabat' along with his brother Pati Ram deceased, on 14-10-1979 at about 12 noon when he heard the shouts of Maharaj Singh and other children. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14-10-1979']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Maharaj Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Pati Ram']""}",8.685132026672363
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['15.09.2014', '29.10.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Forest and Environment Department']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Similarly, for daily wagers in Forest and Environment Department, GR dated 15.09.2014 was issued, which was in consonance with the directions of the Supreme Court for giving benefits to the daily wagers of Forest and Environment Department wherein cut off date prescribed was 29.10.2010. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['15.09.2014', '29.10.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Forest and Environment Department']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.220829725265505
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 5(3) (iii)(a)', 'Section 29A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Gujarat Provincial Municipal Corporation Act, 1949']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The writ petition was filed by the appellant herein challenging the vires of Section 5(3) (iii)(a) and Section 29A of the Gujarat Provincial Municipal Corporation Act, 1949 (hereinafter referred to as “Act, 1949”) and other statutory provisions including Rules framed thereunder and the notifications. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 5(3) (iii)(a) and Section 29A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Gujarat Provincial Municipal Corporation Act, 1949']"", ""WITNESS"": ""[]""}",8.722529411315918
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ismail Faruqui']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The questionable observations made in Ismail Faruqui's case have to be treated as only observations and not for the purpose of deciding suits and these appeals, they are not to be treated as governing factor or relevant. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ismail Faruqui']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.568406820297241
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bhampur', 'Sirsa']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This property is the 9 acre of land in the Village Bhampur, Rania Road, Sirsa. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bhampur', 'Rania Road', 'Sirsa']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.873272657394409
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['10.09.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioners allege that they were not aware about the exparte impugned award dated 10.09.2018 and they came to know about the passing of this award only after receiving notice of the execution petition (Ex.No.60/2019) for execution of the award from this court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['10.09.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.555494546890259
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was argued that the relationship between the unit-holders on the one hand and AMC and the Trustees on the other hand is purely a contractual relationship which is regulated by the Mutual Funds Regulations and, therefore, a writ cannot be issued in contractual matters. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.151483058929443
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 435']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.PC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is apparent from the above that the Supreme Court has merely interpreted the provisions of Section 435 of the Cr.PC as enacted; it has not set down any law, which differs from that enacted by the Parliament. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 435']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.PC']"", ""WITNESS"": ""[]""}",11.488996028900146
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Y.K.N.Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CHENCHU RAMI REDDY AND ANOTHER vs GOVERNMENT OF ANDHRA PRADESH AND OTHERS [(1986) 3 SCC 391]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The extent of care and vigilance to be taken while dealing with public property is made clear by the Hon'ble Supreme Court in the case of CHENCHU RAMI REDDY AND ANOTHER vs GOVERNMENT OF ANDHRA PRADESH AND OTHERS [(1986) 3 SCC 391], a decision cited by Sri Y.K.N.Sharma. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Y.K.N.Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CHENCHU RAMI REDDY AND ANOTHER vs GOVERNMENT OF ANDHRA PRADESH AND OTHERS [(1986) 3 SCC 391']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.722086668014526
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Intention is not a necessary element in cruelty. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.938599348068237
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 55']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Black Money (Undisclosed Foreign Income and Assets)', 'Imposition of Tax Act, 2015']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If the arguments of the respondents have to be accepted then it would amount to deleting the words ""or"" and ""such, from Section 55 of the Black Money (Undisclosed Foreign Income and Assets) and Imposition of Tax Act, 2015. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 55']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Black Money (Undisclosed Foreign Income and Assets) and Imposition of Tax Act, 2015']"", ""WITNESS"": ""[]""}",10.062729597091677
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has withstood the test of cross- examination. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.8923280239105225
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mohd. Ishaque and Others Vs. State of West Bengal and Others reported in (2013) 14 SCC 581']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble Apex Court has laid down certain broad guidelines to be borne in mind while scrutinizing the evidence of eyewitnesses and subsequently the Hon'ble Apex Court in the case of Mohd. Ishaque and Others Vs. State of West Bengal and Others reported in (2013) 14 SCC 581. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mohd. Ishaque']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.029035329818726
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['XXI Addl. City Civil & Sessions Judge & Prl. Special Judge for CBI Cases, Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""['A. Subramaneshwar Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 15) Further, it is admitted fact that in view of the allegations received against the accused through source of information, the SP Crl.A. No.1011/2017 J of the CBI Dr. A. Subramaneshwar Rao suo-moto registered the FIR before the XXI Addl. City Civil & Sessions Judge & Prl. Special Judge for CBI Cases, Bengaluru. [/INST]
 {""CASE_NUMBER"": ""['Crl.A. No.1011/2017']"", ""COURT"": ""['XXI Addl. City Civil & Sessions Judge & Prl. Special Judge for CBI Cases, Bengaluru']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A. Subramaneshwar Rao']"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.795602798461914
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['06/12/1998']"", ""GPE"": ""['Chellaghatta village', 'Varthur', 'Bangalore South Taluk']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['P. Venkataraju', 'Thayappa', 'Pullamma', 'Arunkumar', 'Manjunath', 'Naveen Kumar', 'Jyothi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The ExD9 is the extract of Transfer of Rights Register [Mutation Register] in respect of MR 46/1998-99 dated 06/12/1998 discloses that Sri P. Venkataraju sonof Thayappa and his wife Pullamma and children Arunkumar, Manjunath, Naveen Kumar, minor Jyothi have sold 15 guntas of land in Sy.No.61/1 of Chellaghatta village, Varthur O.S.No.16217/2000 Hobli, Bangalore South Taluk in favour of defendants No.1 and 2 for Rs.1,60,000/-. [/INST]
 {""CASE_NUMBER"": ""['MR 46/1998-99']"", ""COURT"": ""[]"", ""DATE"": ""['06/12/1998']"", ""GPE"": ""['Chellaghatta', 'Varthur', 'Bangalore South']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['P. Venkataraju', 'Pullamma', 'Arunkumar', 'Manjunath', 'Naveen Kumar', 'Jyothi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.15343976020813
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['07-04-2022']"", ""GPE"": ""['Bairiya']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: His postmortem examination was done and, Patna High Court D. REF. No.2 of 2021 dt. 07-04-2022 thereafter, his body was buried in the village-Bairiya. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['07-04-2022']"", ""GPE"": ""['Bairiya']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.506402730941772
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 19']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Although the date on which the application under Section 19 of the Act of 1993 was filed by the defendant is not on record, learned Advocate for the defendant has submitted in the course of his submissions that, the same was filed subsequent to the institution of the instant suit. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 19']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.644644737243652
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It cannot possibly include what the court thinks is unjust on the facts of a case for which it then seeks to substitute its view for the arbitrator's view and does what it considers to be ""justice"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.048314094543457
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Firstly, he submitted that the title of goods in dispute was transferred by the assessee to the purchaser outside India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.265297412872314
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['04.02.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['DRI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Regarding the third prayer that the Officers of the DRI may be asked not to take any coercive action against the petitioners, it may be noted that this Court by order dated 04.02.2019 directed the respondents not to take any coercive action against the petitioners. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['04.02.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['DRI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.76244330406189
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At the same time, the accused will also get the opportunity of putting forward their case before the Trial Court by leading appropriate oral as well as documentary evidence to establish that what has been stated in the Article in question is true, based on the public record. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.616952657699585
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['s.80P(2)(i)(a)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The observation of CIT(A) is misplaced with regard to deduction u/s.80P(2)(i)(a) is even otherwise given to the assessee even if it accepts deposits from non members. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['s.80P(2)(i)(a)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.495210647583008
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['DRT']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(3A)', 'Section 17', 'Section 17A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The proviso to Section 13(3A) of the SARFAESI Act stipulates that the reasons for communication or the likely action of the secured creditor shall not confer any right upon the borrower to prefer an application before the DRT under Section 17 of the SARFAESI Act or the Court of District Judge under Section 17A of the SARFAESI Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SARFAESI Act']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(3A)', 'Section 17', 'Section 17A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act']"", ""WITNESS"": ""[]""}",10.427190065383911
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sai Deepak']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This according to Mr. Sai Deepak brings out the distinction between the CFA and BFA programs. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sai Deepak']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.226335525512695
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Fraud on the Court can be found by the Court by examining the record of the case before the Court 206. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.643337488174438
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 22']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['UGC Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: All the universities are duly empowered to run all courses of education and award all degrees to its pass out students after imparting education in such courses as per Section 22 of the UGC Act there being no requirement to take approval from the State Legislature or from any other authority. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['UGC']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 22']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['UGC Act']"", ""WITNESS"": ""[]""}",7.747988224029541
"{""CASE_NUMBER"": ""['Civil Writ Petition No.969/2022']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 5. Civil Writ Petition No.969/2022 is taken as a lead case. [/INST]
 {""CASE_NUMBER"": ""['Civil Writ Petition No.969/2022']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.377573251724243
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sub Section 2(i)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Not only that, Sub Section 2(i) provides that any plot held by any person as lessee from the Improvement Trust under a registered deed of lease for residential purpose shall be deemed to have been vested in him as perpetual lease from generation to generation on payment of fee to the authority at the rate of one rupee per square meter. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sub Section 2(i)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.660931348800659
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Doddabidarakallu village', 'Yeshavanthpura Hobli', 'Bengaluru North Taluk']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The brief the averments of the complaint are as under; It is averred in the complaint that, land bearing survey No.23/3, measuring 2 acres 10 guntas situated at Doddabidarakallu village, Yeshavanthpura Hobli, Bengaluru North Taluk, is belongs to one Smt.Jayalakshmi. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Doddabidarakallu village', 'Yeshavanthpura Hobli', 'Bengaluru North Taluk']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.491233825683594
"{""CASE_NUMBER"": ""['RSA No. 23/2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Inter alia the defendant i.e. appellant herein denied that the plaintiff no.1 i.e. RSA No. 23/2019 respondent no.1 herein was entitled to any damages whatsoever and denied that there was any cause of action in favour of the plaintiffs i.e. respondents herein in as much as she reiterated that the plaintiff i.e. the respondents had no right, title or interest in the suit property. [/INST]
 {""CASE_NUMBER"": ""['RSA No. 23/2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.635519027709961
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CS No.3462/2016 PAGE NO. 50/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS no. 1']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (the entire discussion on the issue CS No.3462/2016 PAGE NO. 50/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS no. 1 can be referred to). [/INST]
 {""CASE_NUMBER"": ""['CS No.3462/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.L. GARG', 'N.D. GROVER']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.217862367630005
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was argued that the Collector had awarded the same compensation to the respondents as had been awarded by the Reference Court and, therefore, no further enhancement was possible. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.268659830093384
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Md.Mohar Ali']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The observation in Md.Mohar Ali (supra) stating that an agreement of sale is an unilateral contract is not correct. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Md.Mohar Ali']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.467477560043335
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shamlal Narula']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bikram Singh vs. Land Acquisition Collector, (1997) 224 ITR 551']"", ""PROVISION"": ""['Section 2(28A)', 'Section 28']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Another three Judges bench of the Apex Court in Bikram Singh vs. Land Acquisition Collector, (1997) 224 ITR 551 following Dr. Shamlal Narula's case (supra) and taking into consideration definition of ""interest"" in Section 2(28A) of the Act had recorded that interest under Section 28 of the 1894 Act was a revenue receipt and is taxable. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shamlal Narula']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bikram Singh vs. Land Acquisition Collector']"", ""PROVISION"": ""['Section 2(28A)', 'Section 28']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1894 Act']"", ""WITNESS"": ""[]""}",11.045942068099976
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Section 151 reads: ""Nothing in this Code shall be deemed to limit or otherwise affect the inherent power of the Court to make such orders as may be necessary for the ends of justice or to prevent abuse of the process of the Court."" 21. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.362523555755615
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kothegala Shivabasappa Swamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Those lands had been acquired long back during the time of his predecessor, Sri Kothegala Shivabasappa Swamy and that he received the compensation as the head of Devanur Mutt. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Devanur Mutt']"", ""OTHER_PERSON"": ""['Kothegala Shivabasappa Swamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.319243907928469
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['19/02/1990', '22/03/1990']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['financial handbook vol II to IV in rule 9(21)(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: By means of Government order dated 19/02/1990 & 22/03/1990 it was further clarified that Non-Practicing Allowance shall form part of basic salary as described in financial handbook vol II to IV in rule 9(21)(1). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['19/02/1990', '22/03/1990']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['rule 9(21)(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.180613040924072
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act 1872']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is trite that under the Evidence Act 1872 facts have to be proved by primary evidence and secondary evidence is only an exception to the rule. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act 1872']"", ""WITNESS"": ""[]""}",7.704898834228516
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Printpak Machinery v. Jay Kay Paper Congeners reported in AIR, 1979 Delhi 271']"", ""PROVISION"": ""['Section 129']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Delhi High Court in the case of Printpak Machinery v. Jay Kay Paper Congeners reported in AIR, 1979 Delhi 271 has also held that the non- obstinate clause in Section 129 of the Code left untouched the original side rules of High Court whenever framed and the said rules would prevail over the Code. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Printpak Machinery v. Jay Kay Paper Congeners reported in AIR, 1979 Delhi 271']"", ""PROVISION"": ""['Section 129']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.879859447479248
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 19(1)(a)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['RTI Act', 'Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Much before the enactment of RTI Act, which came on the statute book in the year 2005, this Court repeatedly emphasised the people's right to information to be a facet of Article 19(1)(a) of the Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 19(1)(a)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['RTI Act', 'Constitution']"", ""WITNESS"": ""[]""}",8.123505115509033
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['ITSC']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This was a comprehensive report which provided more than adequate justification for the decision of the ITSC to conclude that there had not been a full and true disclosure by the Petitioners of all relevant facts. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['ITSC']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.389611959457397
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Swami Shraddananda v. State of Karnataka5']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: vi) In Swami Shraddananda v. State of Karnataka5, the Apex Court held that no convict can claim remission as a matter of right. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Swami Shraddananda']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.848667860031128
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If one carefully reads the evidence of PW-7, he clearly states that A-4 was part of the armed mob which attacked the Raj Nagar Gurudwara. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.964985370635986
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Meera Sahni']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The order of dismissal was assailed before the Supreme Court in a judgment rendered in the case of Meera Sahni (supra). 50. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Meera Sahni']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.8550028800964355
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.01.1955', '13.12.2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Muneerunnisa Begum']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Wakf Act, 1995']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: No explanation is forthcoming from these respondents why this time limit was not adhered to while registering the Wakf created MSR,J & TVK,J ::60:: wp_20707_2018&batch under the Wakfnama 01.01.1955 by Smt. Muneerunnisa Begum on 13.12.2013, eighteen years after the Wakf Act, 1995 came into force. [/INST]
 {""CASE_NUMBER"": ""['wp_20707_2018']"", ""COURT"": ""[]"", ""DATE"": ""['13.12.2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Muneerunnisa Begum']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Wakf Act, 1995']"", ""WITNESS"": ""[]""}",10.36417293548584
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['HPCL']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further HPCL shall be at liberty to take any appropriate action as deemed fit in such an eventuality. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['HPCL']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.408009052276611
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['R. v. Barnet London Borough Council, ex p Johnson [(1989) 88 LGR 73]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On this basis in R. v. Barnet London Borough Council, ex p Johnson [(1989) 88 LGR 73] the condition imposed by a local authority prohibiting participation by those affiliated with political parties at events to be held in the authority's parks was struck down."" ""83. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['R. v. Barnet London Borough Council, ex p Johnson [(1989) 88 LGR 73]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.772610664367676
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['North East Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Media One TV channel']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 6(1)(c) & (e)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cable Television Networks (Regulation) Act, 1995']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After careful consideration of the case on the whole, the Ministry has come to the conclusion that Media One TV channel had violated Rule 6(1)(c) & (e) of the Programme Code prescribed under the Cable Television Networks (Regulation) Act, 1995 and the rules framed thereunder by telecasting said news regarding the North East Delhi violence."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['North East Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 6(1)(c) & (e)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cable Television Networks (Regulation) Act, 1995']"", ""WITNESS"": ""[]""}",10.157196760177612
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['February 5, 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: By a letter dated February 5, 2013, petitioner put on record such facts. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['February 5, 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.652203798294067
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Janakiammal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The amount of Rs.1,03,000/­, which was received by Janakiammal from the Insurance Corporation after the death of her husband was given to defendant No.1, which was utilised for business purposes. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Insurance Corporation']"", ""OTHER_PERSON"": ""['Janakiammal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.460976362228394
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Indira Gandhi Vs Raj Narain']"", ""PROVISION"": ""['cl.(4) of Article 329']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Supreme Court later in Indira Gandhi Vs Raj Narain , has struck down cl.(4) of Article 329 on the ground that it violates the Rule of Law and free elections which according to the Court constitutes the basic feature of the Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Indira Gandhi', 'Raj Narain']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['cl.(4) of Article 329']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",9.435872316360474
"{""CASE_NUMBER"": ""['LPA No. 233/2006']"", ""COURT"": ""[]"", ""DATE"": ""['26.4.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: That decision was assailed by the State Government by way of LPA No. 233/2006 before the Division Bench of the High Court, which came to be allowed vide impugned judgment and order dated 26.4.2011. [/INST]
 {""CASE_NUMBER"": ""['LPA No. 233/2006']"", ""COURT"": ""[]"", ""DATE"": ""['26.4.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.760448932647705
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench', 'Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Muthuramalingam and Ors vs. State represented by Inspector Of Police']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The answer to the said question lies in the Constitution Bench Judgment of the Apex Court in the case of Muthuramalingam and Ors vs. State represented by Inspector Of Police 54 wherein it is held that it is perfectly legal for a person to be sentenced to more than one life term. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Muthuramalingam']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.983597040176392
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.04.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After hearing the parties, all the writ petitions were dismissed, by a common order, dated 12.04.2018. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.04.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.58323335647583
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sharad Kacharu Pawar']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He admits that panchas and witness Sharad Kacharu Pawar are co- villagers. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sharad Kacharu Pawar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.846990823745728
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Gopalakrishnan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: So his evidence is inconsistent with prosecution case because it has come out in evidence that Gopalakrishnan was taken first to the District hospital. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Gopalakrishnan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.294229507446289
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The AO does not agree to the treatment of the income by the assessee under the head income from house property and accordingly taken only the rentals under the head house property whereas hire charges from furniture and fixtures and other articles were treated as income from other sources. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.325346946716309
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['1.11.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ANNEXURE - I: COPY OF THE G.O.(RT) NO.3273/2016/HOME DATED 1.11.2016. [/INST]
 {""CASE_NUMBER"": ""['G.O.(RT) NO.3273/2016']"", ""COURT"": ""[]"", ""DATE"": ""['1.11.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.296591520309448
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mohd. Hashim v. State of Uttar Pradesh and Others8']"", ""PROVISION"": ""['Section 4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Dowry Prohibition Act, 19619']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the case of Mohd. Hashim v. State of Uttar Pradesh and Others8, the question examined was in relation to minimum sentence provided for an offence under Section 4 of the Dowry Prohibition Act, 19619, providing for minimum sentence of six months. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mohd. Hashim']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Dowry Prohibition Act, 1961']"", ""WITNESS"": ""[]""}",9.522125959396362
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Varun Gumber']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: PW-23 Varun Gumber also supported the case of prosecution though not entirely but he has deposed that dead body was found in front of his dhaba. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Varun Gumber']""}",7.589709281921387
"{""CASE_NUMBER"": ""['Criminal Appeal No.1165 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['21 st August,2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mukul Rohatgi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Though Learned senior counsel Sri Mukul Rohatgi relied on the judgment of this Court dated 21 st August,2019 in Criminal Appeal No.1165 of 2019, but we are of the view that the said judgment would not render any assistance to support his case. [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No.1165 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['21 st August,2019']"", ""GPE"": ""[]"", ""JUDGE"": ""['Mukul Rohatgi']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.89260959625244
"{""CASE_NUMBER"": ""['Writ Tax Petition No.524/2021']"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 148']"", ""RESPONDENT"": ""['2021(10) TMI 517']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (Writ Tax Petition No.524/2021), dated 30.09.2021, reported in 2021(10) TMI 517, the learned Single Judge had quashed the notices issued under Section 148 of the Act. [/INST]
 {""CASE_NUMBER"": ""['Writ Tax Petition No.524/2021']"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['2021(10) TMI 517']"", ""PROVISION"": ""['Section 148']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.881479024887083
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.08.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further, the bridge was inaugurated by the Minister concerned, on 15.08.2016, and the bridge is being used by the commuters and, therefore, a request was made for grant of permission for shifting of the 5th respondent A4 shop to the afore-stated building bearing D.No.4/498-14 & 4/498-15 as the said building was not affected in the acquisition proceedings. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.08.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.629709243774414
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Capital punishment is based on the principle of denunciation of wrong doing. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.329187154769897
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The form in which the deed is clothed is not decisive. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.808311939239502
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['19.01.2018']"", ""GPE"": ""['Dholka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (Exh.84) (x) Reply of the Public Information Officer - cum - Deputy Collector, Dholka dated 19.01.2018 to the petitioner. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['19.01.2018']"", ""GPE"": ""['Dholka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.998234272003174
"{""CASE_NUMBER"": ""['Cr.No.428 of 2015']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Mydukur U/G PS']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 323, 354, 506, 509 r/w 34']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Basing on the above said complaint, the police of Mydukur U/G PS registered a case in Cr.No.428 of 2015 under Sections 323, 354, 506, 509 r/w 34 IPC. [/INST]
 {""CASE_NUMBER"": ""['Cr.No.428']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mydukur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 323, 354, 506, 509 r/w 34']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",10.318686246871948
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was not just the speech of any member in Parliament. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.326252698898315
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, under the facts and circumstance of the case and the reasons stated above, I do not find any reason to interfere with the judgment and order of conviction and sentence passed by the trial Court and up held by the Hon'ble Apex Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.816332578659058
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['31.07.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per the original return of income filed on 31.07.2016, only Sub-head C of Schedule FA has been filled up. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['31.07.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sub-head C']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.331247806549072
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The constitutional court also step in to ensure that the policy makers have devised the effective use of its enabling powers which the Constitution has conferred on them. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",8.097257614135742
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ankush Maruti Shinde']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Ankush Maruti Shinde (supra), Hon'ble Apex Court has observed as under:- ""On the culmination of a criminal case in acquittal, the concerned investigating/ prosecuting official(s) responsible for such acquittal must necessarily be identified. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ankush Maruti Shinde']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.917487859725952
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Liverpool Taxi']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On the other hand, the representation that gives rise to the legitimate expectation may augment the applicant's procedural rights, as exemplified by the Liverpool Taxi case. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.986405372619629
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Tribunal thus ought to have rejected the said claim application on the ground of non joinder of necessary party. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.135125875473023
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The bank accepted the offer of the petitioner and directed him to deposit 25% of the bid amount after adjusting the earnest money deposit of Rs.98,000/-. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.043933391571045
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['McDowell [State of A.P. v. McDowell and Co., (1996) 3 SCC 709]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further, there is an apparent contradiction in the three-Judge Bench decision in McDowell [State of A.P. v. McDowell and Co., (1996) 3 SCC 709] when it is said that a constitutional challenge can succeed on the ground that a law is ""disproportionate, excessive or unreasonable"", yet such challenge would fail on the very ground of the law being ""unreasonable, unnecessary or unwarranted"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['McDowell [State of A.P. v. McDowell and Co., (1996) 3 SCC 709']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.04498815536499
"{""CASE_NUMBER"": ""['Writ Petition No.7717 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Masood Shareef']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mohd. Abdul Wahid Vs. Smt. Nilofer']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Masood Shareef, learned Counsel for the petitioner in Writ Petition No.7717 of 2019, Mohd. Abdul Wahid Vs. Smt. Nilofer in respect of the first question, has invited our attention to paras 14 to 18 of the referral order, and submits that a party in all cases, has to be equated with a witness. [/INST]
 {""CASE_NUMBER"": ""['Writ Petition No.7717 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Masood Shareef', 'Mohd. Abdul Wahid']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.068536758422852
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 30']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Advocates Act, 1961']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But this decision does not come in the way of the Court issuing the mandamus to consider whether the time for bringing Section 30 of the Advocates Act, 1961 into force had arrived or not. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 30']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Advocates Act, 1961']"", ""WITNESS"": ""[]""}",8.167219161987305
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nga Than', 'Mi Hla So']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mi Hla So v. Nga Than (1912) 13 Cri. L.J. 53 (Burma)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Mi Hla So v. Nga Than (1912) 13 Cri. L.J. 53 (Burma), the accused Nga Than was in love with Mi Hla So. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mi Hla So', 'Nga Than']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.577322959899902
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['19.12.1997']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Keshav Ram Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Dharmender Sharma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Counsel submits that the version of PW-1, PW-2 and PW-3 with respect to the incident is contradictory, inasmuch, as, PW-1 Dharmender Sharma deposed that on 19.12.1997, he along with his father Sh. Keshav Ram Sharma were present at their house at about 07:30 PM. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['19.12.1997']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dharmender Sharma', 'Keshav Ram Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.27552056312561
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The State Government is entitled to take such action as it considers appropriate in exercise of powers under any law for the time being in force. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.222852468490601
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Venkataswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He speaks with regard to he joined the very same branch and got marked the documents Exs.P13 to P45 in order to substantiate the case of the prosecution; but he admits that he joined the Bank in September 1994 and also got marked the documents pertaining to Sri Venkataswamy and execution of Ex.P23. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Venkataswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.46217131614685
"{""CASE_NUMBER"": ""['R.F.A.No.447 of 2006']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sub-clause (b) of Rule 27 (1) of Order XLI']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Under Sub-clause (b) of Rule 27 (1) of Order XLI CPC when the appellate court finds that for passing of a judgment, just and R.F.A.No.447 of 2006 proper, the incorporation of the document proposed to be received and marked in additional evidence is very much relevant and inevitable, it is empowered to receive and mark it in evidence. [/INST]
 {""CASE_NUMBER"": ""['R.F.A.No.447']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sub-clause (b) of Rule 27 (1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Order XLI']"", ""WITNESS"": ""[]""}",9.272100925445557
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Halsurgate PS']"", ""OTHER_PERSON"": ""['Kundappa']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Anandakumar']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: P.W.8 Anandakumar S/o Kundappa who is other I.O. and then P.I. of Halsurgate PS has testified with regard to filing of charge sheet in view of completion of investigation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Halsurgate']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anandakumar', 'Kundappa']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.034833669662476
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Karnataka Vs. K.Gopalakrishna Shenoy and another3']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Mysore Motor Vehicles Taxation Act, 1957']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A similar view had earlier been taken in the case of State of Karnataka Vs. K.Gopalakrishna Shenoy and another3, wherein in the context of Mysore Motor Vehicles Taxation Act, 1957 it was held that the owner having a motor vehicle, in respect of which a certificate of registration is current, is bound to pay the tax even if the vehicle is incapable of being put in use. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Karnataka Vs. K.Gopalakrishna Shenoy and another3']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Mysore Motor Vehicles Taxation Act, 1957']"", ""WITNESS"": ""[]""}",10.495181798934937
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Noida']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Delhi Police', 'Noida police']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: True it is, some investigation has been carried out by the Crime Branch of Delhi Police after the case being transferred from Noida as there was total inaction by the Noida police. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi', 'Noida']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.669368267059326
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After returning from work, she used to sit idle till 11 p.m. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.901795864105225
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Or.III, r. 1']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The objection was upheld by the Small Cause Court, the Judge being of opinion that though under Or.III, r. 1, a recognised agent can indeed appear, act and apply on behalf of the plaintiff or defendant by whom he has been authorised to do such things, ""the law does not give him the power to plead on behalf of his principal"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Or.III, r. 1']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.750431299209595
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['ABA']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The only issue which then falls for determination is whether the flat buyers in these circumstances are constrained by the stipulation contained in clause 14 of ABA providing compensation for delay at the rate of Rs 5 per square feet per month. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.43288254737854
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['MCC Party']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Baliram Sharma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Baliram Sharma (P.W.5) states in his evidence that 16 years ago at the time of occurrence, there was hulla in the village that MCC Party members had arrived. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Baliram Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.358165264129639
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Chapters IV to IX', 'Section 17 (in Chapter IV)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We are not so much concerned with the other Chapters, namely, Chapters IV to IX of the 2010 Act, except Section 17 (in Chapter IV) which deals with foreign contribution through scheduled (e) if the holder of the certificate has not been engaged in any reasonable activity in its chosen field for the benefit of the society for two consecutive years or has become defunct. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 17']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['2010 Act']"", ""WITNESS"": ""[]""}",7.781036853790283
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kembathahalli village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Chinnappa']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This apart, the Ex.P.39 certified copy of MR No.19/97-98 of Kembathahalli village, evidences that after the death of Chinnappa, the names of children of Chinnappa came to be mutated to the properties mentioned therein, including the acquired lands and it also evidences that wife of Chinnappa predeceased him. [/INST]
 {""CASE_NUMBER"": ""['MR No.19/97-98']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kembathahalli']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Chinnappa']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.27637267112732
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Plasmac Machine Manufacturing Co. Pvt. Ltd. vs. Collector of Central Excise, Bombay [1991 Supp.(1) SCC 57]', 'Dabur India Ltd. vs. Commissioner of Central Excise, Jamshedpur [(2005) 4 SCC 9]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This principle has been laid down in the cases of Plasmac Machine Manufacturing Co. Pvt. Ltd. vs. Collector of Central Excise, Bombay [1991 Supp.(1) SCC 57] and Dabur India Ltd. vs. Commissioner of Central Excise, Jamshedpur [(2005) 4 SCC 9]. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Plasmac Machine Manufacturing Co. Pvt. Ltd. vs. Collector of Central Excise, Bombay', 'Dabur India Ltd. vs. Commissioner of Central Excise, Jamshedpur']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.415224313735962
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['07.10.2008', '20.12. 2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The municipality issued the work order on 07.10.2008 and the same day an agreement was entered into between the municipality and the private respondent; the municipality released 12% of the total cost, i.e., ₹ 1,44,00,000/- as mobilization advance to Respondent No. 9 on 20.12. 2008. 7. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['07.10.2008', '20.12. 2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.323031663894653
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.04.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The material on record before the High Court in the form of inspection report dated 20.04.2019 and further materials including the Divisional Commissioner’s affidavit, showed irregularities of a severe nature. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.04.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.82532024383545
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Malagalu Village', 'Moodala Palya', 'Bangalore']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Meena Sudhakar', 'Munikrishna']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: DESCRIPTION OF IMMOVABLE PROPERTY Residential building bearing No.14, 3rd Cross, Assessment No.48, Khatha No.1870, Priyadarshini Layout, Malagalu Village, Moodala Palya, Bangalore 560 072 total admeasuring 1200 Sq.ft together with all rights, appurtenances whatsoever whether underneath or above the surface of the property and bounded on the East by: Property of Meena Sudhakar West by: Private property + high tension line North by: 22'' road South by: Property of Munikrishna [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Moodala Palya', 'Bangalore']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Meena Sudhakar', 'Munikrishna']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.217483520507812
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court', 'Andhra Pradesh High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Archana Reddy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Since we have heard storming arguments on the point of the ceiling imposed by the Apex Court in matters of reservation, and the judgment in Archana Reddy by the Andhra Pradesh High Court is heavily relied upon, we should be conscious of even one percent of reservation being conferred by the State without quantifiable data. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court', 'Andhra Pradesh High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Archana Reddy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.630970478057861
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, contributions, if any, made by any lessee prior to the effective date determined by the Supreme Court cannot be refunded, instead, the same could be adjusted towards the subsequent payments. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.859593152999878
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23rd March, 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He then informed to SDPO that he was holding the identification parade on 23rd March, 2012. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23rd March, 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.890843152999878
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 368']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['73rd Amendment', 'Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The 73rd Amendment came to the Constitution by way of amendment under Article 368 and, therefore, it cannot be said to be a basic feature of the Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 368']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",8.661805152893066
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.02.2017']"", ""GPE"": ""['Hyderabad', 'Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Y.Adilakshmi']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner, Dr. Y.Adilakshmi, who is serving on the post of Civil Assistant Surgeon, Hyderabad, has filed the present writ petition challenging the order, dated 22.02.2017 allocating her to the State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.02.2017']"", ""GPE"": ""['Hyderabad', 'Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Y.Adilakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.823161363601685
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['R.S. Ghuraiya', 'D.R. Sharma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The appellants have relied upon site plan, Ex. D.16 prepared by R.S. Ghuraiya (P.W.20) in the presence of D.R. Sharma (P.W. 19). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['R.S. Ghuraiya', 'D.R. Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.28496551513672
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ramashish Rai v. Jagdish Singh']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Again, in Ramashish Rai v. Jagdish Singh, the following observations were made by this Court: (SCC p. 501, para 7) ""7. ... [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ramashish Rai', 'Jagdish Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.652311563491821
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 437 (5) and 439 (2)', 'Sub-section (5) of Sections 437']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C.', 'Cr.P.C']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We may have again to look into provisions of Sections 437 (5) and 439 (2) of Cr.P.C. Sub-section (5) of Sections 437 of Cr.P.C uses expression ‘if it considers it necessary so to do, direct that such person be arrested and commit him to custody’. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 437 (5) and 439 (2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C', 'Sections 437']"", ""WITNESS"": ""[]""}",10.076886653900146
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Punjab and Haryana High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Haryana vs. Kailashwati, AIR 1980 P&H 117']"", ""PROVISION"": ""['Section 28']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: While considering various decisions of the High Courts and approving the decision of the Punjab and Haryana High Court rendered in State of Haryana vs. Kailashwati, AIR 1980 P&H 117, this Court held that the interest awardable under Section 28 would include within its ambit both the market value and the statutory solatium. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Punjab and Haryana High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kailashwati']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Haryana vs. Kailashwati, AIR 1980 P&H 117']"", ""PROVISION"": ""['Section 28']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.149312734603882
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Janarthanam Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Only after concluding that none of the other castes / communities, demanding internal reservation within the 20 per cent reservation granted to MBCs and DNCs, satisfied the test of viability or feasibility for internal reservation, the Janarthanam Commission had recommended 10.5 per cent internal reservation for the Vanniakula Kshatriyas. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Janarthanam Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.0982301235198975
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Both of them were executed at residential rate of Rs.2050/- per sq. meter. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.213898658752441
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: An opportunity of personal hearing was given as well to the petitioners, fixing 12:30 p.m. on July 3, 2019 for such hearing. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.416433095932007
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (9) With regard to agricultural land owned in rural areas : 8.66% of Maratha families are landless, 62.74% of Maratha families own agricultural land not more than 2.5 acres, 19% own agricultural land more than 2.5 acres and less than 5 acres, 6% of Maratha families own agricultural land in the range of 5 to 10 acres and just 2.7% of Maratha families have agricultural land more than 10 acres. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.428091049194336
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mamta', 'Surender']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is further the case of the prosecution that at about 1:50 p.m, the accused was apprehended along with bag by Ct. Mamta with the help of SI Surender. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mamta', 'Surender']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.26497220993042
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is in that context that the observations made by this Court in the case of Baladin2 assume significance; otherwise, in law, it would not be correct to say that before a person is held to be a member of Crl. Appeal Nos. 1709-1710 of 2019 (@ SLP [Crl.]Nos.2497-2498 of 2019) The State of Madhya Pradesh vs. Killu @ Kailash & Ors. [/INST]
 {""CASE_NUMBER"": ""['Crl. Appeal Nos. 1709-1710 of 2019', 'SLP [Crl.]Nos.2497-2498 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Baladin']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Madhya Pradesh vs. Killu @ Kailash & Ors']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.824412107467651
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['India Insurance Co. Ltd., vs Satpal Singh and Another, (2000) 1 SCC 237']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Page No 9 of 61 India Insurance Co. Ltd., vs Satpal Singh and Another, (2000) 1 SCC 237 and in Paragraph Nos. 27 to 29 held as under:- [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['India Insurance Co. Ltd., vs Satpal Singh and Another, (2000) 1 SCC 237']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.73563528060913
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Interest on the unpaid amount, penalty, and interest on penalty in relation to the past dues as on the date of the judgment of the Hon’ble Supreme Court (arising due to the said judgment of the Supreme Court) will not be levied beyond the date of the said judgment, and the NPV will be protected using the discount rate. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.898639440536499
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: These provisions stipulate that a secured creditor who is seeking the intervention of the Magistrate under Section 14 is required to file an affidavit furnishing the information contemplated under various sub-clauses (i) to (ix) of the proviso and obligates the Magistrate to pass suitable orders regarding taking of the possession of the secured assets only after being satisfied with the contents of the affidavits."" 27. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.444472789764404
"{""CASE_NUMBER"": ""['Crl.M.C.2719 of 2020']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Devaky v. State of Kerala (1986 KHC 1)']"", ""PROVISION"": ""['S.55(g)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 27. Devaky v. State of Kerala (1986 KHC 1), is a case charged under S.55(g), the question arose Crl.M.C.2719 of 2020 is whether accused was entitled to get a second analysis of the sample. [/INST]
 {""CASE_NUMBER"": ""['Crl.M.C.2719']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Devaky']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['S.55(g)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.10301923751831
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Romesh Chand']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The evidence of Romesh Chand PW 6 that the family had an amount of Rs 40,000 lying at [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Romesh Chand']""}",8.505995750427246
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (b) The suit is decreed in part granting a sum of Rs.1,80,000/- towards past damages for use and occupation and future damages at Rs.15,000/- per month from the date of suit till the date of handing over possession. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.8244309425354
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Karnataka High Court', 'Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 143(1)(a)(ii)', 's.143(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The learned Commissioner of Income Tax (Appeals) erred in ignoring the fact that, the issue involved was disputed and in the light of ratios laid down by Karnataka High Court and also the Hon'ble Supreme Court, the provisions of section 143(1)(a)(ii) of the act could not have been invoked and no adjustment U/s.143(1) of the act could have been made. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Karnataka High Court', 'Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 143(1)(a)(ii)', 's.143(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.237528562545776
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['American Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['Georgia', 'Tennesee']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Holmes']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Again an instructive insight can be obtained from the observations of Justice Holmes of the American Supreme Court in the case of State of Georgia v. Tennessee Copper Co. [51 L Ed 1038 : 206 US 230 (1906) : 27 SCR 618] , which was a case involving air pollution in Georgia caused by the discharge of noxious gases from the defendant's plant in Tennesee. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['American Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['Georgia', 'Tennessee']"", ""JUDGE"": ""['Holmes']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Georgia v. Tennessee Copper Co. [51 L Ed 1038 : 206 US 230 (1906) : 27 SCR 618]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.7017822265625
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court shall afford sufficient opportunity of hearing to both parties and shall dispose of the second appeal in accordance with law as expeditiously as possible."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.965285062789917
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In addition the appellants shall, as offered by them, deposit with the executing court for payment to the respondent another amount of Rs. 1,20,000/- within a period of eight weeks from today. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.14433479309082
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['NSSO']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has also placed on record the State/Union Territory wide percentage of population of OBC in India in the year 2011-12 in the form of the NSSO Report no. 563 (employment and unemployment) and according to him, the percentage of OBC patil-sachin. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['NSSO']"", ""OTHER_PERSON"": ""['patil-sachin']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.031662225723267
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.03.1991']"", ""GPE"": ""['Kodigehalli']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Land Acquisition Officer took possession of the lands, including Sy No. 61 of Kodigehalli from its owners on 27.03.1991. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.03.1991']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.005390167236328
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The legislature thought that an educational institution could be an industry. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.8576319217681885
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The prosecution has also failed to produce either the log book of the official vehicle used by the raiding. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.974435567855835
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Nasiruddin & Ors. vs. Sita Ram Agarwal, reported in AIR 2003 SC 1543']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Nasiruddin & Ors. vs. Sita Ram Agarwal, reported in AIR 2003 SC 1543, the Court held that it is well settled that when negative words are used, the Court would presume that intention of the legislature was that the provisions are mandatory in character. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nasiruddin']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Sita Ram Agarwal']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.50290060043335
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Nagpur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['National Highways Act, 1956']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Additional Commissioner, Nagpur and Arbitrator under the National Highways Act, 1956, having office at Old Secretariate Building, Civil Lines, Nagpur - 440001. 4. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Nagpur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['National Highways Act, 1956']"", ""WITNESS"": ""[]""}",9.098792552947998
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dinesh Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He stated that accused is friends with Dinesh Gupta. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Dinesh Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.218906879425049
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ismail Faruqui']"", ""PETITIONER"": ""['Mohd. Aslam']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: One Mohd. Aslam, who was also one of the petitioners in Constitution Bench Judgment in Ismail Faruqui’s case filed a writ petition seeking certain reliefs with regard to 67.703 acres of land acquired under the Act, 1993. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ismail Faruqui']"", ""PETITIONER"": ""['Mohd. Aslam']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.11549472808838
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Finance Act, 2010']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This conflict or inconsistency now stands resolved by virtue of the amendments introduced under the Finance Act, 2010. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Finance Act, 2010']"", ""WITNESS"": ""[]""}",7.351825952529907
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kerala']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Cabinet Secretary took stock of the situation, preparedness, rescue and relief operations and directed that immediate and continued assistance be provided to Kerala to meet this crisis. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kerala']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.448994874954224
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause 1.6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['ABA', 'KAO Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: According to the appellants, the flat buyers had already paid for the super area in terms of clause 1.6 of ABA including common areas and facilities which would be deemed to include car parking under the KAO Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause 1.6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['KAO Act']"", ""WITNESS"": ""[]""}",7.595197200775146
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['02.10.1994']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mohd. Masiuddin Farooqui']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mohd. Masiuddin Farooqui (P.W.5), the defendant and he met only once, i.e., on 02.10.1994. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['02.10.1994']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mohd. Masiuddin Farooqui']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.4277606010437
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shalin Mehta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Waqf Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: By reading these Provisions, Mr. Shalin Mehta, learned Senior Counsel would contend that the Board is a Body Corporate constituted under the Provisions of the Waqf Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shalin Mehta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Waqf Act']"", ""WITNESS"": ""[]""}",8.191982507705688
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['[Shalini Shyam Shetty & Anr. v. Rajendra Shankar Patil [(2010) 8 SCC 329]]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This power of superintendence also extends to the administrative functioning of these courts and tribunals [Shalini Shyam Shetty & Anr. v. Rajendra Shankar Patil [(2010) 8 SCC 329]]. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shalini Shyam Shetty', 'Rajendra Shankar Patil']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.637713193893433
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['M.P. High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In response to this, it was submitted that there cannot be any quarrel with the said contention, but the aforesaid judgment of the M.P. High Court is not at all relevant to the facts of the present case. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['M.P. High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.248188495635986
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Inder Singh', 'Baldev Singh']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Both the courts have upheld the Will after recording a finding that execution of the Will has been proved on examining attesting witness Inder Singh as PW13, Sub-Registrar Baldev Singh, who registered the Will has been examined as PW5. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Inder Singh', 'Baldev Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.679879665374756
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['H. Narasimha Rao v. Venkataram R reported in 2007 Cri.L.J. 583']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further, learned counsel relied upon the Judgment of this High Court in the case of H. Narasimha Rao v. Venkataram R reported in 2007 Cri.L.J. 583, referring to this Judgment he would contend that when the debt has become barred by limitation the accused was acquitted. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['H. Narasimha Rao', 'Venkataram R']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.324849605560305
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Tenterden', 'Tindal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The observations of Lord Tenterden and Tindal, C.J. referred in the abovementioned passages in Craies on Statute Law also indicate that the principle that on repeal a statute is obliterated is subject to the exception that it exists in respect of transactions past and closed. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Tenterden', 'Tindal']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Craies']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.77976393699646
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17.12.1973']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This agreement dated 17.12.1973, according to the defendant, gives them a right over the plaintiffs. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17.12.1973']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.806475400924683
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chandigarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Accused was working as gate keeper at Sector 23, Chandigarh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chandigarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.2924604415893555
"{""CASE_NUMBER"": ""['RC No. 235/21/17']"", ""COURT"": ""[]"", ""DATE"": ""['30.10.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['FSL, Rohini']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has deposed that on 30.10.2017, on the directions of the IO, he collected sealed pullanda of 100 gms ganja vide RC No. 235/21/17, already Ex. PW­3/B from MHC(M) for depositing the same at FSL, Rohini. [/INST]
 {""CASE_NUMBER"": ""['RC No. 235/21/17']"", ""COURT"": ""[]"", ""DATE"": ""['30.10.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['FSL, Rohini']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.00036096572876
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2013) 2 SCC 772']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It would be useful to quote the observation of the Apex Court in (2013) 2 SCC 772. ""32. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2013) 2 SCC 772']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.491799354553223
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajeev', 'Rahul', 'Ranjan Maheshwari']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Three flats on the first floor of the building are being entire occupied jointly by Rajeev, Rahul and Ranjan Maheshwari, brothers. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajeev', 'Rahul', 'Ranjan Maheshwari']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.8069748878479
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 140']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MV Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We are, therefore, of the opinion that even apart from Section 140 of the MV Act, a victim in an accident which occurred while using a motor vehicle, is entitled to get compensation from a Tribunal unless any one of the exceptions would apply. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 140']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MV Act']"", ""WITNESS"": ""[]""}",8.250466346740723
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['05-04-2018', '06-04-2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['RBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Immediately thereafter, the Statement dated 05-04-2018 and the Circular dated 06-04-2018, impugned in these writ petitions came to be issued by RBI. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['05-04-2018', '06-04-2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['RBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.718420267105103
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Aggrieved, the assessee has filed this appeal before the Tribunal. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.947173833847046
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The execution court held that the 5th judgment debtor can continue as the Manager only till a new Manager is elected, as per the 1934 Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1934 Constitution']"", ""WITNESS"": ""[]""}",8.59311556816101
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23.2.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sadashiv Thorat']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is mentioned in the first information report that on 23.2.2014 the offending truck gave dash to the 15 fa2564.16 motor cycle of deceased and Sadashiv Thorat (PW 2) from the back side of motor cycle. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23.2.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sadashiv Thorat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.767275094985962
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunil', 'Ram Niwas', 'Sombir', 'Manvir']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, Sunil put a blanket on that woman and took her to one Kotha of Ram Niwas and from there, Sombir sent Manvir to bring condom from outside. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunil', 'Sombir', 'Manvir']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.899816274642944
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['US']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Patent Office']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The point to be stressed here is that under our Act, was the examiner under the Indian Patent Office not entitled to know as to what was the prosecution history of the plaintiffs qua the corresponding patents in US. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Patent Office']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.300818204879761
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Act, 1988']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Furthermore, there was no provision for an appellate mechanism against action taken by the authorities under the unamended the Benami Act, 1988 while barring the jurisdiction of Civil Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Act, 1988']"", ""WITNESS"": ""[]""}",9.370768070220947
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2006']"", ""GPE"": ""['Guwahati', 'Howrah', 'Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He received information that a blue coloured vehicle bearing no.WB-26C-3869 was coming from Guwahati to Howrah through NH34 carrying huge quantity of ganja and would pass Barasat in the early hours of 27.09.2006. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2006']"", ""GPE"": ""['Gujarat', 'Gauhati', 'Howrah', 'Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.28746485710144
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Laxmi @ Rukmani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After that, accused Laxmi @ Rukmani was arrested and her personal search was conducted and [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Laxmi @ Rukmani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.10642957687378
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23rd May 2006', '10th December 2008', '4 th September 2009', '11th April 2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 161', 'Section 164']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr PC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Under this category there were four statements that were recorded, i.e. the statement dated 23rd May 2006 recorded by the CBI under Section 161 Cr PC (Ex.PW-1/DA), the statement dated 10th December 2008 recorded by the MM under Section 164 Cr PC (Ex.PW-1/E), the supplementary statement dated 4 th September 2009 (Ex.PW-1/DB), and the supplementary statement dated 11th April 2009 (Ex.PW-17/DB) both recorded by the CBI. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23rd May 2006', '10th December 2008', '4 th September 2009', '11th April 2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 161', 'Section 164']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr PC']"", ""WITNESS"": ""[]""}",11.888972520828249
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.12.2001']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Kamalpur Police Station, District Sitapur']"", ""OTHER_PERSON"": ""['Dukhi Ram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Briefly, the facts are that on 18.12.2001 at around 04:30 PM on Sitapur-Lucknow G.T. Road Near New Krishna Hall adjacent to Kamalpur Police Station, District Sitapur, the deceased Dukhi Ram was travelling in a Tempo of a Mahendra Economy Jeep No.UP-32-Z-9360. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.12.2001']"", ""GPE"": ""['Sitapur', 'Lucknow']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Kamalpur Police Station']"", ""OTHER_PERSON"": ""['Dukhi Ram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.884317636489868
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Setalvad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To this, Mr. Setalvad argued that if the building was equipped with machinery for the purpose of running a textile mill, whatever machinery was there for the purpose would be valued. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Setalvad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.118892669677734
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has further deposed that after receiving the result from FSL as Ex. PW­5/B, same was filed before the Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.0398054122924805
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Galligan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He supports Galligan in this respect and goes to the extent by saying that it is same as ensuring dignity of individuals, in respect of whom or against whom the decision is taken, in the following words: ""The instrumental value of procedures should not be underestimated; the accurate application of authoritative standards is, as Galligan clearly explains, an important aspect of treating someone with respect. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Galligan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.09782361984253
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['30.05.2016', '17.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act 2002']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, when their accounts became a Non Performing Assets as on 30.05.2016, the bank initiated action under SARFAESI Act 2002 and issued a notice dated 17.12.2016 under Section 13(2) of the SARFAESI Act 2002, calling upon the petitioners to pay a sum of Rs.240,03,62,830.86. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['30.05.2016', '17.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act 2002']"", ""WITNESS"": ""[]""}",10.386053085327148
"{""CASE_NUMBER"": ""['L.A.R.No.73 of 2002']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The interim relief sought for in this interlocutory application is opposed by the 3 rd respondent, who is the 3rd claimant in L.A.R.No.73 of 2002, raising various contentions. [/INST]
 {""CASE_NUMBER"": ""['L.A.R.No.73 of 2002']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.12217903137207
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Total income after addition at 1,15,200 + (1,15,200 x 40%) the rate of 40% on account of = 1,61,280 future prospects 3. Income after 1/3rd deduction 1,61,280 - (1,61,280 x 1/3) on account of personal = 1,07,520 expenses [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.096632719039917
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Correspondingly, a judgment in personam refers to a judgment against a person as distinguished from a judgment against a thing, right or status and a judgment in rem refers to a judgment that determines the status or condition of property which operates directly on the property itself. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.875149250030518
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Furthermore, it is contended that the notice under Section 13(2) was never served on the petitioner. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.998387098312378
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Godavari Sugar Mills']"", ""OTHER_PERSON"": ""['Ramanlal Gulab Chand Shah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 31-B', 'Part III']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: While dealing with the findings of the High Court in the impugned judgment therein, made on the basis of an earlier decision of this Court in Ramanlal Gulab Chand Shah (supra), this Court in Godavari Sugar Mills (supra) observed that a legislation, which is incidental or ancillary to a statute protected under Article 31-B, can be assailed on the ground of inconsistency with Part III of the Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Godavari Sugar Mills']"", ""OTHER_PERSON"": ""['Ramanlal Gulab Chand Shah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 31-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",8.4580557346344
"{""CASE_NUMBER"": ""['Bihar Petition No. 58 of 1956']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the Bihar Petition No. 58 of 1956 are set out the following bald allegations: [/INST]
 {""CASE_NUMBER"": ""['Bihar Petition No. 58']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.76480746269226
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Shambhu Investment (P.) Ltd. vs. CIT (2003) 129 Taxman 70 (Supreme Court)', 'CIT vs. Shambhu Investment (P.) Ltd. \""(2001) 116 Taxman 795 (Calcutta High Court)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Ld. A.R. alternatively submitted that if the composite of rent and hire charges for the furniture and fixtures are taken together that could be taken the ALV and in defence of his proposition the Ld. A.R. relied on the following decisions: ""1. Shambhu Investment (P.) Ltd. vs. CIT (2003) 129 Taxman 70 (Supreme Court) 2. CIT vs. Shambhu Investment (P.) Ltd. ""(2001) 116 Taxman 795 (Calcutta High Court) [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Calcutta High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Shambhu Investment (P.) Ltd. vs. CIT (2003) 129 Taxman 70 (Supreme Court)', 'CIT vs. Shambhu Investment (P.) Ltd. ""(2001) 116 Taxman 795']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.932518005371094
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 36(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This, however, would, in its turn, render the words ""has been"" in the amended Section 36(2) meaningless. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 36(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.784440279006958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['FSS Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The definition of 'adulterant' is found in the provisions of the FSS Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['FSS Act']"", ""WITNESS"": ""[]""}",7.941243648529053
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 113']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Significantly, Section 113 of the Act enables the State Government to prescribe the conditions for the issuance of permits for transport vehicles by the State or Regional Transport Authorities. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State Government', 'Regional Transport Authorities']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 113']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.072088718414307
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['London', 'New York']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: “London Arbitration is a well known phenomenon which is often chosen by foreign nationals with a dif- ferent law, such as the law of New York, governing the substantive rights of the parties. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['London']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.021723508834839
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.01.1995']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When Respondent No.2 failed to respond and/or provide the documents sought, keeping in view the serious allegations of cheating, the Managing Committee of the School, in its meeting held on 12.01.1995, decided to extend his probation by one year. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.01.1995']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.644225358963013
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chennai', 'Salem']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that the Government of India has proposed the subject project at an estimated cost of about Rs.10,000 crores to develop a 276kms highway connecting Chennai and Salem. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chennai', 'Salem']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.373295783996582
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.01.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['6th Central Pay Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The clear purport and meaning of the aforesaid provision is that those who retired before 01.01.2006 as well were ensured that their revised pension after enforcing recommendations of the 6th Central Pay Commission, shall not be less than 50% of the minimum of the pay band plus grade pay corresponding to the pre-revised pay scale from which the pensioners had retired. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.01.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['6th Central Pay Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.800725936889648
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['DDA']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondent No. 2/DDA shall also take appropriate steps in accordance with law in case of violation of such stipulation in the letter of allotment by the unaided schools."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['DDA']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.491114139556885
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""['Haren Pandya']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['DSPE Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A notification was issued under Section 6 of the DSPE Act for investigation by CBI in the murder of Haren Pandya. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""['Haren Pandya']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['DSPE Act']"", ""WITNESS"": ""[]""}",7.776329755783081
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Siddhi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mahesh Gude']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per evidence of PW10 Dr Mahesh Gude and PM notes Exh. 103, 100 ml of semi- digested food with yellowish liquid was found in the stomach of deceased Siddhi. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Siddhi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mahesh Gude']""}",8.844828367233276
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was held on the aforesaid facts, that the income received in British India could not be said to wholly arise in British India and that there should be allocation of income between the various business operations of the assessee demarcating the income arising in the taxable territories inthe particular year from the income arising without the taxable territories in that year. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['British India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.162520885467529
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is, accordingly, held that if the purpose of acquisition is same and when the lands are identical and similar though lying in different villages, there is no justification to make any discrimination between the land owners to pay higher amount to some of the land owners and less compensation to others. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.240178108215332
"{""CASE_NUMBER"": ""['O. P. No. 1380/2014', 'O.P. No. 78/2015']"", ""COURT"": ""['Family Court, Kollam, Kerala']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 26', 'Section 7', 'Section 13(1) (ib)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure', 'Family Courts Act', 'Hindu Marriage Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Learned counsel for the respondent informs that O. P. No. 1380/2014 under Section 26 of the Code of Civil Procedure read with Section 7 of the Family Courts Act and O.P. No. 78/2015 under Section 13(1) (ib) of the Hindu Marriage Act, both filed by the respondent in the Family Court, Kollam, Kerala, have already been decided. [/INST]
 {""CASE_NUMBER"": ""['O. P. No. 1380/2014', 'O.P. No. 78/2015']"", ""COURT"": ""['Family Court, Kollam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 26', 'Section 7', 'Section 13(1) (ib)', 'Section 13(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Marriage Act']"", ""WITNESS"": ""[]""}",12.37692928314209
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Customs (Import), Mumbai Vs. Dilip Kumar And Company And Ors., (2018) 9 SCC 1']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A Constitution Bench in the case of Commissioner of Customs (Import), Mumbai Vs. Dilip Kumar And Company And Ors., (2018) 9 SCC 1, had reiterated these principles. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Customs (Import), Mumbai Vs. Dilip Kumar And Company And Ors.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.489765167236328
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['National Highways Authority of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Petitioners in these Writ Petitions are land owners whose lands were acquired for the purpose of construction of National Highway by the Respondent No.3 - National Highways Authority of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Highways Authority of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.556198120117188
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['K.A. Nagamani Vs. Indian Airlines & Ors., (2009) 5 SCC 515']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further reliance has been placed on another decision of the Supreme Court in K.A. Nagamani Vs. Indian Airlines & Ors., (2009) 5 SCC 515, to submit, no challenge may be raised on the basis of violation of pre-existing Rules. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['K.A. Nagamani Vs. Indian Airlines & Ors., (2009) 5 SCC 515']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.890125036239624
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The decision must be specific and unequivocal and cannot be inferred merely because of absence of any Guidelines in the matter. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.171813011169434
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Gujarat High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Annadurai']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Natvarlal Amarshibhai Devani Vs. State of Gujarat and another [2017 Cri.L.J. 1911]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, the learned counsel appearing for Annadurai has placed reliance upon a judgment of a Single Judge of the Gujarat High Court in Natvarlal Amarshibhai Devani Vs. State of Gujarat and another [2017 Cri.L.J. 1911], wherein, it has been held that in the absence of a specific provision of law for voice test, the same cannot be permitted. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Gujarat High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Annadurai', 'Natvarlal Amarshibhai Devani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.90049695968628
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This action does not do any credit for the State. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.782150506973267
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench of the Supreme Court', 'Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SBP and Co.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Konkan Railway Corpn. Ltd. vs. Rani Construction (P) Ltd., (2002) 2 SCC 388']"", ""PROVISION"": ""['Section 11(6)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arbitration Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The seven-judge Constitution Bench of the Supreme Court in SBP and Co. (supra) while reversing earlier five-judge Constitution Bench judgment in Konkan Railway Corpn. Ltd. vs. Rani Construction (P) Ltd., (2002) 2 SCC 388 held that the power exercised by the Chief Justice of the High Court or the Chief justice of India under Section 11(6) of the Arbitration Act is not an administrative power but is a judicial power. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['SBP and Co.', 'Konkan Railway Corpn. Ltd. vs. Rani Construction (P) Ltd., (2002) 2 SCC 388']"", ""PROVISION"": ""['Section 11(6)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arbitration Act']"", ""WITNESS"": ""[]""}",11.389195442199709
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This, in substance and effect, results in placing a reverse burden which is legally impermissible. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.727557182312012
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Municipal Corporation of the City of Ahmedabad v. Chandulal Shamaldas Patel', 'Himalayan Tiles & Marbles (P) Ltd. Case']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was further contended that even if there was a conflict between the two decisions of this Court in the Municipal Corporation of the City of Ahmedabad v. Chandulal Shamaldas Patel and in Himalayan Tiles & Marbles (P) Ltd. Case both by Division Bench comprising of two Hon'ble Judges, the conflict can only be resolved by referring the case to a larger Bench of this Court."" 36. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Municipal Corporation of the City of Ahmedabad v. Chandulal Shamaldas Patel', 'Himalayan Tiles & Marbles (P) Ltd. Case']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.64449691772461
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Her husband told that it is not possible to pay that much and the elders gathered there negotiated to give Rs. 1.5 lakhs cash and 10 tholas of gold in the form of ornaments to be put on bride. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.764580726623535
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['D.K. Jain']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Jeffrey J. Diermeier v. State of W.B.']"", ""PROVISION"": ""['Section 482']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On a similar issue under consideration, in Jeffrey J. Diermeier v. State of W.B., while explaining the scope and ambit of the inherent powers of the High Court under Section 482 of the Code, one of us (D.K. Jain, J.) speaking for the Bench, has observed as follows: (SCC p. 251, para 20) ""20. ... [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['D.K. Jain']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jeffrey J. Diermeier']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 482']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.43174695968628
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, in the present reference where no statutory provision is called into question, it is necessary for the court to analyse the relationship between what the statute penalizes and what the Constitution protects. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.776465177536011
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mehul Mahendra Thakkar v. Meena Mehul Thakkar', 'All India Anna Dravida Munnetra Kazhagam v. Govt. of T.N.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is settled legal position that, by way of interim relief, the final relief should not be granted till the matter is decided one way or the other, (Mehul Mahendra Thakkar v. Meena Mehul Thakkar ; All India Anna Dravida Munnetra Kazhagam v. Govt. of T.N., ), as interlocutory orders are made in aid of final orders and not vice versa. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mehul Mahendra Thakkar', 'Meena Mehul Thakkar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['All India Anna Dravida Munnetra Kazhagam v. Govt. of T.N.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.822490930557253
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Browne-Wilkinson']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, Lord Browne-Wilkinson observed that in case of an adult who is mentally competent, the artificial feeding regime would be unlawful unless the patient consented to it as a mentally competent patient can, at any time, put an end to life support systems by refusing his consent to their continuation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Browne-Wilkinson']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.070762157440186
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.02.1977']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 5(5) of Order XLI']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure (Amendment) Act, 1976']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Rule 5(5) of Order XLI was inserted by the Code of Civil Procedure (Amendment) Act, 1976, with effect from 01.02.1977. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.02.1977']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 5(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure (Amendment) Act, 1976']"", ""WITNESS"": ""[]""}",9.35911226272583
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 248']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Article 248 would have to be re- drafted as follows: ""Parliament has exclusive power to make any law with respect to any matter not mentioned in the Concurrent List or State List, provided it has not been mentioned by way of exclusion in any entry in List I. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 248']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.801404237747192
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['National Company Law Tribunal, New Delhi']"", ""DATE"": ""['16.07.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: According to definition of share capital shown in the scheme of 15 of 37 arrangement, the effective date when the National Company Law Tribunal, New Delhi approved the scheme was 16.07.2018. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['National Company Law Tribunal, New Delhi']"", ""DATE"": ""['16.07.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['scheme of 15 of 37']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.428980588912964
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Satya Pal Anand VS State of M.P & Ors. (2016)10 SCC 767']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act 1908']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Three judge Bench of the Hon'ble Supreme Court of India in Satya Pal Anand VS State of M.P & Ors. (2016)10 SCC 767 held in the context of the Registration Act 1908 that ""some irregularity in the procedure committed during the registration process would not lead to a fraudulent execution and registration of the document, but a case of mere irregularity. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Satya Pal Anand']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act 1908']"", ""WITNESS"": ""[]""}",9.50073218345642
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2019', 'January 18, 2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This proposition is sought to be demonstrated by the delay in communication of the order declaring the petitioners wilful defaulters, which was passed on July 3, 2019, but was communicated only on January 18, 2020. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2019', 'January 18, 2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.508453369140625
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of M.P. v. Bacchudas, (2007) 9 SCC 135 at SCC para 10', 'State of Punjab v. Parveen Kumar, (2005) 9 SCC 769 at SCC para 9']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (State of M.P. v. Bacchudas, (2007) 9 SCC 135 at SCC para 10 and State of Punjab v. Parveen Kumar, (2005) 9 SCC 769 at SCC para 9.) [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of M.P. v. Bacchudas, (2007) 9 SCC 135', 'State of Punjab v. Parveen Kumar, (2005) 9 SCC 769']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.277123928070068
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The intention is that the land loser will immediately be able to draw compensation and purchase some other suitable land or make appropriate arrangements for his livelihood. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.078930854797363
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Peerless General Finance & Investment Company Ltd. vs. CIT, 309 CTR 321']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He also relied on the decision of the Hon'ble Supreme Court in the case of Peerless General Finance & Investment Company Ltd. vs. CIT, 309 CTR 321 in support of the contention that the subscription fee and the membership fee does not form part of the revenue receipt. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Peerless General Finance & Investment Company Ltd. vs. CIT, 309 CTR 321']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.731208801269531
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sections 118(a) & 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Now, the burden is on the accused to rebut the statutory presumptions under sections 118(a) & 139 of NI Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sections 118(a) & 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}",9.63917326927185
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sengupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Maharashtra University of Health Sciences (represented by Dy. Registrar) Vs. Paryani Mukesh Jawaharlal & Ors. reported at (2007) 10 SCC 201']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Sengupta in this regard has relied on Maharashtra University of Health Sciences (represented by Dy. Registrar) Vs. Paryani Mukesh Jawaharlal & Ors. reported at (2007) 10 SCC 201, and submits that the Hon'ble Supreme Court has stated that if the coordinate bench wants to take a different view, judicial proprietary requires that such matter be referred to a larger bench. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sengupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Maharashtra University of Health Sciences (represented by Dy. Registrar) Vs. Paryani Mukesh Jawaharlal & Ors. reported at (2007) 10 SCC 201']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.583276987075806
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['G. Ramaswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mithu v. State of Punjab [Mithu v. State of Punjab, (1983) 2 SCC 277 : 1983 SCC (Cri) 405]']"", ""PROVISION"": ""['Section 303']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reference was then made by Shri G. Ramaswamy to the decision in Mithu v. State of Punjab [Mithu v. State of Punjab, (1983) 2 SCC 277 : 1983 SCC (Cri) 405] wherein Section 303 of the Indian Penal Code was struck down. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['G. Ramaswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mithu v. State of Punjab [Mithu v. State of Punjab, (1983) 2 SCC 277 : 1983 SCC (Cri) 405]']"", ""PROVISION"": ""['Section 303']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code']"", ""WITNESS"": ""[]""}",11.500170707702637
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Iqbal Singh Marwah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Moreover, since this decision was rendered prior to the Constitution Bench decision in Iqbal Singh Marwah (supra), the three­Judge Bench did not have the benefit of referring to the observations made in that case. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Iqbal Singh Marwah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.786714792251587
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: These proceedings may be entertained either by the High Court or the Registrar on the application, and, at the instance, of the ""person aggrieved"". 55. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.874849796295166
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Adhoya Hinduan']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kanwar Raja Ram Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even at the time of death, Kanwar Raja Ram Singh was owner of land measuring 132 kanals 14 marlas in village Adhoya Hinduan. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Adhoya Hinduan']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kanwar Raja Ram Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.25355863571167
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['4th October 1962']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The right to create sub tenancy under the parent lease agreement of 4th October 1962 reads: ""5. Notwithstanding the permission of the lessor's first hand and obtained in writing to assign and/or transfer the lease of the demised premises but the lessor will have the right to sublet part of the premises on condition that the lessee will keep major portion of the premises under his occupation."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['4th October 1962']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.786933660507202
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rama Chowhan', 'Mohan Rao Chowhan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondents have granted remission to two persons viz., Rama Chowhan (Accused No.4) and Mohan Rao Chowhan (Accused No.11), and they were released in the year 2011 itself. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rama Chowhan', 'Mohan Rao Chowhan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.347794771194458
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 69(1)', 'sub-section(5) and the sub- section(4) of the section 132']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CGST Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We reiterate that the Section 69(1) of the CGST Act provides for the power to arrest for both types of the offences i.e. cognizable and non bailable offences as well non-cognizable and bailable offences as per the provisions of the sub-section(5) and the sub- section(4) of the section 132 of the CGST Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 69(1)', 'sub-section(5)', 'sub- section(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CGST Act', 'CGST Act.']"", ""WITNESS"": ""[]""}",10.188912630081177
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mandadi village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Narasimha Rao']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When he reached Mandadi village, two unknown persons came and over took Narasimha Rao-PW.1. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mandadi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Narasimha Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.490292072296143
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The said compensation along with interest shall be paid by Respondent No.1 to the Petitioner, within a period of eight weeks from today, failing which, on the entire amount, interest @ 7.5% per annum shall be liable to be paid by the Respondent No.1. 35. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.31708574295044
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['U.P. Motor Vehicle Rules, 1998', 'Motor Vehicles Act, 1988']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Having heard learned counsel for the parties and perused the record, it is evident that the controversy revolves around the mechanism provided in the U.P. Motor Vehicle Rules, 1998 which have been framed under the Motor Vehicles Act, 1988. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['U.P. Motor Vehicle Rules, 1998', 'Motor Vehicles Act, 1988']"", ""WITNESS"": ""[]""}",8.662678480148315
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['fourth Tamil Nadu Pay Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that the fourth Tamil Nadu Pay Commission has recommended that at the end of the period of three years, the Dearness Allowance sanctioned upto that period could be treated as Dearness Pay. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.265548944473267
"{""CASE_NUMBER"": ""['C/FA/3351/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As summarized by the Division Bench, if the dispute raised is of the kind falling within the categories (a), (b) or (c) stated above, C/FA/3351/2017 ORDER the Tribunal may give its finding in summary way. [/INST]
 {""CASE_NUMBER"": ""['C/FA/3351/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.721740245819092
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.10.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunita']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: I had not given any complaints to the police against Sunita or her parents before 22.10.2006. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.10.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunita']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.14797306060791
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16-9-2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The 2nd document viz., the District Courts official memorandum dated 16-9-2008 was nothing but the show cause notice issued to the petitioner before the issue of the charge memo. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16-9-2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.651069641113281
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It must, however, be made clear that a Court of Session cannot cancel a bail which has already been granted by the High Court unless new circumstances arise during the progress of the trial after an accused person has been admitted to bail by the High Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.96526026725769
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Asadulla', 'Rashid']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Asadulla and Rashid reached hotel at 4/5 p.m. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Asadulla', 'Rashid']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.832636594772339
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27 th August 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament', 'NCBC']"", ""OTHER_PERSON"": ""['B.K. Handique']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, while this Commission was functioning, the Parliament constituted a Committee on welfare of Other Backward Classes under the Chairmanship of Shri B.K. Handique which presented its first report on 27 th August 2012 and it recommended that the NCBC should be conferred with a constitutional status and this saw light of the day by introduction of 123rd Bill. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27 th August 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['NCBC']"", ""OTHER_PERSON"": ""['B.K. Handique']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['123rd Bill']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.407784938812256
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302 and 201']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 4) On appearance, charges under Sections 302 and 201 IPC came to be framed, read over and explained to the accused, to which the accused pleaded not guilty and claimed to be tried. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302 and 201']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",8.652957439422607
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['10/14.09.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government Medical College & Hospital, Sector 32, Chandigarh', 'Chandigarh Administration']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She was designated as Head, Department of Anatomy, Government Medical College & Hospital, Sector 32, Chandigarh, by the Chandigarh Administration, on 10/14.09.2010. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['10/14.09.2010']"", ""GPE"": ""['Chandigarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government Medical College & Hospital, Sector 32']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.231353521347046
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 8.7 It is further submitted that the High Court ought to have acquitted the original Accused No.1 also by giving her the benefit of doubt, as was given to original Accused Nos.6 and 7. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.33095908164978
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2008) 14 SCC 337']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, by an order reported in (2008) 14 SCC 337, the matter was referred to a Larger Bench. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2008) 14 SCC 337']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.666867971420288
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When there is the want of general power to act, the court has no jurisdiction. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.128201961517334
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT', 'NCLAT']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 231']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IBC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Section 231 of the IBC bars the jurisdiction of civil courts in respect of any matter in which the Adjudicating Authority i.e. the NCLT or the NCLAT is empowered by the Code to pass any Order. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT', 'NCLAT']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 231']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IBC']"", ""WITNESS"": ""[]""}",7.746913433074951
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT']"", ""DATE"": ""['14 June, 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 14 June, 2017 SBI suggested to the plaintiffs that it would make efforts to complete the transaction outside the purview of NCLT. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT']"", ""DATE"": ""['14 June, 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.293054103851318
"{""CASE_NUMBER"": ""['Crime No.163/2011']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302 and 374(f)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On the basis of the confessional statement of the appellant, recorded by P.W.14 in the presence of P.Ws.10 and 11 - mediators, he registered a case in Crime No.163/2011 under Sections 302 and 374(f) of IPC, issued express FIRs to all the concerned. [/INST]
 {""CASE_NUMBER"": ""['Crime No.163/2011']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302 and 374(f)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""['P.W.14']""}",9.532993078231812
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bhander']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mahendra Kumar Tiwari', 'Ramjisharan']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further, Mahendra Kumar Tiwari (P.W. 13) has specifically stated that Sitola Colony, Bhander is adjoining to the place of incident, and Ramjisharan (P.W.13) is the resident of Sitola Colony, Bhander. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bhander']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mahendra Kumar Tiwari', 'Ramjisharan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.725039005279541
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If it is capable of belief independently of the confession, then of course it is not necessary to call the confession in aid. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.698898315429687
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['February 7, 1968']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 139(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, the fact that the assessee furnished the second return on February 7, 1968, even before any investigation was http://www.judis.nic.in started by the income-tax department cannot be of any assistance to him, if the case does not fall within the scope of Section 139(5) of the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['February 7, 1968']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['income-tax department']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 139(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.87479043006897
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 68 Marata(J) final.doc available in the Sate of Maharashtra from 52% to 68% and thereby crossing the barrier of the ceiling limit of 50% imposed by the Hon'ble Apex Court in case of in case of Indra Sawhney Versus Union of India1. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""['Maharashtra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Indra Sawhney']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.465827226638794
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Counsel submits that these allegations were not stated by him in Ex.PW1/D1. 24. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.915407657623291
"{""CASE_NUMBER"": ""['W.A.Nos.157-176/2019', 'W.P.Nos.47171-190/2018']"", ""COURT"": ""[]"", ""DATE"": ""['3.9.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The facts further reveal that writ appeals were preferred i.e., W.A.Nos.157-176/2019 against the order passed in W.P.Nos.47171-190/2018 and the State Government took a stand before the Division Bench that it shall be withdrawing the notification dated 3.9.2018 and thereafter, a fresh notification will be issued on the subject. [/INST]
 {""CASE_NUMBER"": ""['W.A.Nos.157-176/2019', 'W.P.Nos.47171-190/2018']"", ""COURT"": ""[]"", ""DATE"": ""['3.9.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.26762580871582
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bhavnagar University v. Palitana Sugar Mill Pvt. Ltd. & Ors., reported in AIR 2003 SC C/SCA/11794/2006 JUDGMENT 511']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the case of Bhavnagar University v. Palitana Sugar Mill Pvt. Ltd. & Ors., reported in AIR 2003 SC C/SCA/11794/2006 JUDGMENT 511, the Hon'ble Supreme Court has observed in para 27, 32 to 35 and 38 as under: ""27. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bhavnagar University v. Palitana Sugar Mill Pvt. Ltd. & Ors., reported in AIR 2003 SC C/SCA/11794/2006']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.840143203735352
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.04.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Consequently, it flows from the above - 01.04.2021 onwards, all references to issuance of notice contained in the Enabling Act must be read as reference to the substituted provisions only. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.04.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.791533946990967
"{""CASE_NUMBER"": ""['OA(EKM)NO.1613 OF 2017']"", ""COURT"": ""[]"", ""DATE"": ""['02.08.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: EXHIBIT P1(A4) TRUE COPY OF THE INTERIM ORDER DATED 02.08.2017 IN OA(EKM)NO.1613 OF 2017. [/INST]
 {""CASE_NUMBER"": ""['OA(EKM)NO.1613']"", ""COURT"": ""[]"", ""DATE"": ""['02.08.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.65093231201172
"{""CASE_NUMBER"": ""['CWP No.18253 of 2009']"", ""COURT"": ""['Punjab & Haryana High Court']"", ""DATE"": ""['24.09.2004']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Survey of India', 'Chandigarh Administration']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The catchment area as depicted in the map prepared by the Survey of India taken on record by the Hon'ble Punjab & Haryana High Court vide orders dated 24.09.2004 and adopted by Chandigarh Administration thereafter officially as map of catchment area of 77 of 148 CWP No.18253 of 2009 & other connected petitions #78# Sukhna Lake is hereby published for the information of general public. [/INST]
 {""CASE_NUMBER"": ""['18253']"", ""COURT"": ""['Punjab & Haryana High Court']"", ""DATE"": ""['24.09.2004']"", ""GPE"": ""['Chandigarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Survey of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.14938497543335
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (Manohar Lal Sharma14; Committee for Protection of Democratic Rights). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Committee for Protection of Democratic Rights']"", ""OTHER_PERSON"": ""['Manohar Lal Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.963467836380005
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['VUSB Bhushan Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The self-same petitioner by name VUSB Bhushan Kumar has maintained the two writ petitions against three Respondents by name (1). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['VUSB Bhushan Kumar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.619967699050903
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Gagan Makkar', 'Harmeet Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The case of the Plaintiff as stated in the plaint is that, Plaintiff was searching for some residential property in Roop Nagar area, Delhi and he was informed about the suit property by Property dealers- Shri Gagan Makkar and Shri Harmeet Singh (hereinafter „the brokers‟). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Roop Nagar', 'Gagan Makkar', 'Harmeet Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.97042465209961
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['police station Dhaurhara']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The police station Dhaurhara from his house is 40-50 steps. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Dhaurhara']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.742653846740723
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bihar', 'New Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Highway Authority of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The General Manager, Bihar, National Highway Authority of India, Headquarter, G 5 and 6, Sector - 10, Dwarka, New Delhi, 110075. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bihar', 'New Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Highway Authority of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.409708738327026
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['13 (1995) 3 SCC 377']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Court held: 13 (1995) 3 SCC 377 “10. What is really relevant thus is the conduct of the government servant which has led to his conviction on a criminal charge. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['13 (1995) 3 SCC 377']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.972383975982666
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 19']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The later Act has inter-alia amended Section 19 of the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 19']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.137216329574585
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause (a) of sub-section 1 of section 53']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Anomaly can be removed by reading down clause (a) of sub-section 1 of section 53 by striking down the words ""twenty four hours"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause (a) of sub-section 1 of section 53']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.10251522064209
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Koteshwar Vittal Kamath v, K. Rangappa & Co., SCR at p. 48']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: [see Koteshwar Vittal Kamath v, K. Rangappa & Co., SCR at p. 48] [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Koteshwar Vittal Kamath']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.273803949356079
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The applicant claimed that the concentration of toxic substances in the air near her home constantly exceeded and continues to exceed the safe level established by the relevant legislation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.194920778274536
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Significantly, formal FIR was registered at 12:30 pm. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.787360906600952
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: From the material on record, it is quite evident that the tractor and trolley purchased by the complainant, which the complainant was intending to get transferred in his name, were registered in the year 1980 and 1982 respectively. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.101162672042847
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 340', 'Sections 193 and 419']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CrPC', 'IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondent filed a private complaint under Section 340, CrPC alleging offence punishable under Sections 193 and 419, IPC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 340', 'Sections 193 and 419', 'Sections 193 and 419']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CrPC', 'IPC']"", ""WITNESS"": ""[]""}",9.182525634765623
"{""CASE_NUMBER"": ""['CWP No.18253 of 2009']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The sole question is, who has standing to be heard?"" 130 of 148 CWP No.18253 of 2009 & other connected petitions #131# 74. [/INST]
 {""CASE_NUMBER"": ""['CWP No.18253 of 2009']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 130']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.56136393547058
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pooja Ravinder Devidasani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further, in re Pooja Ravinder Devidasani (supra), the Supreme Court has observed as under:- ""17. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pooja Ravinder Devidasani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.798028707504272
"{""CASE_NUMBER"": ""['Criminal Appeal No.1211/2018', 'Criminal Appeal No.301/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence we pass the following order: O R D E R (I) Both Criminal Appeals i.e. Criminal Appeal No.1211/2018 and Criminal Appeal No.301/2017 are allowed. Cri.Apeal 1211.18 (II) [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No.1211/2018', 'Criminal Appeal No.301/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.840073108673096
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sachida Nand Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 195(1)(b)(ii)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Sessions Judge and the High Court, relying on Sachida Nand Singh, held that the bar under Section 195(1)(b)(ii) would not apply where forgery of a document was committed before producing the said document in court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sachida Nand Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 195(1)(b)(ii)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.10122847557068
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Land Acquisition Authority found that if 12 or 13 acres lands are left to the land owners, their most of the difficulties shall be removed and such proposal to this effect was sent. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.946654319763184
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Part IXA']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To find out as to whether a law made by State Legislature is inconsistent with provisions of Part IXA of the Constitution, the principles which have been laid down by this Court to determine the repugnancy between the law made by the Legislature of a State and law made by Parliament can be profitably relied on. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Part IXA']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",8.335902214050293
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In all the subsequent cases, the Supreme Court invoked its extraordinary powers under Article 142 of the Constitution of India in order to do complete justice to the parties when faced with a situation where the marriage ties had completely broken and there was no possibility whatsoever of the spouses coming together again. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",7.92083215713501
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['M. G. Aggarwal versus State of Maharashtra, AIR 1963 SC 200']"", ""PROVISION"": ""['Section 423(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble Supreme Court has held in the matter of M. G. Aggarwal versus State of Maharashtra, AIR 1963 SC 200, the relevant part is extracted as under: ""(16) Section 423(1) prescribes the powers of the appellate Court in disposing of appeals preferred before it and clauses (a) and (b) deal with appeals against acquittals and appeals against convictions respectively. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M. G. Aggarwal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['M. G. Aggarwal versus State of Maharashtra, AIR 1963 SC 200']"", ""PROVISION"": ""['Section 423(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.11475944519043
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per the proviso to Rules, 2004, in case of non-availability of suitable candidates, the remaining vacancies are to be filled by direct recruitment as per clause (i) thereof. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause (i)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Rules, 2004']"", ""WITNESS"": ""[]""}",7.45842432975769
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ravi Kant']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Sri Ravi Kant, Senior Advocate, appearing for respondents contended, firstly, that plaintiff was not in possession of property in dispute and suit for injunction was filed without seeking any relief for possession, therefore, suit itself was not maintainable; Secondly, no objection was raised with regard to admissibility of secondary evidence; and, thirdly, argument advanced with regard to maintainability of First Appeal before District Judge is misconceived. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ravi Kant']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.32485032081604
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['District Judge, Sikar']"", ""DATE"": ""['22.07.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence, this writ petition has been filed by (3 of 21) [CW-8363/2021] the petitioner-non-applicant challenging the order dated 22.07.2021 passed by the learned District Judge, Sikar. [/INST]
 {""CASE_NUMBER"": ""['CW-8363/2021']"", ""COURT"": ""['District Judge, Sikar']"", ""DATE"": ""['22.07.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.031204462051392
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Aligarh Devt. Auth. V/s. Megh Singh & Others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the case of Aligarh Devt. Auth. V/s. Megh Singh & Others, the Hon'ble Supreme Court while dealing with the provision of 1894 Act and 2013 Act, held that the stand of the authority that it had deposited 80% of the compensation with the land acquisition officer and hence it was for the owner to collect the money, cannot be appreciated. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Aligarh Devt. Auth. V/s. Megh Singh & Others']"", ""PROVISION"": ""['1894 Act', '2013 Act']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.78108549118042
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We direct the States to consider implementing the reformative and rehabilitation programmes contained in the 2016 Manual. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.810239791870117
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 31']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Indeed, in view of the discretion granted to an arbitral tribunal under Section 31 of the Act of 1996 the State could not have reasonably questioned the award of further interest at the rate of 12 per cent per annum. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 31']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Act of 1996']"", ""WITNESS"": ""[]""}",7.66766357421875
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Crl. Appeal Nos. 1709-1710 of 2019 (@ SLP [Crl.]Nos.2497-2498 of 2019) The State of Madhya Pradesh vs. Killu @ Kailash & Ors.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court, therefore, gave benefit to said three accused as under:- Crl. Appeal Nos. 1709-1710 of 2019 (@ SLP [Crl.]Nos.2497-2498 of 2019) The State of Madhya Pradesh vs. Killu @ Kailash & Ors. “21.From the aforesaid quoted judgment [/INST]
 {""CASE_NUMBER"": ""['Crl. Appeal Nos. 1709-1710 of 2019', 'SLP [Crl.]Nos.2497-2498 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Killu @ Kailash']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.51058030128479
"{""CASE_NUMBER"": ""['S.L.P. (Crl.) Nos. 7040-7041 of 2014']"", ""COURT"": ""['District and Sessions Judge, Bagalkot']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code', 'IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He lodged a First Information Report with the police and after investigations, necessary proceedings were taken before the District and Sessions Judge, Bagalkot against the accused persons under several sections of the Indian Penal Code (the IPC). Crl. Appeal Nos._______/2018 (@ S.L.P. (Crl.) Nos. 7040-7041 of 2014) 12. [/INST]
 {""CASE_NUMBER"": ""['Crl. Appeal Nos._______/2018 (@ S.L.P. (Crl.) Nos. 7040-7041 of 2014)']"", ""COURT"": ""['District and Sessions Judge, Bagalkot']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code (the IPC)']"", ""WITNESS"": ""[]""}",11.791563272476196
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Kishan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He had handed over all the parcels to ASI Ram Kishan which were taken into possession vide recovery memo Ex.PF.10. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Kishan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.22259783744812
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sarju Prasad']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: P.W.82 Sarju Prasad had deposed that accused had stayed in his hotel, but he had failed to bring the register in this regard and no test identification parade was got conducted from him. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sarju Prasad']""}",8.286046504974365
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 11.6 The offence will be tried by a Court of Session in the district and the offences are cognizable, non-bailable and non-compoundable. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.841885328292847
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Rajasthan High Court', 'Gujarat High Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The delegates and the representatives had created a panic and they met the then Hon'ble Chief Justice of India and the Hon'ble Chief Justice of Rajasthan High Court and Gujarat High Court and made representation before the Hon'ble President of India and Hon'ble Prime Minister India and Hon'ble Minister for Law and Justice. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Rajasthan High Court', 'Gujarat High Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.290536642074583
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Karnataka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As a result, as many as thirty (30) more meritorious students than ""students of Karnataka"" as per the explanation, may lose an opportunity to seek admission to the respondent/Law School despite appearing in the national level entrance test being more meritorious than them. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Karnataka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.005338907241821
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court', 'Githa Hariharan Dr. Vandana Shiva vs. Reserve Bank of India: Jayanta Bandhopadhiyaya, (1999) 2 SCC 228']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Supreme Court, in Githa Hariharan Dr. Vandana Shiva vs. Reserve Bank of India: Jayanta Bandhopadhiyaya, (1999) 2 SCC 228 had made important observations in regard to the dignity of women. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Githa Hariharan', 'Vandana Shiva']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Jayanta Bandhopadhiyaya']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.740745782852173
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There is no constitutional or legal bar on the State in categorizing women in social categories. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.73234224319458
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This order was challenged which became the subject matter of the appeal in the aforesaid cases. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.034064054489136
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh', 'Telangana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The contention of the petitioner is that the authorities have allocated her to the State of Andhra Pradesh instead of State of Telangana without considering the objections raised by her and also on the sole ground that she studied upto Class X in the State of Andhra Pradesh. 9. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh', 'Telangana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.433095216751099
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20th April, 2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The tribunal had then clarified that it did not wish to receive further submissions on the time table and that its ruling of 20th April, 2016 vide PO-7 would hold. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20th April, 2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.76158857345581
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CS No.3462/2016 PAGE NO. 45/54 M.L. GARG & ANR. v. N.D. GROVER']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Moreover because of many factors, one of CS No.3462/2016 PAGE NO. 45/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS being that English is not the first language in India and the level of proficiency even among the advocates who primarily draft the pleadings is different and at many times not up to the mark, the pleadings ought to be construed liberally. [/INST]
 {""CASE_NUMBER"": ""['CS No.3462/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.L. GARG', 'N.D. GROVER']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.774592876434326
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['03/08/1995']"", ""GPE"": ""['Chellaghatta village', 'Varthur Hobli', 'Bangalore South Taluk']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ExP4 Certified copy of sale deed dated 03/08/1995 executed by defendant No.1 and 2 in favour of defendant No.11 and 12 in respect of land measuring 15 guntas including 2 guntas Kharab land in Sy.No. 61/1, Chellaghatta village, Varthur Hobli, Bangalore South Taluk. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['03/08/1995']"", ""GPE"": ""['Chellaghatta village', 'Varthur Hobli', 'Bangalore South Taluk']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.86541223526001
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Small Cause Court at Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ghosh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ejectment Suit No.117 of 2013 (Sheila Guha Vs. Rajeev Maheshwari & Ors.)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The children of the said Dr. Ghosh sometime in 2013 filed an eviction suit against the applicants herein before the learned Small Cause Court at Calcutta, before the Learned 4th Bench, which was registered as Ejectment Suit No.117 of 2013 (Sheila Guha Vs. Rajeev Maheshwari & Ors.). [/INST]
 {""CASE_NUMBER"": ""['Ejectment Suit No.117 of 2013']"", ""COURT"": ""['Small Cause Court at Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sheila Guha', 'Rajeev Maheshwari']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.39039158821106
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['AMC']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 266']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Amount collected by the State is going to Consolidated Fund under Article 266 which is applicable to the State and Union and not to local authorities like AMC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Consolidated Fund']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 266']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.323198080062866
"{""CASE_NUMBER"": ""['Writ Tax No. 524/2021']"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (Writ Tax No. 524/2021) decided in favour of assessees/petitioners on 30.09.2021 by holding inter alia in relevant Paragraph Nos. 63 to 80 as hereunder: ""63. [/INST]
 {""CASE_NUMBER"": ""['Writ Tax No. 524/2021']"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.414324522018433
"{""CASE_NUMBER"": ""['Criminal Appeal No. 2186 of 2008']"", ""COURT"": ""[]"", ""DATE"": ""['30.08.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Akhilesh alias Putte']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The appellant, Akhilesh alias Putte has preferred Criminal Appeal No. 2186 of 2008, assailing the aforesaid impugned judgment and order dated 30.08.2008. [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No. 2186 of 2008']"", ""COURT"": ""[]"", ""DATE"": ""['30.08.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Akhilesh alias Putte']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.880114078521729
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was further alleged that the original plaintiff was placed in possession of the premises and subsequently in May, 1996, the original plaintiff paid `36,000/- more to the 1st respondent towards the sale consideration. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.829157114028931
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It would be relevant to quote from paragraph 1.10 of the said report under the head RATIONALE BEHIND MOVING TOWARDS GST as under: ""1.10 The introduction of GST would mark a clear departure from the scheme of distribution of fscal powers envisaged in the Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",6.8909406661987305
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.01.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 6.2.4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But on 27.01.2018, while finalizing the judgment, prima facie, the Court found that by virtue of the amendment of Rule 6.2.4, the reservation as is provided in 1994 Act has been incorporated whereas the provision for reservation of women, disabled candidates and ex-servicemen prima facie appears to be legislation by reference. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.01.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 6.2.4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1994 Act']"", ""WITNESS"": ""[]""}",9.39844560623169
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ranjan Bachawat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 10']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Ranjan Bachawat learned Senior counsel appearing on behalf of the appellant has strenuously argued that the suit for mesne profits is barred under Section 10 of the Code of Civil Procedure on the premise that the decree passed in the earlier suit for eviction is under appeal and appeal is a continuation of the suit. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ranjan Bachawat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 10']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure']"", ""WITNESS"": ""[]""}",8.329084634780884
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['RBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Obviously, RBI did not consider the availability of alternatives before issuing the impugned circular. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['RBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.54544997215271
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Smt.M.Printer and others v. Marcel Martins', 'State of Maharashtra and another v. B.E.Billimoria']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Smt.M.Printer and others v. Marcel Martins (12 supra) and State of Maharashtra and another v. B.E.Billimoria (13 supra), the Hon'ble Courts took the same view. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Smt.M.Printer and others v. Marcel Martins', 'State of Maharashtra and another v. B.E.Billimoria']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.734630346298218
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Articles 14, 16, 21 and 300A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We have also examined the submissions advanced by learned counsel premised on various constitutional provisions (Articles 14, 16, 21 and 300A of the Constitution of India), but have found, that no right can be stated to have been violated, thereunder. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Articles 14, 16, 21 and 300A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",8.219910621643066
"{""CASE_NUMBER"": ""['Crl.A.No.100190/2018', 'Crl.A.Nos.100351/2017', '100390/2017', '100397/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Khanapur', 'Pavagada', 'Chittoor']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: CW.14/PW.7- PSI, DCIB and CW.25/PW.15-PSI, Khanapur Crl.A.No.100190/2018 C/w. Crl.A.Nos.100351/2017, 100390/2017 AND 100397/2017 had ascertained that accused's calls were coming from Pavagada and Chittoor. [/INST]
 {""CASE_NUMBER"": ""['Crl.A.No.100190/2018', 'Crl.A.Nos.100351/2017', 'Crl.A.Nos.100390/2017', 'Crl.A.Nos.100397/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Pavagada', 'Chittoor']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.31112265586853
"{""CASE_NUMBER"": ""['Special Civil Application No.12084 of 2015']"", ""COURT"": ""['Gujarat High Court']"", ""DATE"": ""['29.07.2015', '13.08.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pankajsinh Waghela v. State Election Commission through Election Commissioner & others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The abovesaid appeal has been filed against the judgment of Gujarat High Court dated 29.07.2015 in Special Civil Application No.12084 of 2015 dismissing the writ petition following an earlier Division Bench judgment dated 13.08.2010 in Pankajsinh Waghela v. State Election Commission through Election Commissioner & others. [/INST]
 {""CASE_NUMBER"": ""['Special Civil Application No.12084 of 2015']"", ""COURT"": ""['Gujarat High Court']"", ""DATE"": ""['29.07.2015', '13.08.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pankajsinh Waghela']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.348572492599487
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CS No.3462/2016 PAGE NO. 24/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The defendant was very particular in using all the alphabets in his name and his signatures and even the point for CS No.3462/2016 PAGE NO. 24/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS the alphabet (i) was not missed by the defendant in his signatures. [/INST]
 {""CASE_NUMBER"": ""['CS No.3462/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.L. GARG', 'N.D. GROVER']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.678593158721924
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mihir', 'Anil', 'Jatu', 'Prabhat', 'Premchand', 'Puranchand']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mukteshwar']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Evidence of Mukteshwar (PW­5) is that Mihir assaulted Anil and Jatu with the axe on their heads whereas Prabhat with another brother assaulted Premchand and Puranchand. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mukteshwar', 'Mihir', 'Premchand', 'Puranchand']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Anil', 'Jatu']""}",9.275479793548584
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Trivedi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Samsher Singh vs. State of Punjab and Another reported in (1974) 2 SCC 831']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Trivedi relied on a decision of the Apex Court in the case of Samsher Singh vs. State of Punjab and Another reported in (1974) 2 SCC 831. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Trivedi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Samsher Singh vs. State of Punjab and Another reported in (1974) 2 SCC 831']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.266165733337402
"{""CASE_NUMBER"": ""['CWJC No.23014 of 2018']"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['9-1-1993', 'dt.23-12-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Bihar Medical Educational (Regulation and Control Act, 1981', 'State Regulation Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The present Vice-Chancellor under its letter dated 9-1-1993 addressed to the Governors Secretariat by Patna High Court CWJC No.23014 of 2018 dt.23-12-2020 pointing out the provisions of Bihar Medical Educational (Regulation and Control Act, 1981 (herein after State Regulation Act) raised various objections regarding the validity and enforceability of the aforesaid transitory regulation, which contemplated for holding of examination of the students of the petitioner institution. [/INST]
 {""CASE_NUMBER"": ""['CWJC No.23014']"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['9-1-1993', '23-12-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Bihar Medical Educational (Regulation and Control Act, 1981']"", ""WITNESS"": ""[]""}",10.070835590362549
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bishan Das']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Petitioner Bishan Das and others came to manage Dharmasala, Temple and the shops etc. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Bishan Das']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.981731176376343
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 127', 'section 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: By such time, the limitation to approach the appellate authority under section 127 has set in and by reason of non-attraction of principles underlying section 5 of the 1963 Act, the remedy of appeal has become barred. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 127', 'section 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1963 Act']"", ""WITNESS"": ""[]""}",7.854384899139404
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Commercial Courts Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: These enactments are important instances as to how the legislature continues to monitor the application of the Commercial Courts Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Commercial Courts Act']"", ""WITNESS"": ""[]""}",7.934714317321777
"{""CASE_NUMBER"": ""['Crl.A No.100345/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Laxmi', 'Sangamesh', 'Sangeeta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We have gone Crl.A No.100345/2017 through the entire evidence on record on reappreciation of the same we find that 12. P.W.1 who is a distant relative of the accused, in his examination has stated that the deceased Laxmi is the wife of the accused, Sangamesh is the son and Sangeeta is the daughter. [/INST]
 {""CASE_NUMBER"": ""['Crl.A No.100345/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Laxmi', 'Sangamesh', 'Sangeeta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.33923625946045
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On the entire sum calculated above, interest at the same rate of 15% was awarded for the post-award period till realization. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.095113277435303
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (1) of Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Succession Act, 1956']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Counsel further contends that, by reason of sub-section (1) of Section 14 of the Hindu Succession Act, 1956 (hereinafter ""the Act""), this limited interest blossomed into an absolute interest. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (1) of Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Succession Act, 1956']"", ""WITNESS"": ""[]""}",9.131641149520874
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Badaun']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Akhtar @ Bhoora']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He goes on to state that the accused Akhtar @ Bhoora is a carpenter by profession and has worked for him as such: he has made the doors and (Chaukhat), a wooden frame fixed in the wall in which doors are fixed, of the house of this witness which is being constructed in Kadri Colony, Mohalla Sotha, District Badaun. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Badaun']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Akhtar @ Bhoora']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.58502721786499
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 3(13)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As would be manifest from a reading of Section 3(13) of the Act, it is only land held or occupied for purposes connected with agriculture, pisciculture, horticulture, animal husbandry or poultry farming which could be subjected to proceedings under the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 3(13)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.297121047973633
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15-5-2018']"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is for the purpose of taking the public in Delhi into confidence and working for their benefit that an opportunity was granted to make suggestions and raise objections to the proposed amendments to the Master Plan and which were not objected to by the learned Attorney General on 15-5-2018 keeping in view the spirit behind the invitation to object and make suggestions and curtailment of the normal statutory period. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15-5-2018']"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.455070495605469
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi', 'Timbuctoo', 'Soviet Russia']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Legislature']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Shortly stated, the question is, could the Indian Legislature under the Act of 1935 enact that the executive could extend to Delhi laws that may be made hereinafter by a legislature in Timbuctoo or Soviet Russia with modifications. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Timbuctoo', 'Soviet Russia']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Act of 1935']"", ""WITNESS"": ""[]""}",9.166007995605469
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['s 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 7) Ld. counsel for the complainant contended that the accused has admitted that the dishonoured cheques in question bears her signature and legal presumption of consideration u/s 139 of NI Act would act against the accused. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['s 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}",7.254600763320923
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Vasudeva mills']"", ""OTHER_PERSON"": ""['Janakiammal', 'Somasundaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Janakiammal and her son Somasundaram did not get any immovable property in the compromise decree except shares of the Vasudeva mills, a sick company. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Vasudeva mills']"", ""OTHER_PERSON"": ""['Janakiammal', 'Somasundaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.09977126121521
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Haryana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Minimum Wages Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Moreover, minimum wage of a skilled labourer in the State of Haryana as notified under the Minimum Wages Act was about `10,000/- per month at the relevant time. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Haryana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Minimum Wages Act']"", ""WITNESS"": ""[]""}",7.16549277305603
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Election Commission, India v. Saka Venkata Rao']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Going by the aforesaid provision which stood before amendment the Supreme Court has explained in the case of Election Commission, India v. Saka Venkata Rao. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Election Commission, India v. Saka Venkata Rao']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.191270351409912
"{""CASE_NUMBER"": ""['FAO No. 5158 of 2015']"", ""COURT"": ""[]"", ""DATE"": ""['2.12.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Rakesh Gulati (since deceased) through LRs v. Sanjiv Kumar and others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Still further counsel has relied upon the judgment passed by a Division Bench of this Court in FAO No. 5158 of 2015 titled as 'Rakesh Gulati (since deceased) through LRs v. Sanjiv Kumar and others' decided on 2.12.2019. [/INST]
 {""CASE_NUMBER"": ""['FAO No. 5158 of 2015']"", ""COURT"": ""[]"", ""DATE"": ""['2.12.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rakesh Gulati']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Sanjiv Kumar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.49540662765503
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He stated that the notice regarding constitution of the team was given to him in writing. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.299703121185303
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Tapasya Pisal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 62] However, since, in Tapasya Pisal (supra), the Supreme Court in the concluding portion of its decision had used the expression ""in the interests of justice"" , it was suggested at Bar, that this was probably a case of the Supreme Court exercising its powers under Article 142 of the Constitution of India, which powers undoubtedly, this Court does not possess. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Tapasya Pisal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",9.103347539901732
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.11.2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ullal Police']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The doctor has further stated that on 24.11.2012, the Ullal Police have sent six packed and sealed covers alongiwth weapons for examination and out of six weapons, two are sickles, two are talwars and two are rods. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.11.2012']"", ""GPE"": ""['Ullal']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.843717336654663
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['25/05/2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Ramesh', 'Gopalakrishna']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But in the cross- examination of PW-1, the complainant stated that on 25/05/2016 at about 8 AM through telephonic talk the accused asked the loan amount and he had paid the said amount in the presence of PW-2 and PW-3 i.e., Ramesh and Gopalakrishna. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['25/05/2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ramesh', 'Gopalakrishna']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.475484132766724
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 127', 'section 126']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The controversy that emerged for decision therein was, could an appeal under section 127 of the 2003 Act, carried from an order of assessment made under section 126 thereof, be entertained by the appellate authority if the same were presented beyond the period of limitation prescribed in section 127 itself upon condonation of delay in its presentation? [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 127', 'section 126', 'section 127']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['2003 Act']"", ""WITNESS"": ""[]""}",8.112980604171753
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.11.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['11th Schedule']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Companies Act, 2013']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Consequently the 11th Schedule containing amendments to the Companies Act, 2013 also came into force on 15.11.2016. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.11.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Companies Act, 2013']"", ""WITNESS"": ""[]""}",9.196426630020142
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sec- tion 2(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In view of the expression used in Sec- tion 2(2), the maxim expressum facit cessare tacitum, would not permit by interpretation to hold that Part I would also apply to arbitrations held outside the terri- tory of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sec- tion 2(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.395341873168945
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sandhya']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Secondly, Smt.Sandhya (PW-3), the employer of the deceased in her cross examination has admitted that the family of the deceased was receiving family pension of Rs.15,000/- per month. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sandhya']""}",8.2266845703125
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Godse']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We follow Godse's case (supra) to hold that imprisonment for life lasts until the last breath, and whatever the length of remissions earned, the prisoner can claim release only if the remaining sentence is remitted by Government. 7. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Godse']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.962898015975952
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence, we have before us a community which is conclusively established to be backward and has reached its Nadir on account of their economic distress and the State in its enabling power is duty bound to lead a helping hand to this community in exercise of the duty patil-sachin. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['patil-sachin']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.472841024398804
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the meantime, since the Court had ordered a deposit of a sum of Rs.20 crores in Court and it was thereafter deposited by the defendant no.1, in the Fort Branch, a notice of motion had been taken up seeking withdrawal of the said amount. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.950539588928223
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He deposed that he had seen the accident from 100 foot. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.985905885696411
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['V. Narasaiah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 51A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['LA Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Having noticed the scope of Section 51A of the LA Act as understood by this Court in V. Narasaiah's case to be the correct interpretation, we will now consider whether such evidence is mandatorly binding on the authority or the court concerned or it is only an enabling provision. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['V. Narasaiah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 51A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['LA Act']"", ""WITNESS"": ""[]""}",7.59187126159668
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even temporary, ad hoc or daily-wage service for a long number of years, let alone service for one or two years, will not entitle such employee to claim regularisation, if he is not working against a sanctioned post. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.813430309295654
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Undoubtedly if there is a defect or an omission in the words used by the legislature, the court http://www.judis.nic.in would not go to its aid to correct or make up the deficiency. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.722782373428345
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['14.2.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Civil Appeal No.1665/2019 (Sunita and Ors. Vs. Rajasthan State Road Transport Corporation & Anr.)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Supreme Court by judgment dated 14.2.2019 passed in Civil Appeal No.1665/2019 (Sunita and Ors. Vs. Rajasthan State Road Transport Corporation & Anr.) has held as under :- ""20........ [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No.1665/2019']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['14.2.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunita']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Rajasthan State Road Transport Corporation']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.552515029907228
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['RTO, Barasat']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He sent letter to RTO, Barasat for submission of report with regard to registration no. WB-26C-3869. [/INST]
 {""CASE_NUMBER"": ""['WB-26C-3869']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.736403226852417
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: My findings to the above points is as follows; 1. Point No.1: In the affirmative 2. Point No.2: As per final order for the following; REASONS 08. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.334735870361328
"{""CASE_NUMBER"": ""['APP (DB) No.306 of 2015']"", ""COURT"": ""[]"", ""DATE"": ""['dt.18-04-2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: APP (DB) No.306 of 2015 dt.18-04-2019 accompanied the victim up to Barabar Hills there is no other evidence on record to show that he participated in subsequent action or not. [/INST]
 {""CASE_NUMBER"": ""['APP (DB) No.306 of 2015']"", ""COURT"": ""[]"", ""DATE"": ""['18-04-2019']"", ""GPE"": ""['Barabar Hills']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.959517478942873
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kohli']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['21.1.Gulf DTH FZ LLC vs Dish TV Limited & Ors']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To demonstrate this view of the Delhi High Court, the following decisions were cited by Mr. Kohli: 21.1.Gulf DTH FZ LLC vs Dish TV Limited & Ors. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kohli']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Gulf DTH FZ LLC vs Dish TV Limited']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.114435911178589
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 30.09.2008, a return of income was filed for the assessment year 2008-2009 declaring a total income of INR 92,54,89,822. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.811212062835693
"{""CASE_NUMBER"": ""['Suit No.37 of 1984', 'Suit No. 1101 of 1987']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Senthil Kumaravel']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The plaintiff of Suit No.37 of 1984 Senthil Kumaravel in his written statement in Suit No. 1101 of 1987 has clearly stated that he filed the Suit No.37 of 1984 at the instance of defendant No.1, which fact has also been noted in paragraph 9 of the trial court’s judgment. 87. [/INST]
 {""CASE_NUMBER"": ""['Suit No.37 of 1984', 'Suit No. 1101 of 1987']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Senthil Kumaravel']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.20043659210205
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['U.P. Subordinate Service Selection Commission', 'State of Uttar Pradesh']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['U.P. Subordinate Service Selection Commission Act, 2014', 'Act No. 20 of 2014']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1. U.P. Subordinate Service Selection Commission (hereinafter referred to as, 'the Commission') has been established by the State of Uttar Pradesh for recruitment etc. to subordinate services in different departments of the State, pursuant to The U.P. Subordinate Service Selection Commission Act, 2014 (hereinafter referred to as, 'the Act of 2014'), vide Act No. 20 of 2014. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Uttar Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['U.P. Subordinate Service Selection Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['U.P. Subordinate Service Selection Commission Act, 2014', 'The U.P. Subordinate Service Selection Commission Act, 2014']"", ""WITNESS"": ""[]""}",11.211328983306885
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.03.1970']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The suit was decreed but the Appellate Court reversing the decree held that the findings of the Land Tribunal leading to the certificate dated 24.03.1970 could not be examined by the Civil Court and that no case has been made out by the respondents that the Land Tribunal had failed to follow the procedure under the Act and the Rules in awarding the certificate. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.03.1970']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.864824771881104
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['2 nd July, 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ministry of Law and Justice', 'Ministry of Women and Child Development']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code, 1860', 'Code of Criminal Procedure, 1973', 'Indian Evidence Act, 1872']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After consultation with other stake holders like Ministry of Law and Justice and Ministry of Women and Child Development, a Cabinet Note on ""Review of legal provisions pertaining to sexual assault - Proposal to amend the Indian Penal Code, 1860, the Code of Criminal Procedure, 1973 and the Indian Evidence Act, 1872"" was finalized and sent to the Cabinet for consideration on 2 nd July, 2012. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['2nd July, 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ministry of Law and Justice', 'Ministry of Women and Child Development']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code, 1860', 'Code of Criminal Procedure, 1973', 'Indian Evidence Act, 1872']"", ""WITNESS"": ""[]""}",10.755753755569458
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Karnataka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (7) of Section 63']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Most of the permits obtained under sub-section (7) of Section 63 of the Act in the States other than the State of Karnataka are made use of for the purported use of running the tourist buses by actually the permits were misused to run the tourist vehicle either as stage carriages or as contract carriages. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Karnataka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (7) of Section 63']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.840646982192993
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Kalukuri Vijaya Kumar']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: During the course of investigation, P.W.18 visited the scene of offence, prepared the rough sketch and seized the material objects - bloodstained stone, bangle pieces, electrical plastic wire etc., under the cover of observation report duly attested by P.W.11 and L.W.15 Kalukuri Vijaya Kumar, and got the scene of offence photographed by P.W.12. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kalukuri Vijaya Kumar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.109846353530884
"{""CASE_NUMBER"": ""['Crl.A. No.100106/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ram Narain Singh v. State of Punjab [(1975) 4 SCC 497 : 1975 SCC (Cri) 571 : AIR 1975 SC 1727]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This Court in Ram Narain Singh v. State of Punjab [(1975) 4 SCC 497 : 1975 SCC (Cri) 571 : AIR 1975 SC 1727] has laid down that if the evidence of the witnesses for the prosecution is totally inconsistent with the medical evidence, this is a most fundamental defect in the prosecution case and Crl.A. No.100106/2016 unless reasonably explained, it is sufficient to discredit the entire case. [/INST]
 {""CASE_NUMBER"": ""['Crl.A. No.100106/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Narain Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Crl.A. No.100106/2016']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.300587892532349
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(4)', 'Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: No doubt that a secured creditor may initially resort to the procedure under Section 13(4) and on facing resistance, he may still approach the Magistrate under Section 14. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(4)', 'Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.822087287902832
"{""CASE_NUMBER"": ""['33 C.C.13916 of 2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is 33 C.C.13916 of 2017 alleged in the complaint that, the owner of of the above said land by name Smt. Jayalakshmi had executed another agreement of sale in favour of the accused. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.775231838226318
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT']"", ""DATE"": ""['17.12.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Impex Ferro Tech Limited Vs. Auroma Coke Ltd. (APO No.273 of 2018)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To support the submission as to transfer of the winding up petitions with all connected applications from this Court to NCLT, the said creditors relied upon a Division Bench judgment of this Court passed in the case of Impex Ferro Tech Limited Vs. Auroma Coke Ltd. (APO No.273 of 2018) dated 17.12.2018. [/INST]
 {""CASE_NUMBER"": ""['APO No.273 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""['17.12.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Impex Ferro Tech Limited Vs. Auroma Coke Ltd.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.979722023010254
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Advocates Act, 1961']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But however, the Advocates Act, 1961 only speaks about the rights of the Advocates to practice in any Court or authorities and it does not speaks about the rights of the parties to engage a counsel before the Supreme Court or any other forum ."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Advocates Act, 1961']"", ""WITNESS"": ""[]""}",8.789969444274902
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Orissa Vs. Arun Kumar, reported in AIR 1976 SC 1640']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A challenge to an appointment of the respondent made five years after his confirmation was held to be long and inexplicable delay and the grievance to be too stale to merit redress in State of Orissa Vs. Arun Kumar, reported in AIR 1976 SC 1640. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Arun Kumar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Orissa Vs. Arun Kumar, reported in AIR 1976 SC 1640']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.426149606704712
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Jodhpur Mining Organization', 'BIFR']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For the purpose of this ""hiving off Jodhpur Mining Organization"", Delhi High Court observed that this aspect ought to have been considered at the first instance, hence, it remanded the matter to BIFR for considering proposal of hiving off of Jodhpur Mining Organization into a separate entity. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""['Jodhpur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BIFR']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.359976530075071
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Once the execution of cheque is admitted Section 139 of theAct mandates a presumption that the cheque was for the discharge of any debt or other liability. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.228074312210083
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Ananthapur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Govinda Chowdary']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The plaintiff also learnt that one Govinda Chowdary filed a suit alleging that he was having share in the family properties of the defendants and the said suit was pending on the file of the Subordinate Judge, Ananthapur, wherein he obtained a temporary injunction in respect of the plaint schedule property. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Subordinate Judge, Ananthapur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Govinda Chowdary']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.513577699661257
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Tarn Taran']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Punjab and Sind Bank']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Vinod Kumar', 'Priya Kapoor']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ANALYSIS: 6. From perusal of the same, it is evident that as per the case set up by the appellant/complainant that the appellant claims that the amount in question was advanced in cash in the presence of two witnesses Vinod Kumar and Priya Kapoor, after withdrawing the amount from the bank i.e. Punjab and Sind Bank, Tarn Taran. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Tarn Taran']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Punjab and Sind Bank']"", ""OTHER_PERSON"": ""['Vinod Kumar', 'Priya Kapoor']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.721016645431519
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['X and ors. vs. Union of India and ors. - (2017) 3 SCC 458']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 51] In X and ors. vs. Union of India and ors. - (2017) 3 SCC 458, the Supreme Court was concerned with a pregnancy which had advanced into the 24 th week. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['X and ors. vs. Union of India and ors. - (2017) 3 SCC 458']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.422081232070925
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.02.2007']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Durga Prasad', 'Dwarka Prasad', 'Kamla Devi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The mortgage deed dated 22.02.2007, Ex.PW1/2 reads to the effect: ""And whereas all above three sons and daughters of late Durga Prasad (Dwarka Prasad) executed a relinquishment deed in respect of said property in favor of their mother i.e. second party Smt. Kamla Devi. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.02.2007']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Durga Prasad', 'Kamla Devi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.381045579910278
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 427(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C.']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If a person has also been undergoing a sentence of imprisonment, on subsequent conviction to imprisonment or imprisonment for life, as per Section 427(2) of Cr.P.C., the subsequent sentence shall run concurrently with such previous sentence. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 427(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C.']"", ""WITNESS"": ""[]""}",8.202633619308472
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In a nutshell the objections were that the alleged benami transactions took place at the time of operation of the 1988 Act prior to the 2016 amendment. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.325688123703003
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Army']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The post of Army Commander/Vice Chief of Army Staff, in the rank of Lieutenant General, is the second highest in the hierarchy of the Indian Army, below the Chief of Army Staff. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Army']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.176202058792114
"{""CASE_NUMBER"": ""['W.P.No.9267 of 2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Shivajirao Nilangekar Patil v. Dr. Mahesh Madhav Gosavi (1987) 1 SCC 227']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reference also deserves to be made to the judgment of the three-Judge Bench in Shivajirao Nilangekar Patil v. Dr. Mahesh Madhav Gosavi (1987) 1 SCC 227 in which a new http://www.judis.nic.in W.P.No.9267 of 2017 dimension was given to the power of the Superior Courts to make investigation into the issues of public importance even though the petitioner may have moved the Court for vindication of a private interest. [/INST]
 {""CASE_NUMBER"": ""['W.P.No.9267']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shivajirao Nilangekar Patil', 'Mahesh Madhav Gosavi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.486374616622925
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has submitted that in the instant case, G.S.T. evasion of more than Rs. 100 crores is involved. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.101444721221924
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['G. Ramaswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mithu v. State of Punjab [(1983) 2 SCC 277: 1983 SCC (Cri) 405]']"", ""PROVISION"": ""['Section 303']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reference was then made by Shri G. Ramaswamy to the decision in Mithu v. State of Punjab [(1983) 2 SCC 277: 1983 SCC (Cri) 405] wherein Section 303 of the Indian Penal Code was struck down. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['G. Ramaswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mithu v. State of Punjab [(1983) 2 SCC 277: 1983 SCC (Cri) 405]']"", ""PROVISION"": ""['Section 303']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code']"", ""WITNESS"": ""[]""}",12.289194345474243
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This has resulted in slow pace of recovery of defaulting loans and mounting levels of non-performing assets of banks and financial institutions. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.875616788864136
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['legal Metrology Act, 2009']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The introduction, statement of objects and reasons to the legal Metrology Act, 2009 reads thus: INTRODUCTION: In 1956 uniform standards of weights and measures based on metric systems were established, which were revised in 1976 with a view to give effect to the international system of units. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Legal Metrology Act, 2009']"", ""WITNESS"": ""[]""}",8.369231462478638
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Court observed that where the Constitution thought it ft to do so, it has itself provided for elections by secret ballot e.g. in the case of election of the President of India and the Vice- President of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.824611902236938
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Board of Secondary Education (CBSE)']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court appointed the Central Board of Secondary Education (CBSE) to examine the correctness of key answers. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Board of Secondary Education (CBSE)']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.179917573928833
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1957 SC 434:: 1957 SCR 452 between Smt.Kamala Devi and another V/s Bachulal Gupta and others']"", ""PROVISION"": ""['S.123']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['T.P. Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: AIR 1957 SC 434:: 1957 SCR 452 between Smt.Kamala Devi and another V/s Bachulal Gupta and others, wherein the Hon'ble Apex Court has held that, it is true that a gift becomes legally effective only when a registered instrument is executed in the manner laid down in S.123 T.P. Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kamala Devi', 'Bachulal Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1957 SC 434:: 1957 SCR 452']"", ""PROVISION"": ""['S.123']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['T.P. Act']"", ""WITNESS"": ""[]""}",11.857985019683838
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.Rajaseekaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is important to note here that in S.Rajaseekaran, the Supreme Court recorded the recommendations of working Group. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.Rajaseekaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.639014482498169
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The term ""district"" has been referred to as a revenue area under Section 5 of the Code, 2006, and in terms thereof two or more districts may form a division, and a district may consist of two or more tahsils, each tahsil may consist of one or more parganas, each pargana may consist of two or more villages. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code, 2006']"", ""WITNESS"": ""[]""}",8.921900272369385
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(1)(zb)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Section 2(1)(zb) defines security agreement to mean an agreement, instrument or any other document or arrangement under which security interest is created in favour of the secured creditor, including the creation of mortgage by deposit of title deeds with the secured creditor. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(1)(zb)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.896076917648315
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Tribunal also noticed that the seating capacity of the offending vehicle was 19 persons including the driver and that there was no evidence placed on record by the insurer that there were more than 19 people traveling in the offending vehicle at the time of the accident. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.944680452346802
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We see no reason, therefore, to interdict the tender notification at the behest of the appellants who, admittedly, do not fulfill the main eligibility criteria of having manufactured and supplied 1000 sq. mm 220 KV copper conductor cables of a length of 245 KMs, and of laying underground cables of such quality, size and length. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.953373670578003
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 22']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['West Bengal Societies Registration Act, 1961']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: I can very firmly say that the power under Section 22 of the said Act was fully preserved while enacting the West Bengal Societies Registration Act, 1961. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 22']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['West Bengal Societies Registration Act, 1961', 'West Bengal Societies Registration Act, 1961']"", ""WITNESS"": ""[]""}",10.148019313812256
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: So the employees of government-aided and public schools are, therefore, governed by the said scheme and not by the said 1948 Act, and it is not the case of the State Government that both the said scheme and the said 1948 Act are to be extended to the employees of government-aided and public schools. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.470453977584839
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mustafi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In an off shoot on an application for probate originally filed by one Mustafi in the Court of the District Judge. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mustafi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.679703950881958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17-10-2000']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She was medically examined on 17-10-2000 at 12:40 A.M. in the night and following injuries were found on her body : 1. Firearm gun shot injury wound of entrance on the right side of abdomen near (Not ""legible"" but as per evidence ""Navel"") inverted margins oval shape. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17-10-2000']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.305494785308838
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13-1-2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After fresh investigation, CBI filed a charge-sheet bearing No. 1/2010 in the present case on 13-1-2010. [/INST]
 {""CASE_NUMBER"": ""['charge-sheet bearing No. 1/2010']"", ""COURT"": ""[]"", ""DATE"": ""['13-1-2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.164323091506958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Indtel Technical Services (P) Ltd. v. W.S. Atkins Rail Ltd., (2008) 10 SCC 308']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: [Indtel Technical Services (P) Ltd. v. W.S. Atkins Rail Ltd., (2008) 10 SCC 308 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Indtel Technical Services (P) Ltd. v. W.S. Atkins Rail Ltd., (2008) 10 SCC 308']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.496043682098389
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Tirlok Nath v. Union of India [1967 SLR 759 (SC)]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The appellant relied on Tirlok Nath v. Union of India [1967 SLR 759 (SC)] in support of the proposition that if a public servant facing an inquiry is not supplied copies of documents, it would amount to denial of reasonable opportunity. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Tirlok Nath v. Union of India [1967 SLR 759 (SC)]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.231076002120972
"{""CASE_NUMBER"": ""['E.A.No.780 of 2020', '6 th O.P.(C)No.446 of 2021', 'C.R.P.No.81 of 2021']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Ernakulam']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: By the impugned order, the execution court allowed E.A.No.780 of 2020 and the 6 th O.P.(C)No.446 of 2021 & :-81-: C.R.P.No.81 of 2021 respondent District Educational Officer, Ernakulam, was directed to approve change of management of the school, based on the application made by the decree holders. [/INST]
 {""CASE_NUMBER"": ""['E.A.No.780 of 2020', 'O.P.(C)No.446 of 2021', 'C.R.P.No.81 of 2021']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Ernakulam']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.853302478790283
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mahwa', 'Dausa', 'Samleti village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When the bus had covered about 3- 4 kilometers from Mahwa towards Dausa, there was a loud blast in the bus near Samleti village. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mahwa', 'Dausa']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.92194128036499
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 17']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act, 1908']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per Section 17 of the Registration Act, 1908, title of an immovable property gets transferred only on execution of a registered instrument evidencing sale and / or transfer. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 17']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act, 1908']"", ""WITNESS"": ""[]""}",7.856534957885742
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The accused may adduce direct evidence to prove that the note in question was not supported by consideration and that there was no debt or liability to be discharged by him. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.992572546005249
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Central Excise vs. Wockhardt Life Sciences Limited [(2012) 5 SCC 585]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Emphasis on technical meaning has been highlighted in the case of Commissioner of Central Excise vs. Wockhardt Life Sciences Limited [(2012) 5 SCC 585] for resolving classification related disputes of goods. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Central Excise vs. Wockhardt Life Sciences Limited [(2012) 5 SCC 585]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.20438003540039
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections - 54 and 59 (1)', 'Section - 273']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['FSS Act', 'IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondents - police are incompetent to investigate the offence punishable under Sections - 54 and 59 (1) of the FSS Act and allegations in the charge sheet coupled with the statements do not disclose the commission of the offence punishable under Section - 273 of IPC since transportation of noxious food is not included under Section - 273 of IPC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections - 54 and 59 (1)', 'Section - 273']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['FSS Act', 'IPC']"", ""WITNESS"": ""[]""}",9.882744312286375
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Navi Mumbai']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Municipal Corporation of city of Navi Mumbai']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MRTP Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For a part of Navi Mumbai, the Municipal Corporation of city of Navi Mumbai (for short `the said Corporation') is the Planning Authority within the meaning of MRTP Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Navi Mumbai']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Municipal Corporation of city of Navi Mumbai']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MRTP Act']"", ""WITNESS"": ""[]""}",8.484810829162598
"{""CASE_NUMBER"": ""['Crl.Appeal No.567 of 2014']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Varma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Jose M.Philip', 'Prameela S.', 'N.A.Balaram']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For Crl.Appeal No.567 of 2014 and considering merit of the prosecution case that the accused 2, 3 and 5 made deceased Varma to drink juice mixed with alcohol and thereafter they administered chloroform to stupefy him, the testimony of PW40 Jose M.Philip and his report (Ext.P84), oral evidence tendered by PW66 Prameela S. and her reports (Exts.P160 to P162) and also the testimony of PW69 Dr.N.A.Balaram will be relevant. [/INST]
 {""CASE_NUMBER"": ""['Crl.Appeal No.567 of 2014']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Varma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Jose M.Philip', 'Prameela S.', 'N.A.Balaram']""}",11.3141450881958
"{""CASE_NUMBER"": ""['civil suit Nos.436-CS of 2005 and 76 of 2005', 'RSA No.1102 of 2013']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Since the appeals have arisen out of decision of two civil suit Nos.436-CS of 2005 and 76 of 2005, the facts are being taken from lead case, i.e. RSA No.1102 of 2013. [/INST]
 {""CASE_NUMBER"": ""['RSA No.1102 of 2013']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.280784606933594
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Ext.A23 series are statements of monthly rent collected by the proprietor of Nandilath Towers for the years 2003-13 from the tenants of Nandilath buildings. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Nandilath Towers']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.291567325592041
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For instance, it is a matter of common knowledge that if a body of persons go armed to take forcible possession of the land, it would be right to say that someone is likely to be killed and all the members of the unlawful - 94 - assembly must be aware of that likelihood and would be guilty under the second part of Section 149 IPC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",8.187452554702759
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 48', 'Article 1.2.1 (b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 233. Article 48 has to be read conjointly with Article 1.2.1 (b) which provides that references to laws of India or Indian law or regulation having the force of law shall include the laws, acts, ordinances, rules, regulations, bye laws or notifications which have the force of law in the territory of India and as from time to time may be amended, modified, supplemented, extended or re-enacted. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 48', 'Article 1.2.1 (b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.853336811065674
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['D.V. Seetharam Murthy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was contended by Mr. D.V. Seetharam Murthy, learned Senior Counsel for one of the petitioners that the role of the Portfolio/Inspecting Judge in assessing the performance of an officer is very vital and that therefore, if he is not present when a review is undertaken by the Administrative Committee at the time of the officer attaining the age of 58 years, the same may vitiate the whole process. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['D.V. Seetharam Murthy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.735812902450562
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Bankey Lal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Accordingly, I hold that the Revisional Court has rightly set aside the order of R.C. & E.O. passed on review petition of the landlord filed before R.C. & E.O. and rightly allowed the review petition of the landlord filed before R.C. & E.O. and quashed the allotment in favour of the Bankey Lal."" 20. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Bankey Lal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.326469421386719
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['21.04.2005']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Ex.D.1 & D2 were made on 21.04.2005. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['21.04.2005']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.952009439468384
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.03.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This led to passing of an Award dated 18.03.2016 in favour of Blueberry / Decree Holder and against Iceberg-Judgment Debtor. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.03.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Blueberry', 'Iceberg']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.9644775390625
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order VII Rule 11', 'Section 4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC', 'Benami Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The wife filed petition under Order VII Rule 11 CPC to reject the plaint on the plea suit is not maintainable in terms of Section 4 of Benami Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order VII Rule 11', 'Section 4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Act']"", ""WITNESS"": ""[]""}",9.26921010017395
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16.08.2001']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Paltry amount of Rs. 2 lacs was offered towards 80% of the compensation to the land owner/ petitioner while invoking Circular dated 16.08.2001, which had been issued in respect of agricultural lands. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16.08.2001']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.389388799667358
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On a careful consideration, there- fore, of the authorities referred to above, the following propositions emerge: 1. That in order to decide the question of repugnancy it must be shown that the two enactments con- tain inconsistent and irreconcil- able provisions, so that they can- not stand together or operate in the same field. 2. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.08562445640564
"{""CASE_NUMBER"": ""['Special Leave to Appeal (C) No. 12328/2017']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['28 th April, 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also a fact that an SLP instituted against the opinion (supra), has also been declined by the Supreme Court on 28 th April, 2017 in Special Leave to Appeal (C) No. 12328/2017. [/INST]
 {""CASE_NUMBER"": ""['Special Leave to Appeal (C) No. 12328/2017']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['28 th April, 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.432324647903442
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (3) of section 147', 'sub-section (2)', 'sub-section (3)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For the purposes of this sub-section, certificate of insurance means the certificate issued under sub-section (3) of section 147. (4) If the licence referred to in sub-section (2) or the certificates or permit referred to in sub-section (3), as the case may be, are not at the time in the possession of the person to whom demand is made [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (3) of section 147', 'sub-section (3)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.20430850982666
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 300']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This is also borne out from illustration (c) to Section 300 IPC which is being reproduced below: - ""(c) A intentionally gives Z a sword-cut or club- wound sufficient to cause the death of a man in the ordinary course of nature. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Z']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 300']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",8.548847436904907
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CIT vs. Ahmedbhai Umarbhai& Co.: 18 ITR 472']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The principle of attribution has been upheld by the Hon'ble Supreme Court of India in the case of CIT vs. Ahmedbhai Umarbhai& Co.: 18 ITR 472. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CIT vs. Ahmedbhai Umarbhai& Co.: 18 ITR 472']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.066603899002075
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagdish']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has further deposed that thereafter, SI Jagdish prepared site plan at his instance and thereafter, he left the spot. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagdish']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.645496129989624
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There can never be any straitjacket formula or fixed parameters for determining mental cruelty in matrimonial matters. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.928130149841309
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: With this background, let us analyse the impugned judgment of the High Court and find out whether it satisfies any of the tests formulated above. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.367480278015137
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Florida']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But the decision of the Circuit Court was appealed to the Third District Court of Appeal, State of Florida. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Third District Court of Appeal']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.320387125015259
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Writ Petition No.196 of 2001, People\u2019s Union for Civil Liberties vs. Union of India and 4 others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This Court in a Public Interest Litigation in Writ Petition No.196 of 2001, People’s Union for Civil Liberties vs. Union of India and 4 others, had issued various directions for protection of right to food of the poor and the underprivileged sections including children and women. [/INST]
 {""CASE_NUMBER"": ""['Writ Petition No.196 of 2001']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['People’s Union for Civil Liberties']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.955366611480711
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['6 April 2011']"", ""GPE"": ""['Mukhed']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A second enquiry was initiated against the appellant through a memorandum dated 6 April 2011 on the charge that the petitioner without depositing the pistol and ammunition proceeded to Mukhed. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['6 April 2011']"", ""GPE"": ""['Mukhed']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.7792463302612305
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['AFRC']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 4(vi)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Rule 4(vi) stipulates that the fees or scale of fees determined by the AFRC shall be valid for a period of three years. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['AFRC']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 4(vi)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.778995990753174
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It will be open for the respondents to give their say on the merits of each of the 339 complainants. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.0509033203125
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ismail Faruqui\u2019s']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mohd. Aslam alias Bhure Vs. Union of India and Others, (2003) 2 SCC 576']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Similarly, judgment of this Court in Mohd. Aslam alias Bhure Vs. Union of India and Others, (2003) 2 SCC 576 was a case where an interim order was passed by this Court with regard to acquisition of 67.703 acres of land as was noticed in Ismail Faruqui’s case. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mohd. Aslam alias Bhure', 'Ismail Faruqui']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.6314799785614
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Bill was introduced by the State Government on 29 th patil-sachin. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['29 th patil-sachin']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.715258359909058
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Various properties were mortgaged/hypothecated as security therefor. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.889631986618042
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (3) The percentage of landless and marginal farmers (lands ownership less than 2.5 acres) is found to be around 71% amongst the Maratha families whereas the percentage of big farmers holding about 10 acres of land is only 2.7%. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.827166795730591
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23.02.1987']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Town and Country Planning, Madras', 'Thoothukudi Panchayat']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Director of Town and Country Planning, Madras, addressed the Commissioner, Thoothukudi Panchayat vide letter dated 23.02.1987, by which the consent was granted for construction and commissioning of the petitioner in the land in SIPCOT industrial complex. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23.02.1987']"", ""GPE"": ""['Madras', 'Thoothukudi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SIPCOT']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.5938138961792
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.04.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He did not meet him before 24.04.2011. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.04.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.100802659988403
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Waqf Board']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Waqf Act, 1995']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , it was stated that pursuant to an amendment in the Waqf Act, 1995 ('the Central Act' for short) in the year 2013, the Waqf Board took a decision to acquire the Waqf property and place it under its direct control for the purpose of development. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Waqf Act, 1995']"", ""WITNESS"": ""[]""}",8.131285667419434
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Madan Mohan Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: During the course of search at the residence of one Madan Mohan Gupta, the incriminating documents including a pocket diary were seized. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Madan Mohan Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.989449739456177
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ahlmad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Ahlmad of the court is directed to take immediate steps in that regard. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ahlmad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.463568687438965
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A concern would risk undertaking such exploration and incur heavy costs only if it was assured utilisation of the resource discovered: a prudent business venture would not like to incur the high costs involved in exploration activities and then compete for that resource in an open auction. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.33094334602356
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anil Kumar Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Cheque was filled up by Anil Kumar Gupta himself. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anil Kumar Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.752254486083984
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kasturmal Agrawal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Shamlal Agrawal']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, neither Shamlal Agrawal (PW-1) deposed regarding signing of Will by Kasturmal Agrawal in presence of two witnesses and signing of Will by witnesses in presence of Kasturmal Agrawal, nor the plaintiff has examined any witness to prove the same compliance. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kasturmal Agrawal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.951858997344971
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['C.S. Aggarwal', 'Anil Sharma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner examined two witnesses, namely, C.S. Aggarwal (the petitioner) as PW-1 and Anil Sharma as PW-2. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['C.S. Aggarwal']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Anil Sharma']""}",8.07668161392212
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (iv) Where the contract provides that the standard form of terms and conditions of an independent trade or professional institution (as for example the standard terms and conditions of a trade association or architects association) will bind them or apply to the contract, such standard form of terms and conditions including any provision for arbitration in such standard terms and conditions, shall be deemed to be incorporated by reference. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.566380977630615
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Amendment Act of 2016', 'Principal Act of 1988']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence, applying the test aforesaid, to the question of retrospective application of the amended provisions, involved in the instant batch of writ applications, would make it evident that the object in introduction of the amendments, through Benami Amendment Act of 2016, is to effectively cure the mischief which could not be checked effectively, as intended by the Principal Act of 1988. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Amendment Act of 2016', 'Principal Act of 1988']"", ""WITNESS"": ""[]""}",8.532063484191895
"{""CASE_NUMBER"": ""['WP No.17384 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['20.06.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that the Hon’ble High Court directed in its order dated 20.06.2019 in WP No.17384 of 2019 that the respondents are to submit a report in the form of an affidavit, duly supported by documents as to what action has been taken against the alleged violations. [/INST]
 {""CASE_NUMBER"": ""['WP No.17384 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['20.06.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.650843143463137
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The said judgment was reported in M. Venkateswara Rao v. Secretary, RTA, Warangal, 2000(1)ALT170 . [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M. Venkateswara Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.308610916137695
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As a result, there is no justification for invoking para 5 of the O.M. of 1986. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['para 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.317725896835327
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: So, the cheque was issued for Rs.50,000/- as a B.C. amount. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.690677881240845
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Krishna District', 'Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner has studied from 1983 to 1989 in Krishna District, which comes under the State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Krishna District', 'Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.974280595779419
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The employees, however, were demanding the introduction of a pension scheme. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.742408275604248
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13.03.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.P.S. Gowri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Subsequently, Smt. S.P.S. Gowri sold the land to the petitioner vide sale deed dated 13.03.2008 and the document was presented for registration under the provisions of the Registration Act on 13.03.2008. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13.03.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.P.S. Gowri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act']"", ""WITNESS"": ""[]""}",9.499037981033323
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['28.9.2003', '10.10.2003']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The first and second consignments were dispatched on 28.9.2003 and 10.10.2003 respectively which were lost and could not be traced as per the report submitted by the defendant no. 2 transporter. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['28.9.2003', '10.10.2003']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.470757961273192
"{""CASE_NUMBER"": ""['MACA No. 480 of 2012']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['14.11.1994']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajesh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (6) of Section 158']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Motor Vehicles Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Rajesh (supra), the Apex Court noticed that, after the amendment of the Motor Vehicles Act by Act 54 of 1994, with effect from 14.11.1994, the report on motor vehicle accident prepared by the police officer and forwarded to the Claims Tribunal under sub-section (6) of Section 158 has to be MACA No. 480 of 2012, etc. treated as an application for compensation. [/INST]
 {""CASE_NUMBER"": ""['MACA No. 480 of 2012']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['14.11.1994']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajesh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (6) of Section 158']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Motor Vehicles Act', 'Act 54 of 1994']"", ""WITNESS"": ""[]""}",11.25808596611023
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The said decision of the learned Single Judge of the Madras High Court has attained finality between the parties and none of the respondents can re- [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.346985101699829
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Legislative policy also aims for giving finality of the litigation, simultaneously providing higher forum of appeal/revision to vend the grievances of an aggrieved party. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.700114011764526
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2006']"", ""GPE"": ""['Helabattala', 'Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Prosecution has sought to rely on the evidence of P.W.s 2, 4 to 8 with regard to the recovery of 191 kgs of ganja from the rear seat of a Tata Mahindra Marshal vehicle bearing registration no.WB-26C-3869 at Helabattala, Barasat around 6.15 a.m. of 27.09.2006 which was driven and occupied by the appellants. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2006']"", ""GPE"": ""['Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['P.W.s 2', 'P.W.s 4 to 8']""}",10.215900421142578
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['21.06.2010', 'Shri Samarth Ashram School, Bedag']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Miraj Rural Police Station']"", ""OTHER_PERSON"": ""['Hanmant Sheshrau Shirsat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At 20.45 hrs on 21.06.2010, Hanmant Sheshrau Shirsat gave a statement in the Miraj Rural Police Station that his daughter who was 9 years old and studying in the 4 th standard at Shri Samarth Ashram School, Bedag was missing since 10.00 am. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['21.06.2010']"", ""GPE"": ""['Miraj', 'Bedag']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Shri Samarth Ashram School']"", ""OTHER_PERSON"": ""['Hanmant Sheshrau Shirsat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.733759880065918
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per the dictionary meaning, the word 'noxious' is harmful, deleterious, injurious, poisonous etc. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.344883441925049
"{""CASE_NUMBER"": ""['SLP(C) No 30381 of 2011']"", ""COURT"": ""[]"", ""DATE"": ""['24 September 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this context, reliance has been placed on an order dated 24 September 2013 of a two-Judge Bench of this Court in SLP(C) No 30381 of 2011 when the Court was seized of a tender dispute relating to transportation of fly ash. [/INST]
 {""CASE_NUMBER"": ""['SLP(C) No 30381 of 2011']"", ""COURT"": ""[]"", ""DATE"": ""['24 September 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.541314601898192
"{""CASE_NUMBER"": ""['Writ-C No. 23181 of 2018', 'Writ-C No. 23183 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Prayagraj Power Generation Company Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The second writ petition has been filed by Association of Power Producers ( Writ-C No. 23181 of 2018) and the third writ petition (Writ-C No. 23183 of 2018) by Prayagraj Power Generation Company Limited. [/INST]
 {""CASE_NUMBER"": ""['Writ-C No. 23181 of 2018', 'Writ-C No. 23183 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Association of Power Producers', 'Prayagraj Power Generation Company Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.97301697731018
"{""CASE_NUMBER"": ""['W.P.No.33868 of 2013']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 15(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Acquisition Act, 1894']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The learned counsel appearing for the petitioners in W.P.No.33868 of 2013 submitted that the respondents resorted to acquire lands in terms of the impugned notice issued under Section 15(2) of the Act is unfounded and unsustainable in law, since it doesn't come within the purview of the above said Act and the respondents ought to have invoked the provisions under the Land Acquisition Act, 1894. [/INST]
 {""CASE_NUMBER"": ""['W.P.No.33868']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 15(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Acquisition Act, 1894']"", ""WITNESS"": ""[]""}",9.92477297782898
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Lotus Realtech Pvt. Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This Court has perused the decision in M/s. Lotus Realtech Pvt. Ltd. (supra), and finds that it has set out the relevant portions of the recent decision of the Supreme Court in M/s. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['M/s. Lotus Realtech Pvt. Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.187489032745361
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.02.2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BBMP']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the said letter it is also stated that BBMP had sanctioned plans for wings A to K upto 17 floors vide its order dated 24.02.2012 issued by the Joint Director, Town Planning, BBMP and further based on the NOC issued for 62 meters, they have constructed the building for the said height. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.02.2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BBMP']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.39684534072876
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pazhukkamattom Devaswom v. Lakshmikutty Amma (1980 KLT 645)']"", ""PROVISION"": ""['Section 92']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He cited the judgment of this Court in Pazhukkamattom Devaswom v. Lakshmikutty Amma (1980 KLT 645) in support and argued that the question of jurisdiction of an Additional District Judge to consider and grant leave under Section 92 of the CPC is no longer res integra, it having been answered affirmatively in this judgment. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pazhukkamattom Devaswom v. Lakshmikutty Amma (1980 KLT 645)']"", ""PROVISION"": ""['Section 92']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC']"", ""WITNESS"": ""[]""}",10.726764678955078
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Human Rights Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Zahira Habibullah Sheikh v State of Gujarat (2006) 3 SCC 374']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The absence of a proper witness protection programme and its adverse effect on the criminal justice system has been acknowledged by the Supreme Court both in Zahira Habibullah Sheikh v State of Gujarat (2006) 3 SCC 374 and in the National Human Rights Commission (supra). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Human Rights Commission']"", ""OTHER_PERSON"": ""['Zahira Habibullah Sheikh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.749332666397095
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 46(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Banking Regulation Act, 1949']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: the Petitioner Bank submitted that an accused person is punishable for contravention of Section 46(1) of the Banking Regulation Act, 1949 only when the return/balance-sheet/other document/information has been provided by or under or for the purposes of any of the provisions of the Banking Regulation Act, 1949. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 46(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Banking Regulation Act, 1949']"", ""WITNESS"": ""[]""}",9.41986846923828
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kiran Suri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Municipal Corporation of Greater Bombay v. Kisan Gangaram Hire [1987 ACJ 311]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In support of her contention, the learned counsel for the appellant Ms.Kiran Suri referred to the decision of the Bombay High Court in Municipal Corporation of Greater Bombay v. Kisan Gangaram Hire [1987 ACJ 311] wherein the Court dealt with a similar contention and observed thus: ""8. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kiran Suri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Municipal Corporation of Greater Bombay v. Kisan Gangaram Hire [1987 ACJ 311]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.392822265625
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['R. S. Ghuraiya']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: R. S. Ghuraiya (P.W. 20) has investigated the matter. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['R. S. Ghuraiya']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.243139505386353
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ram Chandra Singh v. Savitri Devi [(2003) 8 SCC 319 : JT (2005) 11 SC 439]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reference, in this connection, may also be made to Ram Chandra Singh v. Savitri Devi [(2003) 8 SCC 319 : JT (2005) 11 SC 439] . 23. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ram Chandra Singh v. Savitri Devi [(2003) 8 SCC 319 : JT (2005) 11 SC 439]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.487551927566528
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Channagiri']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Channa Veeroji Rao', 'Shivaji Rao', 'Ningoji Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Kubendroji Rao']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: P.W.2 Kubendroji Rao has deposed that the marriage talks took place in the house of P.W.1 at Channagiri and on the side of the bride, himself, Channa Veeroji Rao, Shivaji Rao, Ningoji Rao and parents of bride were present. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Channagiri']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Channa Veeroji Rao', 'Shivaji Rao', 'Ningoji Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.548803091049194
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Andhra Pradesh']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per the study details of the petitioner, she has been rightly allocated to the State of Andhra Pradesh as per her local status. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.443470239639282
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 157 and 159']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CrPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The purpose and object is very obvious which is spelt out from the combined reading of Sections 157 and 159 CrPC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 157 and 159']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CrPC']"", ""WITNESS"": ""[]""}",7.539252519607544
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anuja']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, it was never alleged against the Appellants that they had killed the deceased Anuja at the spot, where her dead body was found. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anuja']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.376904726028442
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Imambaksh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The shop of Imambaksh is approximately 12 ft wide. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Imambaksh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.939791440963745
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Appellant initially denied any knowledge about the missing girl. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.055713653564453
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Bureau of Investigation']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On the other hand, learned counsel appearing on behalf of the respondent – Central Bureau of Investigation has very vehemently opposed the grant of bail. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Bureau of Investigation']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.069494009017944
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If the examination of a witness continues till late hours the trial can be adjourned to the next day for cross-examination. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.216467142105103
"{""CASE_NUMBER"": ""['D. REF. No.1 of 2018']"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['11 -11-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Immediately, he himself, heading the police party proceeded to the spot when they found the door of the Patna High Court D. REF. No.1 of 2018 dt. 11 -11-2020 house to be bolted from inside and T.V. on as they could hear the sound; blood appeared to be flowing on the street. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['11-11-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.649776458740234
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Supreme Court observed ""He can take recourse to a procedure recognized and accepted in law to retrieve and redeem his reputation"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.421600341796875
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 68', 'Section 63']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Evidence Act', 'Indian Succession Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: From the above three decisions, the following principles can be deduced: 1) the propounder of the Will has to dispel the suspicious circumstances surrounding the execution of the Will, and (2) in order to prove the Will, one of the attestors has to be examined in view of Section 68 of Indian Evidence Act and Section 63 of the Indian Succession Act. 39 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 68', 'Section 63']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Evidence Act', 'Indian Succession Act']"", ""WITNESS"": ""[]""}",8.178286075592041
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Kerala v Maar AppraemKuri Co.']"", ""PROVISION"": ""['Article 254(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, the Writ Petitioners before us ultimately succeed because, Article 254(1) by its operation rendered the impugned Tamil Nadu Legislations repugnant, and null and void, as on the date on which the New Act was made, i.e. 27.09.2013, the date of making of the New Act, as held in the case of State of Kerala v Maar AppraemKuri Co. (Supra) and therefore the impugned Acts do not survive. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Kerala v Maar AppraemKuri Co.']"", ""PROVISION"": ""['Article 254(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.314040184020996
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bombay Tyre International 1983 (14) ELT', 'Indian Oxygen Ltd. 1988 (36) ELT 723 SC', 'Baroda Electric Meters 1997 (94) ELT 13 SC']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Transportation is an entirely different activity from manufacture and this position remains settled by the judgment of Honorable Supreme Court in the cases of Bombay Tyre International 1983 (14) ELT, Indian Oxygen Ltd. 1988 (36) ELT 723 SC and Baroda Electric Meters 1997 (94) ELT 13 SC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bombay Tyre International 1983 (14) ELT', 'Indian Oxygen Ltd. 1988 (36) ELT 723 SC', 'Baroda Electric Meters 1997 (94) ELT 13 SC']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.915787935256958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence I pass an award for Rs. 49,96,719/- with pendente lite and future interest @ 18% from the date of filing of the claim petition till realization in addition to costs calculated hereunder Interest pendente lite on Rs. 49,96,719/- for 4 years and 10 months and 5 days comes to Rs. 43,59,637/-. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.8112311363220215
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mohd. Aslam']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: That, during the trial, accused Mohd. Aslam (A3) died and, therefore, the case of the said accused was ordered to be abated. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mohd. Aslam']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.573287725448608
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sabeena', 'Anil Sethi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She further stated that in summer of 2005, Sabeena (A-8) took her to a hotel where they met accused Anil Sethi (A-7), who took her to Imperial Hotel, Nehru Park and had sexual intercourse with her in a room on the second floor of the hotel. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sabeena']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Anil Sethi']""}",7.303292274475098
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24th March, 1971']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Permanent Residential Certificate issued from outside the State upto 24th March, 1971 (midnight) (which all should be got verified from the issuing authority by the Registering authority) 6. Refugee registration certificate issued upto 24th March, 1971 (midnight) 7. Passport issued by the Government of India upto 24th March, 1971 (midnight) 8. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24th March, 1971']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.134297609329224
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.01.2020']"", ""GPE"": ""['Mattannor Municipality']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Draft electoral roll for the constituencies of Local Self Government Institutions, except Mattannor Municipality, has been published on 20.01.2020. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.01.2020']"", ""GPE"": ""['Mattannor']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.761627197265625
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Arun Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, it is clear that Arun Sharma (Tenant) was unlawfully taken into custody with malice and in utter misuse of the official position. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Arun Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.270441055297852
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Chandrachud']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Indian Young Lawyers Assn. v. State of Kerala, 2018 SCC OnLine SC 1690', 'Joseph Shine v. Union of India, 2018 SC OnLine SC 1676']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Such actions would inherently affect women Indian Young Lawyers Assn. v. State of Kerala, 2018 SCC OnLine SC 1690, (Chandrachud J., concurring opinion, paragraph 117); Joseph Shine v. Union of India, 2018 SC OnLine SC 1676, (Chandrachud J, concurring opinion, para 38) (“Joseph Shine”) [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Chandrachud']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Indian Young Lawyers Assn. v. State of Kerala, 2018 SCC OnLine SC 1690', 'Joseph Shine v. Union of India, 2018 SC OnLine SC 1676']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.586449146270752
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, the decree holder being a trust and there were a number of beneficiaries of the trust, the Apex Court directed the disbursement of certain amount subject to the condition that those withdrawals would not create any special equity and shall be subject to the outcome of the suit. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.09163498878479
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Likewise, In the power of attorney (exhibit P/116) executed between Rajendra Kumar & others and Atul Surana, the plaintiff signed as a witness with name of Satish Sharma s/o Shankarlal R/o 78A Parashnand Nagar, Indore. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Indore']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajendra Kumar', 'Atul Surana', 'Satish Sharma', 'Shankarlal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.736321687698364
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 115', 'Article 301']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The power envisaged under Section 115 is statutory, whereas Article 301 is a constitutional guarantee. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 115', 'Article 301']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.463820695877075
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO', 'Enercon (India) Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Though we have opined that Shashoua principle has been accepted in BALCO and Enercon (India) Ltd. (supra), yet we think it apt to refer to the clauses in the agreement and scrutinize whether there is any scope to hold that the courts in India could have en- tertained the petition. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO', 'Enercon']"", ""OTHER_PERSON"": ""['Shashoua']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.046863794326782
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Thalappalam Service Co- operative Bank Ltd. v. State of Kerala [(2013) 16 SCC 82]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Thalappalam Service Co- operative Bank Ltd. v. State of Kerala [(2013) 16 SCC 82] the Apex Court has discussed the autonomy of co-operatives vis-à- vis the constitutional provisions. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Thalappalam Service Co- operative Bank Ltd. v. State of Kerala [(2013) 16 SCC 82]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.827491760253906
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['3.6.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the year 2011-12, the petitioner had decided to reconstruct the building over the plot in question inasmuch as the previous construction had become old and unsafe, hence had applied for planning report and the same was issued vide memo no. 4633 dated 3.6.2011. [/INST]
 {""CASE_NUMBER"": ""['memo no. 4633']"", ""COURT"": ""[]"", ""DATE"": ""['3.6.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.616426944732666
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17-04-2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Kum. C. Yamini v. State of A.P.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, the second writ petition came up for hearing earlier and by a judgment dated 17-04-2017 reported in Kum. C. Yamini v. State of A.P. , a Bench of this Court to which one of us was a party, (VRSJ) dismissed the writ petition. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17-04-2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['C. Yamini']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.610551595687866
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gaya', 'Bihar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is further evident that when the appellant was signed off and declared medically unfit, he returned back to his home in the District of Gaya, Bihar and, thereafter, he made all claims and filed representation from his home address at Gaya and those letters and representations were entertained by the respondents and replied and a decision on those representations were communicated to him on his home address in Bihar. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gaya', 'Bihar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.526092290878296
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17.08.2017']"", ""GPE"": ""['Chennai']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nalini Chidambaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reply given by the Chartered Accountant on behalf of Nalini Chidambaram, to the Deputy Director of Income Tax (Investigation), Chennai/third respondent, dated 17.08.2017, is extracted hereunder:- [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17.08.2017']"", ""GPE"": ""['Chennai']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nalini Chidambaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.573935985565186
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (c) The aforesaid cheque was presented by the complainant for payment through her banker -Canara Bank, Karol Bagh, New Delhi for its encashment, however the same was returned as dishonoured vide cheque returning memo dated 12.06.2010 with the remarks ""account closed"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.06.2010']"", ""GPE"": ""['Karol Bagh', 'New Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Canara Bank']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.201733827590942
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We may also point out that on an earlier occasion when the matter came before this Court in Civil Appeal No. 2216 of 2000, order dated 17-3-2005[2005 (187) E.L.T. A33 (S.C.)] was passed remitting the case back to the Tribunal with the directions to decide the appeal on merits giving its reasons for accepting or rejecting the submissions. [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No. 2216 of 2000']"", ""COURT"": ""[]"", ""DATE"": ""['17-3-2005']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['order dated 17-3-2005[2005 (187) E.L.T. A33 (S.C.)]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.022268533706663
"{""CASE_NUMBER"": ""['M.C.O.P.No.2224 of 2011']"", ""COURT"": ""['Chief Court of Small Causes-cum-Motor Accidents Claims Tribunal, Chennai']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The amount deposited by the appellant/Insurance Company, if any, in the credit of M.C.O.P.No.2224 of 2011 on the file of the Chief Court of Small Causes-cum-Motor Accidents Claims Tribunal, Chennai, is permitted to be withdrawn by the appellant/Insurance Company, by filing an appropriate application. [/INST]
 {""CASE_NUMBER"": ""['M.C.O.P.No.2224']"", ""COURT"": ""['Chief Court of Small Causes-cum-Motor Accidents Claims Tribunal, Chennai']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.438266277313232
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Cairns']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In a classic passage Lord Cairns stated the principle thus ; ""If the person sought to be taxed comes within the letter of the law he must be taxed, however great the hardship may appear to the judicial mind to be. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Cairns']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.916657209396362
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Reepak Kansal vs. Union of India [W.P. (C) No. 762 of 2020]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that similar prayers have been sought in a petition filed before the Supreme Court in Reepak Kansal vs. Union of India [W.P. (C) No. 762 of 2020], wherein prayers are made to restrain broadcasting news, debates and interfering in the administration of justice. [/INST]
 {""CASE_NUMBER"": ""['W.P. (C) No. 762 of 2020']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Reepak Kansal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.858231544494627
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17th March, 2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The prayers in the Tabular Statement of that execution application were as follows:- ""(a) A Learned Advocate of this Hon'ble Court or any other suitable person be appointed as Receiver in terms of the order dated 17th March, 2009. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17th March, 2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.407017469406128
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 7(4)(c)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Section 7(4)(c) provides that there can be an arbitration agreement in the form of exchange of statement of claims and defense, in which the existence of the agreement is asserted by one party, and not denied by the other.8 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 7(4)(c)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.673004627227783
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Rajasthan High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Deepak Kumar Surthar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Kailash Chand Sharma vs. State of Rajasthan and others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The aforesaid Full Bench judgment in Deepak Kumar Surthar (supra) was followed by a subsequent Full Bench judgment of Rajasthan High Court in Kailash Chand Sharma vs. State of Rajasthan and others. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Rajasthan High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Deepak Kumar Surthar', 'Kailash Chand Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.289869546890259
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14.07.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Courtlam Town Panchayat']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The reason for fixing the date of tenure of the office of the elected representatives like the petitioner is the Government have decided dated 14.07.2006 to re-constitute 561 Special Village Panchayat as Town Panchayat and hold election to all the Town Panchayats, including the Courtlam Town Panchayat in one main stream. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14.07.2006']"", ""GPE"": ""['Courtlam']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.8305504322052
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['22.4.2014']"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S. Rajaseekaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As statistics noted by Hon'ble Supreme Court in S. Rajaseekaran in the decision dated 22.4.2014 illustrates by 2006 fatal accidents in India crossed one lakh and after 11 years the figures stand at 1,47,913 fatal road accidents as of 2017.5 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['22.4.2014']"", ""GPE"": ""['India']"", ""JUDGE"": ""['S. Rajaseekaran']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.039063930511476
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Underhills considers defamatory statement as 'one which imputes conduct or qualifies tending to disparage or degrade any person, or to expose him to contempt, ridicule or public hatred or to prejudice him in the way of his office, profession or trade'. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Underhills']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.420500040054321
"{""CASE_NUMBER"": ""['writ petition No.1980 of 2008']"", ""COURT"": ""['Apex court']"", ""DATE"": ""['19.12.2012', '30.10.2004']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 19.12.2012, the learned Single Judge, in connected writ petition No.1980 of 2008, while refusing the interim relief passed the following order :- ""Meaning thereby the action of the respondents therein, in respect of land acquisition and the establishment of project by the respondents therein was upheld by the Apex court and thereafter award was delivered in the matter on 30.10.2004. [/INST]
 {""CASE_NUMBER"": ""['connected writ petition No.1980 of 2008']"", ""COURT"": ""['Apex court']"", ""DATE"": ""['19.12.2012', '30.10.2004']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.771467924118042
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Haldar', 'Bajoria']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Then again where tile statute itself covers only a class of cases as in Haldar's cave and Bajoria's case the statute will not be bad. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Haldar', 'Bajoria']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.23797082901001
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NDPS Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The scheme of the NDPS Act and its objects and reasons mandate that the prosecution must prove compliance of various safeguards ensured by virtue of the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NDPS Act']"", ""WITNESS"": ""[]""}",8.346888780593872
"{""CASE_NUMBER"": ""['W.P.Nos.1830, 4130 & 4109 of 2022']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bannari', 'Hasanur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To ensure the ____________ https://www.mhc.tn.gov.in/judis W.P.Nos.1830, 4130 & 4109 of 2022 weight, weigh bridges to be commissioned at both the entry points (i.e.) at Bannari Check post and at Hasanur. 7) Commercial Vehicles (like lorries) will not be allowed to used the ghat road from evening 6.00 P.M to morning 6.00 A.M in interest and welfare of wild animals. [/INST]
 {""CASE_NUMBER"": ""['W.P.Nos.1830, 4130 & 4109']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['MHC.tn.gov.in']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.70055627822876
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court of Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""['U.P.']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 136']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court of Allahabad has upheld the constitutional validity of cess levied in the State of U.P. on minor minerals which decisions are the subject-matter of civil appeals filed under Article 136 of the Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court of Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""['U.P.']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 136']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",9.392868280410768
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 24(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court or the civil courts which may have granted interim orders in favour of the land owners, ought to consider the aforesaid aspect before applying Section 24(2) of the Act, 2013 in favour of the land owners. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 24(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.5021653175354
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Queen v. Burah [3 A.C. 889.]']"", ""PROVISION"": ""['Section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As several of my learned colleagues have pointed out, the case of Queen v. Burah [3 A.C. 889.], the authority of which was not questioned before us, fully covers the contention raised, and the impugned provision is an 60""Subject to the exceptions specified in Section 3, the Provincial Government, may by notification in the Official Gazette, invest the City Civil Court with jurisdiction to receive, try and dispose of [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Queen v. Burah [3 A.C. 889.']""]"", ""PROVISION"": ""['Section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.976991415023804
"{""CASE_NUMBER"": ""['CWP-23867-2016']"", ""COURT"": ""[]"", ""DATE"": ""['31.8.1981']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jeet Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Jeet Singh had all the opportunities to raise the question of right, title or interest in the land in question but he did not 14 of 17 CWP-23867-2016 - 15 - choose to raise the question of title rather he suffered the order of eviction and a statement on 31.8.1981 that he would handover the vacant possession to the Panchayat. [/INST]
 {""CASE_NUMBER"": ""['CWP-23867-2016']"", ""COURT"": ""[]"", ""DATE"": ""['31.8.1981']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jeet Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.6945641040802
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: - Apart from not raising a probable defence appellant was also not able to contest the existence of a legally enforceable debt or liability - hence, his conviction by High Court, held, proper. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.712480545043944
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13.6.2018', '12.6.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Complainant respondent No.2, lodged FIR No.0254/2018 on 13.6.2018 against the accused/applicants alleging that on 12.6.2018 at about 10:00 P.M., accused/applicants came in Aman Palace Hotel, asked for a room, when complainant asked applicants to complete the formalities, they started searching room online and when applicants were unable to search out the room online, they insisted the complainant to provide rooms without their I.Ds. (Identity card). [/INST]
 {""CASE_NUMBER"": ""['FIR No.0254/2018']"", ""COURT"": ""[]"", ""DATE"": ""['12.6.2018', '13.6.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Aman Palace Hotel']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.558053970336914
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 25']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The scope of Section 25 of the 1887 Act, came for consideration before this Court on several occasions. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 25']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1887 Act']"", ""WITNESS"": ""[]""}",7.919124364852905
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11th June 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['PS Malviya Nagar']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Petitioner No.1 gave a complaint (DD No.54A) to the SHO of PS Malviya Nagar, on 11th June 2017 stating that at around 5 pm Respondent Nos. 2 to 4, along with 15 others, forcibly barged into the Petitioners' house. [/INST]
 {""CASE_NUMBER"": ""['DD No.54A']"", ""COURT"": ""[]"", ""DATE"": ""['11th June 2017']"", ""GPE"": ""['Malviya Nagar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.126819133758543
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay High Court', 'Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Konkola Copper Mines', 'BALCO']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(1)(e)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This is what the Bombay High Court in Konkola Copper Mines (supra) also interpreted BALCO (supra) as holding: ""The Supreme Court held that the provisions of Section 2(1)(e) are purely jurisdictional in nature and can have no relevance to the question whether any part of the cause of action has taken place outside India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay High Court', 'Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Konkola Copper Mines', 'BALCO']"", ""PROVISION"": ""['Section 2(1)(e)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.596287488937378
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , the learned Single Judge has quashed the proceedings in various crimes / calendar cases. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.738214015960693
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: They will wait for one more month and if the deal is not completed within that time period, the deposit and the bank guarantees should be returned and the deal should be treated as cancelled. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.167291164398193
"{""CASE_NUMBER"": ""['OS.No.184 of 1989']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He denies that the suit OS.No.184 of 1989 filed by him was a collusive suit and also denied that the decree passed therein was a collusive decree. [/INST]
 {""CASE_NUMBER"": ""['OS.No.184 of 1989']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.500946521759033
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is suggested that loss of 15% of blood volume will result in moderate shock, and the same was denied. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.180232763290405
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Bihar Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 18) It is in this conspectus, this Court is to first determine the question of liability of tax under Section 6 of the Bihar Act and in the event this tax is upheld, question of penalty and interest would have to be determined. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Bihar Act']"", ""WITNESS"": ""[]""}",7.333006381988525
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pierce Leslie and Co. Ltd. Vs. Miss Violet Ouchterlony Wapsnare, AIR 1969 SC 843']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Pierce Leslie and Co. Ltd. Vs. Miss Violet Ouchterlony Wapsnare, AIR 1969 SC 843, Court has considered the above principle in the context of 'Sovereign India' as stands under Constitution after independence, and, has observed : ""....in this country the Government takes by escheat immoveable as well as moveable property for want of an heir or successor. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pierce Leslie and Co. Ltd. Vs. Miss Violet Ouchterlony Wapsnare, AIR 1969 SC 843']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",10.937788009643556
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2015) 5 SCC 549', '(1986) 3 SCC 454']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (2015) 5 SCC 549 7. (1986) 3 SCC 454 8. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2015) 5 SCC 549', '(1986) 3 SCC 454']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.74007534980774
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reason: is whether the second appeal for enhancement of sentence was maintainable before the High court as the High court has set aside the order of the Sessions Court and restored the order of the trial Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.482454776763916
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 6.2 I have also considered the various judgments cited at the Bar. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.686927556991577
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The law of vicarious liability under Section 149 IPC is crystal clear that even the presence in the unlawful assembly, but with an active mind, to achieve the common object makes such a person vicariously liable for the acts of the unlawful assembly.” 24. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",8.685728549957275
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the plaint, it is pleaded in para 11 that, ""...That the defendant again contacted the plaintiffs and asked for a further payment of Rs. 5,00,000/­ (Rupees Five Lacs only) for his need. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.749735116958618
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Debt Recovery Tribunal']"", ""DATE"": ""['12.10.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13', 'Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even before the Debt Recovery Tribunal adjudicated the matter and quantified the petitioner's liability, the first respondent bank sought to enforce the security interest under Section 13 of the SARFAESI Act and obtained an order dated 12.10.2016 from the second respondent, within the ambit of Section 14 of the SARFAESI Act, to take possession of the mortgaged property of the petitioner with an intention to dispossess the petitioner. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.10.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13', 'Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act']"", ""WITNESS"": ""[]""}",9.905303478240969
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: These are plainly disputed questions of facts and it is also apposite to examine the same in these proceedings. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.849862337112427
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 138']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Per contra, the learned counsel for complainant contended that the judgment and order of conviction and sentence passed by the trial Court and confirmed by the Appellate Court is in conformity with the provisions of Section 138 NI Act and does not call for interference by this Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 138']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}",8.514151096343994
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondent M/s. Ultratech Cement Ltd. (hereinafter referred to as the ‘assessee’) is involved in packing and clearing/forwarding of Signature Not Verified Digitally signed by ASHWANI KUMAR cement classifiable under Chapter sub heading 25232910 of Central Date: 2018.02.01 16:44:38 IST [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['2018.02.01']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ultratech Cement Ltd.']"", ""OTHER_PERSON"": ""['ASHWANI KUMAR']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Chapter sub heading 25232910']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.087135791778564
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is undisputed that the petitioner by now has already paid Rs.11.24 crore and is further ready to pay another Rs.9 crore which will make the total of Rs.20.24 crore that is well beyond the principal. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.095200300216675
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['31.03.1997']"", ""GPE"": ""['Vidisha']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The plaint was later on amended and it was pleaded that in the light of the order dated 31.03.1997 passed by SDO, Vidisha, the defendants No. 1 and 2 have forcibly taken possession of the disputed property and thus, relief for possession as well as mesne profit @ Rs.500/- was also incorporated. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['31.03.1997']"", ""GPE"": ""['Vidisha']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.617165327072144
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kudal']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Gopal Tukaram Shivade']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Gopal Tukaram Shivade-scribe, father of PW-2, was a Police Patil of Kudal for ten years and he expired in the year 1990. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kudal']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Gopal Tukaram Shivade']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.89436149597168
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['2011 (2) SCR 831-', 'State of U.P. v. Ashok Kumar Srivastava, (2014) 14 SCC 720', 'K. Meghachandra Singh v. Ningam Siro (2020) 5 SCC 689']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 2011 (2) SCR 831- a view followed later, in State of U.P. v. Ashok Kumar Srivastava, (2014) 14 SCC 720 and, more recently, endorsed in K. Meghachandra Singh v. Ningam Siro (2020) 5 SCC 689 that “seniority should not be reckoned retrospectively unless it is so expressly provided by the relevant Service Rules. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['K. Meghachandra Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of U.P. v. Ashok Kumar Srivastava', 'Ningam Siro']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.069974184036257
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For example, the dharnas and protests were allowed to be stretched almost on the entire Jantar Mantar Road, on both sides, and even across the width of the road. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.811486005783081
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.06.2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Facts in brief giving rise to present writ petition are that the land (Arazi No. 139 (kha)) area 0.0470 hectare was purchased by petitioner vide sale deed dated 11.06.2009 for the purpose of establishing Masjid and Madarsa. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.06.2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.795483589172363
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In fine, all the appeals will stand allowed only in respect of the question of liability of the Insurance Company to pay the compensation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.7182722091674805
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Saroj Sharma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Counsel submits that the presence of PW-2 Saroj Sharma at the place of the occurrence is doubtful. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Saroj Sharma']""}",8.442334175109863
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 34(2) (b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It must be remembered that under the Explanation to Section 34(2) (b), an award is said to be in conflict with the public policy of India if the making of the award was induced or affected by fraud or corruption. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 34(2) (b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.523310422897339
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['LAC No. 261/16 Rajesh Gupta Vs UOI & Anr. 16/21']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: LAC No. 261/16 Rajesh Gupta Vs UOI & Anr. 16/21 [/INST]
 {""CASE_NUMBER"": ""['LAC No. 261/16']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajesh Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.120542287826538
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['December 18, 1999', 'April 20, 2000']"", ""GPE"": ""['Ranchi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This order was confirmed by the Appellate Authority at Ranchi on December 18, 1999 as well as by Revisional Authority by his order dated April 20, 2000. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Ranchi']"", ""DATE"": ""['December 18, 1999', 'April 20, 2000']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.687613725662231
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Prize Chits and Money Circulation Schemes (Banning) Act, 1978']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Interestingly, Section 2(b) of Prize Chits and Money Circulation Schemes (Banning) Act, 1978 defines money to include a cheque, postal order, demand draft, telegraphic transfer or money order. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Prize Chits and Money Circulation Schemes (Banning) Act, 1978']"", ""WITNESS"": ""[]""}",9.550017595291138
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Union of India-vs.- Venkateshan S.', 'Lal Shah Baba Dargah Trust-vs.- Magnum Developers']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this connection, learned Senior Counsel relied on the Apex Court decisions in Union of India-vs.- Venkateshan S. (supra) and Lal Shah Baba Dargah Trust-vs.- Magnum Developers (supra). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Union of India-vs.- Venkateshan S. (supra)', 'Lal Shah Baba Dargah Trust-vs.- Magnum Developers (supra)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.712065935134888
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['1st April, 2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 1 (2)(a)', 'Sections 147, 148, 149 and 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Finance Act, 2021', 'Income Tax Act, 1961']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Having heard learned counsel for the parties, this Court is of the view that by virtue of Section 1 (2)(a) of the Finance Act, 2021, the substituted Sections 147, 148, 149 and 151 of the Income Tax Act, 1961 pertaining to reopening of assessments came into force on 1st April, 2021. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['1st April, 2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 1 (2)(a)', 'Sections 147, 148, 149 and 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Finance Act, 2021', 'Income Tax Act, 1961']"", ""WITNESS"": ""[]""}",10.82050919532776
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is, therefore, axiomatic that a suit, an appeal or an application of the nature mentioned in the three divisions has to be instituted, preferred or made, as the case may be, within the period of limitation as prescribed if the subject matter of the suit/appeal/application is covered by the 1963 Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1963 Act']"", ""WITNESS"": ""[]""}",8.025954246520996
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24-2-2003']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, it cannot be said that by approving the appointment of the respondent no. 8, the Secretary (Tourism) had validated the minutes of meeting dated 24-2-2003 in which the candidature of 5 candidates were rejected and not only a decision was taken to waive the requirement of 10 years PG experience, but even the candidates were interviewed after waiving the requirement of 10 years PG experience. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24-2-2003']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.058396100997925
"{""CASE_NUMBER"": ""['W.P. No.27105 of 2016']"", ""COURT"": ""[]"", ""DATE"": ""['19.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even respondent No.1 did not consider the order dated 19.12.2016 passed by this Court in W.P. No.27105 of 2016, wherein this Court ordered to consider the representation of the life-convict within a period of one month. [/INST]
 {""CASE_NUMBER"": ""['W.P. No.27105 of 2016']"", ""COURT"": ""[]"", ""DATE"": ""['19.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.14746618270874
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There is a quest for perfection and accuracy. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.770940065383911
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: More often than not, the aggravating and mitigating factors are so intertwined that it is difficult to give a separate treatment to each of them. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.098468065261841
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hotel owners alleged that dues had piled up to Rs. 1 Crore. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.52804684638977
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Guhas']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The parties have fought tooth and nail on the variation of rent component as the reasonable estimated rent of Rs. 1 lakh, if confirmed, would immediately give a right to the Official Trustee to determine the lease and demand recovery of possession, and in such situation it would be difficult for Guhas to resist the claim. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ghas']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.453043460845947
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Crawford']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Crawford, on statutory construction has observed; which has been followed by a number of judgments by the Hon'ble Supreme Court; ""the question as to whether a statute is mandatory or directory depends upon the intent of the Legislature and not upon the language in which the intent is clothed. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Crawford']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.07082200050354
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['22.01.2003']"", ""GPE"": ""['Baganwala', 'Tosham']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Balwan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Parmeshwari v. Amirchand']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 15) In Parmeshwari v. Amirchand the Apex Court was dealing with a situation where on 22.01.2003 at about 12.00 noon the appellant therein, the claimant before the Tribunal, respondent No.1 before the High Court, was going from Baganwala to Tosham on a Motor Cycle (No.HR 16C- 8379), driven by Balwan with the claimant on the pillion seat. [/INST]
 {""CASE_NUMBER"": ""['HR 16C- 8379']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['22.01.2003']"", ""GPE"": ""['Baganwala', 'Tosham']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Parmeshwari', 'Amirchand', 'Balwan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.381515502929688
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Secfibn 21(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The order granting or refusing the bail is therefore very much an order against which an appeal is permifted under Secfibn 21(1) of the Act."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Secfibn 21(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.783322811126709
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.Anil Kumar', 'P.Vikram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Before examining the rival submissions urged by Sri M.Anil Kumar, Learned Counsel appearing on behalf of the Official Liquidator, and Sri P.Vikram, Learned Counsel appearing for the respondent-accused, it is useful to take note of the opinion of the earlier Division Bench of this Court on this question. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.Anil Kumar', 'P.Vikram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.558293104171753
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A.M. Khanwilkar']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Union of India v. Exide Industries Ltd.5']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the case of Union of India v. Exide Industries Ltd.5, the Supreme Court, (in the decision authored by Hon'ble Shri Justice A.M. Khanwilkar) has reiterated that the examination of the Court begins with a presumption in favour of constitutionality. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A.M. Khanwilkar']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Union of India v. Exide Industries Ltd.5']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.660739660263062
"{""CASE_NUMBER"": ""['M.A.C.M.A.No.685 of 2006', 'M.A.C.M.A.No.1233 of 2006']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['N.Balayogi']"", ""LAWYER"": ""[]"", ""ORG"": ""['New India Assurance Company Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: : (per the Hon'ble Sri Justice N.Balayogi) The appellant in M.A.C.M.A.No.685 of 2006 is the claimant and the appellant in M.A.C.M.A.No.1233 of 2006 is the New India Assurance Company Limited. [/INST]
 {""CASE_NUMBER"": ""['M.A.C.M.A.No.685 of 2006', 'M.A.C.M.A.No.1233 of 2006']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['N.Balayogi']"", ""LAWYER"": ""[]"", ""ORG"": ""['New India Assurance Company Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.518069744110107
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 43-B.']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence the first proviso was inserted in Section 43-B. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 43-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.035982370376587
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 11A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At best, it can be said that because of the nature of the project of national importance, a guarded procedure had been adopted by the Authorities concerned albeit within the framework of Section 11A of the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 11A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.53841257095337
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 229', 'Article 233', 'Article 234']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Article 229 of the Constitution of India provides with regard to the officers and servants of the High (18 of 36) [ CW-8695/2017] Court, Article 233 deals with appointment of District Judges and Article 234 deals with appointment in cases of Members of other judicial services. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 229', 'Article 233', 'Article 234']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",8.37594747543335
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Punjab Land Development and Reclamation Corporation Ltd., Chandigarh vs. President Officer, Labour Court, Chandigarh and Others MANU/SC/0479/1990 : (1990)IILLJ70SC : (1990)IILLJ70SC', 'State of U.P. and Another vs. Synthetics and chemicals Ltd. and Another MANU/SC/0616/1991 : 1993(41)ECC326 : 1993(41)ECC326']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The two judgments (1) Punjab Land Development and Reclamation Corporation Ltd., Chandigarh vs. President Officer, Labour Court, Chandigarh and Others MANU/SC/0479/1990 : (1990)IILLJ70SC : (1990)IILLJ70SC and (2) State of U.P. and Another vs. Synthetics and chemicals Ltd. and Another MANU/SC/0616/1991 : 1993(41)ECC326 : 1993(41)ECC326 were cited in support of the argument. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Labour Court, Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Punjab Land Development and Reclamation Corporation Ltd.', 'Synthetics and chemicals Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of U.P.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.55508518218994
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chittoor District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Andhra Pradesh']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner No.1 has studied from 1969 to 1976 in Chittoor District, meaning thereby the local status of the petitioner No.1 is the State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chittoor District', 'Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.912410020828247
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 17.1 It is also required to be noted that even otherwise so far as Accused No. 5 is concerned, the prosecution has even failed to prove beyond doubt that in fact Accused No. 5 fired from his firearm, which as such has missed, as alleged. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.678917407989502
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Alternatively, the court considers it necessary having regard to the need for quick decision and avoidance of delay [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.047526836395264
"{""CASE_NUMBER"": ""['I.A.No.4447 of 2010']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Judgment in the above appeal by the District Judge has been produced along with I.A.No.4447 of 2010. [/INST]
 {""CASE_NUMBER"": ""['I.A.No.4447 of 2010']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.916182518005371
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(1996) 7 SCC 765, Keshabo and another vs. State of MP and Others']"", ""PROVISION"": ""['Articles 39(b) and 46']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MP Revenue Code', 'Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also relevant to mention that the Supreme Court in (1996) 7 SCC 765, Keshabo and another vs. State of MP and Others, held as under:- ''The MP Revenue Code is a welfare legislation made to protect the ownership rights in the land of a Scheduled Tribe to effectuate the constitutional obligation of Articles 39(b) and 46 of the Constitution read with the Preamble. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Keshabo and another vs. State of MP and Others']"", ""PROVISION"": ""['Articles 39(b) and 46']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MP Revenue Code']"", ""WITNESS"": ""[]""}",10.021886587142944
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16.05.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 16.05.2011, a Notice of Arbitration was issued by the Petitioner to the Respondent, in regard to payment of compensation for losses suf- fered due to abnormal delays and additional costs as a result of hin- drances caused by the Respondent. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16.05.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.582740306854248
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mohd. Rafi']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The deposition of the said witness PW1 has been further supported by the deposition of PW2 Mohd. Rafi. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mohd. Rafi']""}",8.44055986404419
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is not a case where the land has been acquired for the purpose of industrialization or for any private organisation, but the land has been acquired by the State for their own so as to make the agricultural land more fertile. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.849675893783569
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.11.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Chhattisgarh']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even before the order dated 11.11.2020, the State of Chhattisgarh had opened 12,593 Anganwadi Centres in the State w.e.f. September, 2020. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.11.2020']"", ""GPE"": ""['Chhattisgarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.23107123374939
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this context, it may be appropriate to refer to the judgments cited by the learned counsel for the plaintiff.44. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.7035441398620605
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This long-term view could explain why death sentenced and LWOP inmates would commit less violent misconduct than parole-eligible inmates, and why LWOP inmates would 65 of 111 Murder Reference No.03 of 2017 & other connected appeals 66 commit the least violence of all. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.21818995475769
"{""CASE_NUMBER"": ""['Writ Petition No.9360 (MB) of 2007']"", ""COURT"": ""[]"", ""DATE"": ""['27.1.2007']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is relevant to mention here that in Writ Petition No.9360 (MB) of 2007 filed by the original lessee (Company), the question of division of nazul land held by the original lessee and its transfer of lease-hold-rights vide deed of assignment dated 27.1.2007 in favour of the petitioner was not in issue. [/INST]
 {""CASE_NUMBER"": ""['Writ Petition No.9360 (MB) of 2007']"", ""COURT"": ""[]"", ""DATE"": ""['27.1.2007']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.432387351989746
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Gujrat High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shri Singhvi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Shivlal K. Purohit and others Vs. State of Gujrat(supra']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Gujrat Regularization of Unauthorized Development Act, 2011']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Shri Singhvi, the learned senior counsel placed reliance on the decision of Gujrat High Court in the case of Shivlal K. Purohit and others Vs. State of Gujrat(supra) wherein the challenge was to the provisions of Gujrat Regularization of Unauthorized Development Act, 2011. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Gujrat High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shivlal K. Purohit']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Gujrat Regularization of Unauthorized Development Act, 2011']"", ""WITNESS"": ""[]""}",10.308431148529053
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(m)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Trade Marks Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In view of the definitions of „mark‟ and „trademark‟ under the Trade Marks Act, a trademark for becoming a trademark will firstly have to be a mark under Section 2(m) of the Trade Marks Act i.e before the trademark would be a trademark under the Trade Marks Act there must be a mark and which falls within the definition of „mark‟ under the Trade Marks Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(m)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Trade Marks Act']"", ""WITNESS"": ""[]""}",7.588422298431396
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As an upshot of the discussion, the writ petitions are liable to be dismissed, and accordingly, they are dismissed. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.045035600662231
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bombay', 'Agra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Amaraveni', 'Venkateswara Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The evidence of P.W.1 is consistent through out that when the jeep bearing No.MH 15 K 6520 dashed against VAD tree at 376 KM stone on the Bombay-Agra highway, his family members and himself sustained grievous injuries and he lost his wife Amaraveni and father Venkateswara Rao in the said accident. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bombay', 'Agra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Amaraveni', 'Venkateswara Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.528245210647583
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court', 'Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['V. Sriharan', 'Vikram Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , in para 89 of V. Sriharan (supra), the Apex Court, after taking into consideration several decisions, including the Constitution Bench decision in Vikram Singh (supra), concluded that it is nowhere prescribed in the SQ Pathan 66/117 wp.1181.1182.14 & 527.18 .(J).doc Penal Code [/INST]
 {""CASE_NUMBER"": ""['SQ Pathan 66/117']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['V. Sriharan', 'Vikram Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Penal Code']"", ""WITNESS"": ""[]""}",9.629309177398682
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Balak Ram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She had developed relationship with Balak Ram about one year prior to murder. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Balak Ram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.903494358062744
"{""CASE_NUMBER"": ""['O.S.No.123 of 1986']"", ""COURT"": ""['Subordinate Judge, Anantapur']"", ""DATE"": ""['18.08.1989']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The first defendant's son was examined as D.W.1 and two other vendees under the agreement were examined as D.Ws.2 and 3. Exs.B.1, dated 18.08.1989, certified copy of the decree in O.S.No.123 of 1986 on the file of the Subordinate Judge, Anantapur, was marked on behalf of the defendants. [/INST]
 {""CASE_NUMBER"": ""['O.S.No.123']"", ""COURT"": ""['Subordinate Judge, Anantapur']"", ""DATE"": ""['18.08.1989']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.907750129699707
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is sufficient in law, if there is intention coupled with some overt act in execution thereof. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.160322904586792
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Herein above in A2 which is another admitted signature from the written statement of the defendant there are all the alphabets of the full name of the defendant. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.733405590057373
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.12.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The agreement dated 18.12.2017 between the parties specifically stipulated that a notice sent by the arbitrator, to the parties, by registered post, at the addresses mentioned in the Loan Agreement will be considered sufficient service to the parties, whether such notice is received by them or not, or refused or is returned undelivered. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.12.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.848440170288086
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['E.Noohu Kannu', 'A.Saleem', 'A.P.Khan']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: E.Noohu Kannu, the sister of PW1, Sri.A.Saleem, the husband of the additional 3rd plaintiff and Sri.A.P.Khan, the brother in law of the 1st plaintiff respectively were examined as PWs 2 to 4. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['E.Noohu Kannu', 'A.P.Khan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['A.Saleem']""}",8.099960803985596
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Piari', 'Lalit Parkash', 'Sonia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 138']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Negotiable Instruments Act, 1881', 'NI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At the inception, the present complaint was filed by Smt. Ram Piari (hereinafter ""complainant"") against Mr. Lalit Parkash (hereinafter ""accused"") and Ms. Sonia under Section 138 of the Negotiable Instruments Act, 1881 (hereinafter ""NI Act""). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Piari', 'Lalit Parkash', 'Sonia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 138']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Negotiable Instruments Act, 1881', 'NI Act']"", ""WITNESS"": ""[]""}",10.570518255233765
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Damodar S. Prabhu']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even prior to the said decision and that of the Full Bench, the said issue has been concluded by the Apex Court in Damodar S. Prabhu's case(supra). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Damodar S. Prabhu']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.87403392791748
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Barkha Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: From paragraphs 34 to 41 of its judgment in Barkha Gupta, the Division Bench of the Delhi High Court highlighted the importance of inspection of subordinate Courts by the Administrative Judges, the object of which is the assessment of the work of the subordinate judicial officers, their capability, integrity and competence. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Barkha Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.513880491256714
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Kerala']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The State of Kerala, which accounts for 3% of Country's population, has one of the highest numbers of matrimonial cases in the Nation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kerala']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.556346654891968
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kulwant Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Damanpreet Singh']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: PW.16 Damanpreet Singh deposed that he knew Kulwant Singh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kulwant Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Damanpreet Singh']""}",8.278463363647461
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, he has got no document to substantiate the same. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.256083011627197
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gwalior']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jameel', 'Jainuuddin']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: His brother Jameel was taken to Gwalior and thereafter, he heard that the assailants have killed their own father Jainuuddin. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gwalior']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jainuuddin', 'Jameel']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.501951217651367
"{""CASE_NUMBER"": ""['CS No. 213 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Learned Senior Advocate appearing for the first defendant in CS No. 213 of 2018 has submitted that, the authority for the purpose of pre- institution mediation was notified on July 3, 2018. [/INST]
 {""CASE_NUMBER"": ""['CS No. 213 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.452991008758543
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['St. Joseph School, Nandyal, Kurnool District']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner has stated in the writ petition that she has studied from elementary school to Class X at St. Joseph School, Nandyal, Kurnool District and therefore, she has prosecuted her studies in the united State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Nandyal', 'Kurnool District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['St. Joseph School']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.802460432052612
"{""CASE_NUMBER"": ""['Civil Appeal Nos. 8109 and 8110 of 2010']"", ""COURT"": ""[]"", ""DATE"": ""['6th September, 2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This Court granted leave and accordingly the special leave petitions were converted into Civil Appeal Nos. 8109 and 8110 of 2010 vide order dated 6th September, 2010. [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal Nos. 8109 and 8110']"", ""COURT"": ""[]"", ""DATE"": ""['6th September, 2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.841850519180298
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Division Bench of this Court (Aurangabad Bench)']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Maharashtra vs. Rajendra Jawanmal Gandhi, reported in (1997) 8 SCC 386', 'Konan Kodio Ganstone & Ors. vs. State of Maharashtra [Criminal Writ Petition No.548 of 2020]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this context a reference is made to the decision in State of Maharashtra vs. Rajendra Jawanmal Gandhi, reported in (1997) 8 SCC 386, and a recent decision of the Division Bench of this Court (Aurangabad Bench) in the case Konan Kodio Ganstone & Ors. vs. State of Maharashtra [Criminal Writ Petition No.548 of 2020]. [/INST]
 {""CASE_NUMBER"": ""['Criminal Writ Petition No.548 of 2020']"", ""COURT"": ""['Aurangabad Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Maharashtra vs. Rajendra Jawanmal Gandhi, reported in (1997) 8 SCC 386']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.879689693450928
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.10.1986']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (8) Pending appeal, mother passed away and during her lifetime, she executed a registered will deed dated 20.10.1986, bequeathing her entire share in favour of Defendant No.1 only. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.10.1986']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.064445734024048
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Central Bank of India Vs. C.L.Vimla']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this connection, it would be apt to refer to the decision of the Supreme Court in Central Bank of India Vs. C.L.Vimla (supra), relevant portion of which is extracted hereunder: 21. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['C.L.Vimla']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Central Bank of India Vs. C.L.Vimla']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.574238300323486
"{""CASE_NUMBER"": ""['W.P. Nos.20421 of 2019']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This point is made not to solicit pity but to bring attention to the fact that any individual could be caught in a similar web and find himself inside a pit such as Folsom Prison."" iii) The Apex Court in the said judgment formulated its findings which are as under: KL,J W.P. Nos.20421 of 2019 & batch ""72. [/INST]
 {""CASE_NUMBER"": ""['W.P. Nos.20421 of 2019']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['KL']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.469445705413818
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Jundla']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Rinki Sharma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: PW1 Rinki Sharma, widow of the deceased also deposed that her husband was working as a tailor at village Jundla. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Jundla']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Rinki Sharma']""}",8.58102011680603
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Such an act was not given any retrospective effect by the legislature. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.677928924560547
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['DRAT']"", ""DATE"": ""['08.09.2021', '16.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, at present Chairperson of the DRAT is not available and the matter was last heard by the DRAT on 08.09.2021 and delay was condoned and thereafter, the mater was kept on 16.09.2021. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.09.2021', '16.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['DRAT']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.629493951797484
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Systemic discrimination on account of gender at the workplace would then encapsulate the patriarchal disadvantage that permeates all aspects of her being from the outset, including reproduction, sexuality and private choices which operate within an unjust structure. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.741169691085815
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sharad Kacharu Pawar']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Through this witness, the defence has brought on record various contradictions, omissions and improvements in the evidence of PW-12 Sharad Kacharu Pawar. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sharad Kacharu Pawar']""}",10.7571382522583
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (vii) Whether the sub-classification of MBC into three categories can be done solely based on adequate population data, in the absence of any objective criteria?” 12. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.619819164276123
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Aghnoo Magsha v. State of Bihar (AIR 1966 SC 119)']"", ""PROVISION"": ""['Sec.8']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Aghnoo Magsha v. State of Bihar (AIR 1966 SC 119) it has been held that if the first information is given by the accused himself the fact of his giving the information is admissible against him as evidence of his conduct under Sec.8 of the Evidence Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Aghnoo Magsha v. State of Bihar (AIR 1966 SC 119)']"", ""PROVISION"": ""['Sec.8']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act']"", ""WITNESS"": ""[]""}",10.127774238586426
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ravinder Kumar Sharma v. State of Assam & Others as reported in AIR 1999 SC 3571']"", ""PROVISION"": ""['Section 81']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reliance has also been placed on the judgment of the Hon'ble Supreme Court in the case of Ravinder Kumar Sharma v. State of Assam & Others as reported in AIR 1999 SC 3571, wherein the ratio of the judgment in para 25 is that the presumption of genuineness attached under Section 81 of the Evidence Act to newspaper reports cannot be treated as proof of the facts stated therein. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ravinder Kumar Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1999 SC 3571']"", ""PROVISION"": ""['Section 81']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act']"", ""WITNESS"": ""[]""}",8.773218870162964
"{""CASE_NUMBER"": ""['W.P.No.13320/2006']"", ""COURT"": ""[]"", ""DATE"": ""['22.09.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['B.Javarayagouda S/o Boregouda vs. The State of Karnataka, reported in ILR 1997 KAR 1153', 'R. Prasanna Kumar & another vs. The State of Karnataka reported in ILR 1999 KAR 1378']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , relied upon the following judgments: (i) An unreported judgment of this Court in W.P.No.13320/2006 dated 22.09.2006 paragraphs 2,4,5,9,10. (ii) B.Javarayagouda S/o Boregouda vs. The State of Karnataka, reported in ILR 1997 KAR 1153, para 17. (iii) Full Bench decision of this Court in the case of R. Prasanna Kumar & another vs. The State of Karnataka reported in ILR 1999 KAR 1378 para 25. [/INST]
 {""CASE_NUMBER"": ""['W.P.No.13320/2006']"", ""COURT"": ""[]"", ""DATE"": ""['22.09.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['B.Javarayagouda', 'R. Prasanna Kumar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['An unreported judgment in W.P.No.13320/2006', 'B.Javarayagouda S/o Boregouda vs. The State of Karnataka, reported in ILR 1997 KAR 1153, para 17', 'Full Bench decision of this Court in the case of R. Prasanna Kumar & another vs. The State of Karnataka reported in ILR 1999 KAR 1378 para 25']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",18.296879529953003
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The promotee Inspectors promoted well within 25% promotee quota. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.569840431213379
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""['28.02.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Antrix', 'Devas']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 9', 'Section 42']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Ar- bitration Act, 1996', 'Arbitration Act, 1996']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On the facts of that case, on 28.02.2017, a learned Single Judge of the Delhi High Court ruled that Antrix’s petition under Section 9 of the Ar- bitration Act, 1996 before the Bangalore Court was not maintainable, and that Devas’ petition under Section 9 was maintainable, the bar under Section 42 of the Arbitration Act, 1996 being inapplicable. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""['28.02.2017']"", ""GPE"": ""['Bangalore']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Antrix', 'Devas']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 9', 'Section 42']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Ar-bitration Act, 1996', 'Arbitration Act, 1996']"", ""WITNESS"": ""[]""}",11.731845378875732
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO']"", ""OTHER_PERSON"": ""['Shashoua']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also to be noted that in BALCO, the Constitution Bench has not merely repro- duced few paragraphs from Shashoua but has also referred to other decisions on which Shashoua has placed reliance upon. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO']"", ""OTHER_PERSON"": ""['Shashoua']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.153112173080444
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 20(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Under Rule 20(4) of the Rules as they stood before the amendment of the Rules in the year 1991, the Disciplinary Authority was required to deliver to the delinquent, a copy of the articles of charges, the statement of imputations of misconduct and a list of documents and witnesses by which each article of charge was proposed to be sustained. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 20(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.603812456130981
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Waqf', 'Wakf']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus it is evident that the said lands are Waqf lands and grant of Occupancy Rights Certificate to individuals in respect of Wakf lands is not in order. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.662749528884888
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Ranvir Singh']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: P.W.5 Ranvir Singh deposed that he was travelling in the bus-in-question and had suffered injuries on account of the bomb blast. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Ranvir Singh']""}",8.352054834365845
"{""CASE_NUMBER"": ""['Writ Appeal No.2 of 2018']"", ""COURT"": ""['Gauhati High Court, Aizawl Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The present appeal arises out of the judgment and order dated 6­11­2019 passed by the Division Bench of the Gauhati High Court, Aizawl Bench in Writ Appeal No.2 of 2018 dismissing the Writ Appeal filed by the appellants. [/INST]
 {""CASE_NUMBER"": ""['Writ Appeal No.2 of 2018']"", ""COURT"": ""['Gauhati High Court', 'Aizawl Bench']"", ""DATE"": ""['6\\xad11\\xad2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.098333835601808
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.07.1971', '04.12.1999']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Gulab Badi Grah Nirman Sahakari Samiti', 'JDA']"", ""OTHER_PERSON"": ""['Bhanwarmal Singhvi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The same was transferred in the name of Bhanwarmal Singhvi on 08.07.1971 and out of the aforesaid land, 7 bigha 7 biswa was sold to Gulab Badi Grah Nirman Sahakari Samiti who developed another residential scheme namely Murtikala Colony and 90-B proceedings were initiated by JDA thereto on 04.12.1999 and lease has also been issued by the JDA to the land holders. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.07.1971', '04.12.1999']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['JDA', 'Gulab Badi Grah Nirman Sahakari Samiti']"", ""OTHER_PERSON"": ""['Bhanwarmal Singhvi', 'Murtikala Colony']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.4696307182312
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Emaar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: g) Emaar has agreed to develop an IT Infrastructure in 20 to 30 acres of land from out of the land designated for development of residential project with a built up area of 10,00,000/-sq.feet. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Emaar']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.140671730041504
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Guntur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Andhra Pradesh', 'SPSR Nellore and Visakhapatnam Districts']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Petitioner No.1 has studied from 1988 to 1993 in Guntur which falls under the State of Andhra Pradesh and petitioner No.2 has studied from 1986 to 1992 in SPSR Nellore and Visakhapatnam Districts which also fall in the State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Guntur', 'SPSR Nellore', 'Visakhapatnam']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.054439544677734
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Answering points (v) to (vii), the High Court was of the opinion that there was no quantifiable data relating to the population, socio-economic status and representation of the backward classes in the services. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.133476734161377
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this case the license fee was regulatory in character. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.686004400253296
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['R.K. Upadhyaya v. Shamabhai P. Patel [1987] 166 ITR 163 (SC)', 'Jai Hanuman Trading Co. v. CIT [1977] 110 ITR 36 (P&H)(FB)', 'CIT v. Sheo Kumari Devi [1986] 157 ITR 13 (Patna)(FB))']"", ""PROVISION"": ""['s. 147', 's. 148']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The jurisdiction to assess u/s. 147 is assumed on the basis of the issue of notice u/s. 148, and not its' service, and which could therefore be served even subsequently (R.K. Upadhyaya v. Shamabhai P. Patel [1987] 166 ITR 163 (SC); Jai Hanuman Trading Co. v. CIT [1977] 110 ITR 36 (P&H)(FB); CIT v. Sheo Kumari Devi [1986] 157 ITR 13 (Patna)(FB)). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['R.K. Upadhyaya', 'Shamabhai P. Patel', 'Jai Hanuman Trading Co.', 'CIT', 'Sheo Kumari Devi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['s. 147', 's. 148']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.391832828521729
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shabbir Ahmed']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In her deposition, PW-1 (W-1) stated that Shabbir Ahmed 124 of 140 CRA-S Nos.2903-SB, 2901-SB, 2945-SB, and 2668-SB of 2018 (O&M) CASE HEARD THROUGH VIDEO CONFERENCING [/INST]
 {""CASE_NUMBER"": ""['CRA-S Nos.2903-SB, 2901-SB, 2945-SB, and 2668-SB']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shabbir Ahmed']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.12839388847351
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ajay Hasia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Learned senior counsel relied on the decision of the Apex Court in Ajay Hasia (supra) to show that Article 14 has been interpreted to include guarantee against arbitrariness and that arbitrariness in state-action either by the legislature or the executive, is sufficient to initiate that action mentioned in para 16 of the said judgment. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ajay Hasia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.383245944976807
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Chhattisgarh High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Palak Khatuja and Ors. Vs. Union of India and Ors., reported in (2021) 438 ITR 622']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The sole dissenting view adopted is of a learned Single Judge of Chhattisgarh High Court in case of Palak Khatuja and Ors. Vs. Union of India and Ors., reported in (2021) 438 ITR 622. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Chhattisgarh High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Palak Khatuja']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.755445957183838
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.8.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Maunag', 'Jankitbhai']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At this stage, it is very relevant to note that neither present applicant nor his son Maunag was present at the office of Jankitbhai on 24.8.2020, but said witness states that the first informant was pressurized and forced to sign the documents. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.8.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jankitbhai', 'Maunag']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.083313941955566
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Copy of this judgment be circulated to all Subordinate Criminal Courts of Delhi by the learned Registrar General of this Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.26766562461853
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sarla Verma', 'Reshma Kumari']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In paragraph 43.6 the Apex Court directed that, insofar as deduction for personal and living expenses is concerned, the Tribunals shall ordinarily follow the standards prescribed in paragraphs 30, 31 and 32 of the judgment in Sarla Verma, subject to the observations made in para 38 of Reshma Kumari. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sarla Verma', 'Reshma Kumari']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['paragraphs 30, 31 and 32']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.453002691268921
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Alex M.Thombra', 'Vinod']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Vasudevan']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Shri Alex M.Thombra relied on the testimony of PW9 Vasudevan, father of deceased Vinod. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Alex M.Thombra', 'Vinod']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Vasudevan']""}",8.9607412815094
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is further urged that the aforesaid three decisions cannot be considered in light of the dicta of the Hon'ble Supreme Court referred to above and the recent decision of this Court in M/S.Evershine Monuments. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['M/S.Evershine Monuments']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.558247089385986
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['TADA']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In that matter the Hon'ble Apex Court had divided TADA detenus in four classes and held that hardcore under trials whose release would prejudice the prosecution case and their liberty may prove to be a menace to the society in general, and to the complainant and prosecution witnesses in particular, do not deserve [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.382051706314087
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['R. D. Gardi Medical College']"", ""OTHER_PERSON"": ""['Shashank Nayak', 'Muskan Jaisinghani', 'Sapna Solanki', 'Ratnanjay Sarvate']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that out of the 10 candidates that had appeared before the authorities of R. D. Gardi Medical College, 4 candidates namely; Shashank Nayak (2604), Muskan Jaisinghani (1322) Sapna Solanki (7821) and Ratnanjay Sarvate (1648), were permanent residents of M.P. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['M.P.']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['R. D. Gardi Medical College']"", ""OTHER_PERSON"": ""['Shashank Nayak', 'Muskan Jaisinghani', 'Sapna Solanki', 'Ratnanjay Sarvate']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.293109655380247
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ramesh Chand Sharma vs. Udham Singh Kamal and others, reported in (1999) 8 SCC 304']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At this juncture, it is relevant to peruse the Supreme Court's decision rendered in Ramesh Chand Sharma vs. Udham Singh Kamal and others, reported in (1999) 8 SCC 304. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ramesh Chand Sharma', 'Udham Singh Kamal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(1999) 8 SCC 304']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.180916786193848
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The place where they heard sound of fire, from there the place of incident was 400 meters towards southern. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.23593783378601
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['21.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['C.A. No. 4835/15 State of Haryana & Anr. Vs. Maharana Partap Charitable Trust']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ""Prayer in the present application is for the modification of the order dated 21.12.2016 passed by this Court whereby the petition was ordered to be listed after the decision of Hon'ble the Supreme Court in C.A. No. 4835/15 State of Haryana & Anr. Vs. Maharana Partap Charitable Trust. [/INST]
 {""CASE_NUMBER"": ""['C.A. No. 4835/15']"", ""COURT"": ""[]"", ""DATE"": ""['21.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Haryana & Anr. Vs. Maharana Partap Charitable Trust']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.511489868164062
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, in the complaints / charge sheets, there is no allegation against the petitioners that they were carrying on trade or commerce in contraband or any other tobacco products without label and specified warning on the said products. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.122573852539062
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['2006 Supp (10) SCR 1 2008 (3) SCC 331']"", ""PROVISION"": ""['Regulation 34(6)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Regulation 34(6) states that the revertees shall 2006 Supp (10) SCR 1 2008 (3) SCC 331 subsequently be considered for repromotion against the quota of vacancies reserved for promotees. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Regulation 34(6)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.275501251220703
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Sudhakaran and others v. State of Kerala (2011 (1) KHC 610)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The findings in Sudhakaran and others v. State of Kerala (2011 (1) KHC 610) to the extent that the report of the Chemical Examiner in 'B' sample will not supersede the report of the Chemical analysis in sample 'A' is upheld. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sudhakaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.395419597625732
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Once the issue was raised, it was only the petitioner who could have categorically denied such assertion or proved that his statement in the application form was correct at the relevant time. Not having done so and only nitpicking on the issue of not having been given an opportunity of cross [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.708868741989136
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 122, 126 and 127']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Motor Vehicles Act, 1988']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In such circumstances, in my view, the learned Tribunal rightly concluded that the truck driver was guilty of violation of the express provisions of Sections 122, 126 and 127 of the Motor Vehicles Act, 1988 by leaving the offending truck unattended, without due and proper caution, in the middle of the road, and that too on a flyover.. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 122, 126 and 127']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Motor Vehicles Act, 1988']"", ""WITNESS"": ""[]""}",9.889461040496826
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(24)(x) rws 36(1)(va)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PF/ESI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: According to AO, in view of Section 2(24)(x) rws 36(1)(va) of the Act, the employees contribution is to be paid within the due date of payment as prescribed in the respective Acts (PF/ESI Act) to claim deduction. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(24)(x) rws 36(1)(va)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PF/ESI Act']"", ""WITNESS"": ""[]""}",8.825157403945923
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['K. Bhaskaran Sankaran Vaidhyan Balan & Anr. [(1999) 7 SCC 510]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble Supreme Court in the case of K. Bhaskaran Sankaran Vaidhyan Balan & Anr. [(1999) 7 SCC 510] has held that, ""9. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['K. Bhaskaran Sankaran', 'Balan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['K. Bhaskaran Sankaran Vaidhyan Balan & Anr. [(1999) 7 SCC 510]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.26798677444458
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: They do not depend on the legal or constitutional form in which they are declared. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.05088472366333
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sibal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Manoj Narula Vs. Union of India, (2014) 9 SCC 1']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Shri Sibal has placed reliance on judgment of this Court in Manoj Narula Vs. Union of India, (2014) 9 SCC 1 for the preposition that doctrine of implication has to be applied to explain the constitutional concepts. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sibal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Manoj Narula Vs. Union of India, (2014) 9 SCC 1']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.34500765800476
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Pass mark for each subject would be 40 and in addition to that candidates were required to obtain 50% in aggregate in order to be successful in the written test. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.047919988632202
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Shailesh Shetye']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The positive evidence of PW7, Shailesh Shetye was discarded only to the extent of negligence aspect, stating him not to be a natural witness. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shailesh Shetye']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.168723583221436
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Commercial Complex, Raj Bhavan Road, Hyderabad-02 13 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Hyderabad']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.324882507324219
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court of Madhya Pradesh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CRA No.2615/2005 (Sukhendra Singh S/o Niranjan Singh Ghosh Vs. State of Madhya Pradesh)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In other words, if the court is convinced that the testimony of a witness to the occurrence is true the court is free to act on it albeit investigating officer's suspicious role in the case."" The learned Prosecutor has also relied on the decision of Hon'ble High Court of Madhya Pradesh in CRA No.2615/2005 (Sukhendra Singh S/o Niranjan Singh Ghosh Vs. State of Madhya Pradesh) [/INST]
 {""CASE_NUMBER"": ""['CRA No.2615/2005']"", ""COURT"": ""['High Court of Madhya Pradesh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sukhendra Singh S/o Niranjan Singh Ghosh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.228664875030518
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Making a clear distinction between a charging provision of a taxing statute and exemption notification which waives a tax or a levy normally imposed, the Supreme Court observed as under:- ""14. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.071276664733887
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['07.04.1960']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Ceiling Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The relevant date under the Land Ceiling Act was 07.04.1960 on which date the extent of properties in hands of a person has to be determined and since three brothers, who consisted members of joint family on the relevant date had more than the land which was permitted to a person, a partition was entered to save the properties from land ceiling laws. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['07.04.1960']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Ceiling Act']"", ""WITNESS"": ""[]""}",7.986292362213135
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Chakraborty']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Chakraborty complains that there was no formal charge-sheet. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Chakraborty']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.937151193618774
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['S. 36']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Stamp Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Once a document has been marked as an exhibit in the case and the trial has proceeded all along on the footing that the document was an exhibit in the case and has been used by the parties in examination and cross-examination of their witnesses, S. 36 of the Stamp Act comes into operation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['S. 36']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Stamp Act']"", ""WITNESS"": ""[]""}",7.777767896652222
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 313']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C.']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This defence was not taken by these accused till the recording of the statements under Section 313 Cr.P.C. and not put to the material prosecution witness. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 313']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C.']"", ""WITNESS"": ""[]""}",8.27764081954956
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Minarpally Village', 'Bodhan Mandal', 'Nizamabad District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, as seen from the allegations made in the charge-sheet, he was appointed initially as a clerk by the Government and subsequently worked as Paid Secretary at Minarpally Village, Bodhan Mandal, Nizamabad District. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Minarpally Village', 'Nizamabad District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.187307119369507
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also relevant to note that the CBI had also consistently opposed the petitioner's release on parole on the ground that a co- convict had absconded after being released on parole. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.439177513122559
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Patent Act', \""Plant Breeders' Rights Act\""]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The majority judgment also noted: ""Of significance to the interpretation of the Patent Act and the issue of its applicability to higher life forms is the Plant Breeders' Rights Act, passed in 1990 subsequent to this Court's decision in Pioneer Hi-Bred,supra, in which it was determined that a crossbred soybean variety did not meet the disclosure requirements of the Patent Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pioneer Hi-Bred']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Patent Act', 'Plant Breeders\' Rights Act']"", ""WITNESS"": ""[]""}",9.118668794631958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['1st March, 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliamentary Standing Committee on Home Affairs', 'Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Criminal Law (Amendment) Bill, 2012']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Department-related Parliamentary Standing Committee on Home Affairs examined the Criminal Law (Amendment) Bill, 2012 and tabled its Report in Parliament on 1st March, 2013. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['1st March, 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Department-related Parliamentary Standing Committee on Home Affairs']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.206738471984863
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Goff', 'Thomas Bingham M.R.', 'Stephen Brown P.']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Lord Goff also noted that Sir Thomas Bingham M.R. in the Court of Appeal expressed his agreement with Sir Stephen Brown P. in the following words:- ""This was in my respectful view a wise ruling, directed to the protection of patients, the protection of doctors, the reassurance of patients' families and the reassurance of the public. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Goff', 'Bingham']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Brown']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.704006671905518
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12th September, 2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rules 28 and 29']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Haryana Real Estate (Regulation and Development) Amendment Rules, 2019', 'Haryana Amendment Rules 2019']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In some of the petitions, a challenge has been laid to Rules 28 and 29 of the Haryana Rules as well as to forms CRA and CAO as amended by the Haryana Real Estate (Regulation and Development) Amendment Rules, 2019 notified on 12th September, 2019 ('Haryana Amendment Rules 2019') as being ultra vires the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12th September, 2019']"", ""GPE"": ""['Haryana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rules 28 and 29', 'forms CRA and CAO']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Haryana Real Estate (Regulation and Development) Amendment Rules, 2019']"", ""WITNESS"": ""[]""}",9.906618356704712
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 42']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Section 42 is meant to avoid conflicts in jurisdiction of Courts by placing the supervisory jurisdiction over all arbitral pro- ceedings in connection with the arbitration in one Court exclusively. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 42']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.216850280761719
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['LA Act, 1894']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This is so, although, the State enactments may refer to the provisions of LA Act, 1894 for certain purposes. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['LA Act, 1894']"", ""WITNESS"": ""[]""}",7.294969797134399
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.09.2006', '10.04.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The appellants filed their counter affidavit in the writ petition on 08.09.2006 and the writ petition was finally heard and decided by the High Court by its impugned judgment dated 10.04.2017. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.09.2006', '10.04.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.285403490066528
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vijayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: c) By that time, Smt.Vijayalakshmi, her husband, he, CW-2 and police were present. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vijayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.929018259048462
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['P.A. Inamdar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 6.1.3 In P.A. Inamdar (supra), the Supreme Court while answering question no. 3 held that every institution is free to devise its own fee structure but the same can be regulated in the interest of preventing profiteering. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['P.A. Inamdar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.18722915649414
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 176']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Contract Act, 1872']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Pledgor further agrees that the notice period provided under this Notice, from the date of this Notice till the Enforcement Date is reasonable notice of any enforcement action in respect of the Security, including for the purposes of section 176 of the Indian Contract Act, 1872. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 176']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Contract Act, 1872']"", ""WITNESS"": ""[]""}",8.565642595291138
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Most of these buses for all practical purposes operate as stage carriage services masquerading as contract carriages. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.223824024200439
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['August 2, 1958']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Both the telegrams transmitted or imparted information to the respondent that he was suspended from service with effect from August 2, 1958. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['August 2, 1958']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.246477842330933
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 26.1.2 Multiple linear scratches over right subcostal and lumbar regions in area of 10*10 cms. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.127532720565796
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court', 'Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Jayachandran Alloys (P) Ltd. Vs. Superintendent of GST & C. Ex., Salem 2019 (25) G.S.T.L. 321 (Mad.)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 7.1 Relying upon decision of Delhi High Court, in the case of Jayachandran Alloys (P) Ltd. Vs. Superintendent of GST & C. Ex., Salem 2019 (25) G.S.T.L. 321 (Mad.), Madras High Court has concluded, in the relevant Paras as below: "" 36. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court', 'Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Jayachandran Alloys (P) Ltd. Vs. Superintendent of GST & C. Ex., Salem 2019 (25) G.S.T.L. 321 (Mad.)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.86954116821289
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Court of JMFC, Lahar, District Bhind']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302,307,147,148,149, 201', 'Section 25/27']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PC', 'Arms Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (5) After completion of investigation, charge-sheet under Sections 302,307,147,148,149, 201 PC and Section 25/27 of the Arms Act was filed before the Court of JMFC, Lahar, District Bhind from where case committed to the Court of Session. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Court of JMFC, Lahar', 'Court of Session']"", ""DATE"": ""[]"", ""GPE"": ""['Bhind']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302,307,147,148,149, 201 PC and Section 25/27']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arms Act']"", ""WITNESS"": ""[]""}",10.816084623336792
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Undisputedly, AO has initially made disallowance of Rs.1,34,56,177/- claimed as expenditure by the assessee under the head ""legal, professional and consultancy charges"", which amount has been restricted by ld. CIT (A) in appeal to Rs.71,59,700/-. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.275125741958618
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['5 th February 2016', '8 th February 2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Petitioners expressed their inability to remain present on 5 th February 2016 and expressed that they would remain present on 8 th February 2016 for collecting amount of compensation along with interest. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['5 th February 2016', '8 th February 2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.488572120666504
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['06.06.1988']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: First Appellate Court has also found the sale deed dated 06.06.1988 in ""stark violation of the order passed by the Court."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['06.06.1988']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.9397242069244385
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['8.12.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 8.12.2006, P.W.18 also arrested accused Nos.2 and 3 and sent all the accused for remand. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['8.12.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.259355306625366
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['N.B.C.C. Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Hindustan Wires Limited v. R.Suresh']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 51) The learned counsel for the respondents relied upon the judgment of in Hindustan Wires Limited v. R.Suresh (6 supra) and also N.B.C.C. Limited (12 supra), to contend that as the time period for conclusion of proceedings had expired and in the absence of any application seeking extension of time, the arbitrator ceases to have jurisdiction. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Hindustan Wires Limited v. R.Suresh', 'N.B.C.C. Limited']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.46239185333252
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1993 Jammu and Kashmir 69 [Nahar Singh and another v. Manohar Kumar and others]']"", ""PROVISION"": ""['Section 110-B', 'Section 110-D.']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Unless a person was saddled with any liability in any manner under Section 110-B, he would not be a ""person aggrieved"" within the meaning of the term employed in Section 110-D. ................................................. (3) AIR 1993 Jammu and Kashmir 69 [Nahar Singh and another v. Manohar Kumar and others]: 6. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nahar Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1993 Jammu and Kashmir 69']"", ""PROVISION"": ""['Section 110-B', 'Section 110-D']"", ""RESPONDENT"": ""['Manohar Kumar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.80640745162964
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Majjigere', 'Majjigere Village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She admits that Majjigere is situated half a kilometer in the arecanut garden and about 20 house are there in Majjigere Village. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Majjigere']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.111058235168457
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bangladesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Reshma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reshma, is also a resident of Bangladesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bangladesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Reshma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.60260796546936
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: These three heads make up nearly 40 per cent of the annual operating and administrative expenditure of Rs.13,92,000/-. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.688980340957642
"{""CASE_NUMBER"": ""['Crl.P. No.152 of 2020']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections - 188, 270 and 273']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the present case, the police have registered the crime for the offences KL,J Crl.P. No.152 of 2020 & batch under Sections - 188, 270 and 273 of IPC. [/INST]
 {""CASE_NUMBER"": ""['KL,J Crl.P. No.152 of 2020']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections - 188, 270 and 273']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",10.538368225097656
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Such person shall be liable to a penalty which shall not be less than Rupees one lakh but it may extend to Rupees one crore. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.34406566619873
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , the body is divided into different areas, each representing nine per cent. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.914342880249023
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.2.2012', '14.11.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As it is clearly proved by the accused that even if the rate of interest is calculated from the date of loan , i.e from 15.2.2012 to 14.11.2014 , for the period of 2 years 9 months it would amount to Rs.88,000/- if calculated at the rate of 16% p.a. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.2.2012', '14.11.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.7610719203948975
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagrutiben']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Coming back to Jagrutiben, she was not an eye­witness, admittedly, and has no personal knowledge and it is apparent from the report she has stated that the deceased left the house for a morning walk at around 0645 hours/0700 hours. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagrutiben']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.45832633972168
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['NGT']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of UP']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The State of UP set out the factual position about the grant of leases before the NGT in an affidavit filed in this behalf. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['NGT']"", ""DATE"": ""[]"", ""GPE"": ""['UP']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.987837076187134
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['London']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When therefore there is an express designa- tion of the arbitration venue as London and no desig- nation of any alternative place as the seat, combined with a supranational body of rules governing the arbi- tration and no other significant contrary indicia, the in- exorable conclusion is, to my mind, that London is the juridical seat and English law the curial law. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['London']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.422337532043457
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['S.R.N. Hospital', 'Medical Collage, Allahabad']"", ""OTHER_PERSON"": ""['Anil Kumar Jaiswal', 'P.K. Pandey']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On his request, we appoint Shri Anil Kumar Jaiswal, Advocate (Roll No. 10033/12), as an Advocate Commissioner, to visit S.R.N. Hospital, attached to Medical Collage, Allahabad, accompanying Shri P.K. Pandey, learned Chief Standing Counsel, today itself, in day's time and submit report by tomorrow. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Allahabad']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['S.R.N. Hospital', 'Medical Collage']"", ""OTHER_PERSON"": ""['P.K. Pandey']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.181134700775146
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this case the delay caused is 15 days. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.241328954696655
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Rajiv Ranjan']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Dr. Rajiv Ranjan (P.W.10) is an independent expert witness who conducted the postmortem. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajiv Ranjan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.045423746109009
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner having collected Service Tax, is obliged to deposit the collected tax with the authorities. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.018612146377563
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 1(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Secondly, the learned counsel submits that Section 1(4) of the said 1948 Act primary applies to factories. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 1(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1948 Act']"", ""WITNESS"": ""[]""}",7.40652322769165
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26.08.2015']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A certificate claimed to have been issued by Gram Pradhan on 26.08.2015 that after construction of Mosque at the disputed land, Namaz is being offered in the aforesaid Mosque. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26.08.2015']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.674201965332031
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(d)', 'Section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Orissa Entry Tax Act, 1999', 'Kerala Act', 'Bihar Act, 1993']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: One of the questions which was framed for consideration by the Supreme Court was whether Section 2(d) read with Section 3 of Orissa Entry Tax Act, 1999, Section 2(d) read with Section 3 of Kerala Act and Bihar Act, 1993 (before its amendment in 2003), never intended to levy any entry tax on the goods, entering into local area of the State from any place outside the territory of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['Orissa', 'Kerala', 'Bihar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(d)', 'Section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Orissa Entry Tax Act, 1999', 'Kerala Act', 'Bihar Act, 1993']"", ""WITNESS"": ""[]""}",11.098339557647703
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There is no mechanism for Patna High Court REQ. CASE No. 146 of 2019 dt.03-07-2020 the adjudicatory process of the disputes or claims of a private party under the Recovery Act. [/INST]
 {""CASE_NUMBER"": ""['CASE No. 146 of 2019']"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['03-07-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Recovery Act']"", ""WITNESS"": ""[]""}",8.749078273773193
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Arun Bharadwaj, ld. CGSC, appearing for the Union of India, has Signature Not Verified Digitally Signed By:PRATHIBA M SINGH Signing Date:09.10.2020 16:15 Digitally Signed By:SINDHU KRISHNAKUMAR Signing Date:09.10.2020 16:50:02 reiterated the submissions made by Dr. Singhvi and has further submitted that this petition ought to be heard with the OA No. 291/138/2020 pending before the CAT. [/INST]
 {""CASE_NUMBER"": ""['OA No. 291/138/2020']"", ""COURT"": ""[]"", ""DATE"": ""['09.10.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""['Arun Bharadwaj', 'Sindhu Krishnakumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Prathiba M Singh', 'Dr. Singhvi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.56350326538086
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Succession Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It cannot be assumed having regard to this development that in enacting Section 14 of the Hindu Succession Act, the legislature merely intended to declare the rule enunciated by the Privy Council in Pratapmull case. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pratapmull']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Succession Act']"", ""WITNESS"": ""[]""}",8.236643314361572
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The suit and the proceedings would be a futile exercise and not capable of giving a valid and an executable decree after its withdrawal by the original plaintiff and the decree if any that can be passed in the suit would not bind on the plaintiff Sakha Yogam or its members/office bearers unless they have been made as a party to the suit. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Sakha Yogam']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.8298797607421875
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Additional Sessions Judge, Fast Track Court, Kashipur, District Udham Singh Nagar']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302/149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: That, on conclusion of the trial, the learned Additional Sessions Judge, Fast Track Court, Kashipur, District Udham Singh Nagar (hereinafter referred to as “the trial Court”) held all the accused guilty for the offences under Sections 302/149 of the IPC and sentenced them to undergo life imprisonment and a fine of Rs.2,000/­ each and, in case of default in paying the fine, to undergo one year RI. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Additional Sessions Judge, Fast Track Court, Kashipur, District Udham Singh Nagar']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302/149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",10.021530628204346
"{""CASE_NUMBER"": ""['O.S.No.31/2009']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Channaraddi', 'Gangavva', 'Mallamma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Apparently, Channaraddi set up his daughters Gangavva and Mallamma to impede and defeat the proceedings in O.S.No.31/2009. [/INST]
 {""CASE_NUMBER"": ""['O.S.No.31/2009']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Channaraddi', 'Gangavva', 'Mallamma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.463137149810791
"{""CASE_NUMBER"": ""['F.C.O.P.No.41 of 2012']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After the dismissal of the petition for annulment of marriage, the respondent/wife filed F.C.O.P.No.41 of 2012 for restitution of conjugal rights. [/INST]
 {""CASE_NUMBER"": ""['F.C.O.P.No.41']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.642039060592651
"{""CASE_NUMBER"": ""['Special Case (NDPS) No.17 of 2018']"", ""COURT"": ""['Additional Sessions Judge, Omerga, Maharashtra']"", ""DATE"": ""['12.07.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['D.R.I., Bangalore']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 12.07.2018, a letter was received from the Additional Sessions Judge, Omerga, Maharashtra asking to handover the custody of appellants to D.R.I., Bangalore as they were required to appear before the Additional Sessions Judge, Omerga, Maharashtra in Special Case (NDPS) No.17 of 2018. [/INST]
 {""CASE_NUMBER"": ""['Special Case (NDPS) No.17 of 2018']"", ""COURT"": ""['Additional Sessions Judge, Omerga']"", ""DATE"": ""['12.07.2018']"", ""GPE"": ""['Maharashtra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['D.R.I., Bangalore']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.988869190216064
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The date on which the measurements were recorded and the entries in the measurement book are inconsistent. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.540132522583008
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The lower back end was 5 cm behind root of right ear lobule. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.585018634796143
