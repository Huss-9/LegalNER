GroundTruth,ModelOutput,ExecutionTime
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The execution court held that the 5th judgment debtor can continue as the Manager only till a new Manager is elected, as per the 1934 Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1934 Constitution']"", ""WITNESS"": ""[]""}",8.59311556816101
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23.2.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sadashiv Thorat']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is mentioned in the first information report that on 23.2.2014 the offending truck gave dash to the 15 fa2564.16 motor cycle of deceased and Sadashiv Thorat (PW 2) from the back side of motor cycle. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23.2.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sadashiv Thorat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.767275094985962
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunil', 'Ram Niwas', 'Sombir', 'Manvir']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, Sunil put a blanket on that woman and took her to one Kotha of Ram Niwas and from there, Sombir sent Manvir to bring condom from outside. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunil', 'Sombir', 'Manvir']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.899816274642944
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['US']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Patent Office']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The point to be stressed here is that under our Act, was the examiner under the Indian Patent Office not entitled to know as to what was the prosecution history of the plaintiffs qua the corresponding patents in US. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Patent Office']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.300818204879761
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Act, 1988']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Furthermore, there was no provision for an appellate mechanism against action taken by the authorities under the unamended the Benami Act, 1988 while barring the jurisdiction of Civil Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Act, 1988']"", ""WITNESS"": ""[]""}",9.370768070220947
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2006']"", ""GPE"": ""['Guwahati', 'Howrah', 'Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He received information that a blue coloured vehicle bearing no.WB-26C-3869 was coming from Guwahati to Howrah through NH34 carrying huge quantity of ganja and would pass Barasat in the early hours of 27.09.2006. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2006']"", ""GPE"": ""['Gujarat', 'Gauhati', 'Howrah', 'Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.28746485710144
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Laxmi @ Rukmani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After that, accused Laxmi @ Rukmani was arrested and her personal search was conducted and [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Laxmi @ Rukmani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.10642957687378
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23rd May 2006', '10th December 2008', '4 th September 2009', '11th April 2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 161', 'Section 164']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr PC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Under this category there were four statements that were recorded, i.e. the statement dated 23rd May 2006 recorded by the CBI under Section 161 Cr PC (Ex.PW-1/DA), the statement dated 10th December 2008 recorded by the MM under Section 164 Cr PC (Ex.PW-1/E), the supplementary statement dated 4 th September 2009 (Ex.PW-1/DB), and the supplementary statement dated 11th April 2009 (Ex.PW-17/DB) both recorded by the CBI. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23rd May 2006', '10th December 2008', '4 th September 2009', '11th April 2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 161', 'Section 164']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr PC']"", ""WITNESS"": ""[]""}",11.888972520828247
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.12.2001']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Kamalpur Police Station, District Sitapur']"", ""OTHER_PERSON"": ""['Dukhi Ram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Briefly, the facts are that on 18.12.2001 at around 04:30 PM on Sitapur-Lucknow G.T. Road Near New Krishna Hall adjacent to Kamalpur Police Station, District Sitapur, the deceased Dukhi Ram was travelling in a Tempo of a Mahendra Economy Jeep No.UP-32-Z-9360. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.12.2001']"", ""GPE"": ""['Sitapur', 'Lucknow']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Kamalpur Police Station']"", ""OTHER_PERSON"": ""['Dukhi Ram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.884317636489868
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Setalvad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To this, Mr. Setalvad argued that if the building was equipped with machinery for the purpose of running a textile mill, whatever machinery was there for the purpose would be valued. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Setalvad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.118892669677734
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has further deposed that after receiving the result from FSL as Ex. PW­5/B, same was filed before the Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.0398054122924805
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Galligan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He supports Galligan in this respect and goes to the extent by saying that it is same as ensuring dignity of individuals, in respect of whom or against whom the decision is taken, in the following words: ""The instrumental value of procedures should not be underestimated; the accurate application of authoritative standards is, as Galligan clearly explains, an important aspect of treating someone with respect. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Galligan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.09782361984253
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['30.05.2016', '17.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act 2002']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, when their accounts became a Non Performing Assets as on 30.05.2016, the bank initiated action under SARFAESI Act 2002 and issued a notice dated 17.12.2016 under Section 13(2) of the SARFAESI Act 2002, calling upon the petitioners to pay a sum of Rs.240,03,62,830.86. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['30.05.2016', '17.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act 2002']"", ""WITNESS"": ""[]""}",10.386053085327148
"{""CASE_NUMBER"": ""['L.A.R.No.73 of 2002']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The interim relief sought for in this interlocutory application is opposed by the 3 rd respondent, who is the 3rd claimant in L.A.R.No.73 of 2002, raising various contentions. [/INST]
 {""CASE_NUMBER"": ""['L.A.R.No.73 of 2002']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.12217903137207
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Total income after addition at 1,15,200 + (1,15,200 x 40%) the rate of 40% on account of = 1,61,280 future prospects 3. Income after 1/3rd deduction 1,61,280 - (1,61,280 x 1/3) on account of personal = 1,07,520 expenses [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.096632719039917
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Correspondingly, a judgment in personam refers to a judgment against a person as distinguished from a judgment against a thing, right or status and a judgment in rem refers to a judgment that determines the status or condition of property which operates directly on the property itself. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.875149250030518
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Furthermore, it is contended that the notice under Section 13(2) was never served on the petitioner. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.998387098312378
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Godavari Sugar Mills']"", ""OTHER_PERSON"": ""['Ramanlal Gulab Chand Shah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 31-B', 'Part III']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: While dealing with the findings of the High Court in the impugned judgment therein, made on the basis of an earlier decision of this Court in Ramanlal Gulab Chand Shah (supra), this Court in Godavari Sugar Mills (supra) observed that a legislation, which is incidental or ancillary to a statute protected under Article 31-B, can be assailed on the ground of inconsistency with Part III of the Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Godavari Sugar Mills']"", ""OTHER_PERSON"": ""['Ramanlal Gulab Chand Shah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 31-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",8.4580557346344
"{""CASE_NUMBER"": ""['Bihar Petition No. 58 of 1956']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the Bihar Petition No. 58 of 1956 are set out the following bald allegations: [/INST]
 {""CASE_NUMBER"": ""['Bihar Petition No. 58']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.76480746269226
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Shambhu Investment (P.) Ltd. vs. CIT (2003) 129 Taxman 70 (Supreme Court)', 'CIT vs. Shambhu Investment (P.) Ltd. \""(2001) 116 Taxman 795 (Calcutta High Court)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Ld. A.R. alternatively submitted that if the composite of rent and hire charges for the furniture and fixtures are taken together that could be taken the ALV and in defence of his proposition the Ld. A.R. relied on the following decisions: ""1. Shambhu Investment (P.) Ltd. vs. CIT (2003) 129 Taxman 70 (Supreme Court) 2. CIT vs. Shambhu Investment (P.) Ltd. ""(2001) 116 Taxman 795 (Calcutta High Court) [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Calcutta High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Shambhu Investment (P.) Ltd. vs. CIT (2003) 129 Taxman 70 (Supreme Court)', 'CIT vs. Shambhu Investment (P.) Ltd. ""(2001) 116 Taxman 795']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.932518005371094
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 36(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This, however, would, in its turn, render the words ""has been"" in the amended Section 36(2) meaningless. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 36(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.784440279006958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['FSS Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The definition of 'adulterant' is found in the provisions of the FSS Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['FSS Act']"", ""WITNESS"": ""[]""}",7.941243648529053
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 113']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Significantly, Section 113 of the Act enables the State Government to prescribe the conditions for the issuance of permits for transport vehicles by the State or Regional Transport Authorities. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State Government', 'Regional Transport Authorities']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 113']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.072088718414307
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['London', 'New York']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: “London Arbitration is a well known phenomenon which is often chosen by foreign nationals with a dif- ferent law, such as the law of New York, governing the substantive rights of the parties. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['London']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.021723508834839
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.01.1995']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When Respondent No.2 failed to respond and/or provide the documents sought, keeping in view the serious allegations of cheating, the Managing Committee of the School, in its meeting held on 12.01.1995, decided to extend his probation by one year. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.01.1995']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.644225358963013
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chennai', 'Salem']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that the Government of India has proposed the subject project at an estimated cost of about Rs.10,000 crores to develop a 276kms highway connecting Chennai and Salem. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chennai', 'Salem']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.373295783996582
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.01.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['6th Central Pay Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The clear purport and meaning of the aforesaid provision is that those who retired before 01.01.2006 as well were ensured that their revised pension after enforcing recommendations of the 6th Central Pay Commission, shall not be less than 50% of the minimum of the pay band plus grade pay corresponding to the pre-revised pay scale from which the pensioners had retired. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.01.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['6th Central Pay Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.800725936889648
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['DDA']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondent No. 2/DDA shall also take appropriate steps in accordance with law in case of violation of such stipulation in the letter of allotment by the unaided schools."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['DDA']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.491114139556885
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""['Haren Pandya']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['DSPE Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A notification was issued under Section 6 of the DSPE Act for investigation by CBI in the murder of Haren Pandya. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""['Haren Pandya']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['DSPE Act']"", ""WITNESS"": ""[]""}",7.776329755783081
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Siddhi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mahesh Gude']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per evidence of PW10 Dr Mahesh Gude and PM notes Exh. 103, 100 ml of semi- digested food with yellowish liquid was found in the stomach of deceased Siddhi. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Siddhi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mahesh Gude']""}",8.844828367233276
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was held on the aforesaid facts, that the income received in British India could not be said to wholly arise in British India and that there should be allocation of income between the various business operations of the assessee demarcating the income arising in the taxable territories inthe particular year from the income arising without the taxable territories in that year. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['British India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.162520885467529
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is, accordingly, held that if the purpose of acquisition is same and when the lands are identical and similar though lying in different villages, there is no justification to make any discrimination between the land owners to pay higher amount to some of the land owners and less compensation to others. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.240178108215332
"{""CASE_NUMBER"": ""['O. P. No. 1380/2014', 'O.P. No. 78/2015']"", ""COURT"": ""['Family Court, Kollam, Kerala']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 26', 'Section 7', 'Section 13(1) (ib)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure', 'Family Courts Act', 'Hindu Marriage Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Learned counsel for the respondent informs that O. P. No. 1380/2014 under Section 26 of the Code of Civil Procedure read with Section 7 of the Family Courts Act and O.P. No. 78/2015 under Section 13(1) (ib) of the Hindu Marriage Act, both filed by the respondent in the Family Court, Kollam, Kerala, have already been decided. [/INST]
 {""CASE_NUMBER"": ""['O. P. No. 1380/2014', 'O.P. No. 78/2015']"", ""COURT"": ""['Family Court, Kollam']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 26', 'Section 7', 'Section 13(1) (ib)', 'Section 13(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Marriage Act']"", ""WITNESS"": ""[]""}",12.37692928314209
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Customs (Import), Mumbai Vs. Dilip Kumar And Company And Ors., (2018) 9 SCC 1']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A Constitution Bench in the case of Commissioner of Customs (Import), Mumbai Vs. Dilip Kumar And Company And Ors., (2018) 9 SCC 1, had reiterated these principles. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Customs (Import), Mumbai Vs. Dilip Kumar And Company And Ors.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.489765167236328
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['National Highways Authority of India']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Petitioners in these Writ Petitions are land owners whose lands were acquired for the purpose of construction of National Highway by the Respondent No.3 - National Highways Authority of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Highways Authority of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.556198120117188
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['K.A. Nagamani Vs. Indian Airlines & Ors., (2009) 5 SCC 515']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further reliance has been placed on another decision of the Supreme Court in K.A. Nagamani Vs. Indian Airlines & Ors., (2009) 5 SCC 515, to submit, no challenge may be raised on the basis of violation of pre-existing Rules. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['K.A. Nagamani Vs. Indian Airlines & Ors., (2009) 5 SCC 515']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.890125036239624
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The decision must be specific and unequivocal and cannot be inferred merely because of absence of any Guidelines in the matter. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.171813011169434
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Gujarat High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Annadurai']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Natvarlal Amarshibhai Devani Vs. State of Gujarat and another [2017 Cri.L.J. 1911]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, the learned counsel appearing for Annadurai has placed reliance upon a judgment of a Single Judge of the Gujarat High Court in Natvarlal Amarshibhai Devani Vs. State of Gujarat and another [2017 Cri.L.J. 1911], wherein, it has been held that in the absence of a specific provision of law for voice test, the same cannot be permitted. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Gujarat High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Annadurai', 'Natvarlal Amarshibhai Devani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.90049695968628
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This action does not do any credit for the State. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.782150506973267
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench of the Supreme Court', 'Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SBP and Co.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Konkan Railway Corpn. Ltd. vs. Rani Construction (P) Ltd., (2002) 2 SCC 388']"", ""PROVISION"": ""['Section 11(6)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arbitration Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The seven-judge Constitution Bench of the Supreme Court in SBP and Co. (supra) while reversing earlier five-judge Constitution Bench judgment in Konkan Railway Corpn. Ltd. vs. Rani Construction (P) Ltd., (2002) 2 SCC 388 held that the power exercised by the Chief Justice of the High Court or the Chief justice of India under Section 11(6) of the Arbitration Act is not an administrative power but is a judicial power. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['SBP and Co.', 'Konkan Railway Corpn. Ltd. vs. Rani Construction (P) Ltd., (2002) 2 SCC 388']"", ""PROVISION"": ""['Section 11(6)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arbitration Act']"", ""WITNESS"": ""[]""}",11.389195442199707
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This, in substance and effect, results in placing a reverse burden which is legally impermissible. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.727557182312012
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Municipal Corporation of the City of Ahmedabad v. Chandulal Shamaldas Patel', 'Himalayan Tiles & Marbles (P) Ltd. Case']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was further contended that even if there was a conflict between the two decisions of this Court in the Municipal Corporation of the City of Ahmedabad v. Chandulal Shamaldas Patel and in Himalayan Tiles & Marbles (P) Ltd. Case both by Division Bench comprising of two Hon'ble Judges, the conflict can only be resolved by referring the case to a larger Bench of this Court."" 36. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Municipal Corporation of the City of Ahmedabad v. Chandulal Shamaldas Patel', 'Himalayan Tiles & Marbles (P) Ltd. Case']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.64449691772461
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Her husband told that it is not possible to pay that much and the elders gathered there negotiated to give Rs. 1.5 lakhs cash and 10 tholas of gold in the form of ornaments to be put on bride. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.764580726623535
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['D.K. Jain']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Jeffrey J. Diermeier v. State of W.B.']"", ""PROVISION"": ""['Section 482']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On a similar issue under consideration, in Jeffrey J. Diermeier v. State of W.B., while explaining the scope and ambit of the inherent powers of the High Court under Section 482 of the Code, one of us (D.K. Jain, J.) speaking for the Bench, has observed as follows: (SCC p. 251, para 20) ""20. ... [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['D.K. Jain']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jeffrey J. Diermeier']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 482']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.43174695968628
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, in the present reference where no statutory provision is called into question, it is necessary for the court to analyse the relationship between what the statute penalizes and what the Constitution protects. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.776465177536011
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mehul Mahendra Thakkar v. Meena Mehul Thakkar', 'All India Anna Dravida Munnetra Kazhagam v. Govt. of T.N.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is settled legal position that, by way of interim relief, the final relief should not be granted till the matter is decided one way or the other, (Mehul Mahendra Thakkar v. Meena Mehul Thakkar ; All India Anna Dravida Munnetra Kazhagam v. Govt. of T.N., ), as interlocutory orders are made in aid of final orders and not vice versa. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mehul Mahendra Thakkar', 'Meena Mehul Thakkar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['All India Anna Dravida Munnetra Kazhagam v. Govt. of T.N.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.822490930557251
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Browne-Wilkinson']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, Lord Browne-Wilkinson observed that in case of an adult who is mentally competent, the artificial feeding regime would be unlawful unless the patient consented to it as a mentally competent patient can, at any time, put an end to life support systems by refusing his consent to their continuation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Browne-Wilkinson']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.070762157440186
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.02.1977']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 5(5) of Order XLI']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure (Amendment) Act, 1976']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Rule 5(5) of Order XLI was inserted by the Code of Civil Procedure (Amendment) Act, 1976, with effect from 01.02.1977. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.02.1977']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 5(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure (Amendment) Act, 1976']"", ""WITNESS"": ""[]""}",9.35911226272583
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 248']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Article 248 would have to be re- drafted as follows: ""Parliament has exclusive power to make any law with respect to any matter not mentioned in the Concurrent List or State List, provided it has not been mentioned by way of exclusion in any entry in List I. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 248']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.801404237747192
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['National Company Law Tribunal, New Delhi']"", ""DATE"": ""['16.07.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: According to definition of share capital shown in the scheme of 15 of 37 arrangement, the effective date when the National Company Law Tribunal, New Delhi approved the scheme was 16.07.2018. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['National Company Law Tribunal, New Delhi']"", ""DATE"": ""['16.07.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['scheme of 15 of 37']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.428980588912964
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Satya Pal Anand VS State of M.P & Ors. (2016)10 SCC 767']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act 1908']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Three judge Bench of the Hon'ble Supreme Court of India in Satya Pal Anand VS State of M.P & Ors. (2016)10 SCC 767 held in the context of the Registration Act 1908 that ""some irregularity in the procedure committed during the registration process would not lead to a fraudulent execution and registration of the document, but a case of mere irregularity. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Satya Pal Anand']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act 1908']"", ""WITNESS"": ""[]""}",9.500732183456421
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2019', 'January 18, 2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This proposition is sought to be demonstrated by the delay in communication of the order declaring the petitioners wilful defaulters, which was passed on July 3, 2019, but was communicated only on January 18, 2020. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2019', 'January 18, 2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.508453369140625
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of M.P. v. Bacchudas, (2007) 9 SCC 135 at SCC para 10', 'State of Punjab v. Parveen Kumar, (2005) 9 SCC 769 at SCC para 9']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (State of M.P. v. Bacchudas, (2007) 9 SCC 135 at SCC para 10 and State of Punjab v. Parveen Kumar, (2005) 9 SCC 769 at SCC para 9.) [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of M.P. v. Bacchudas, (2007) 9 SCC 135', 'State of Punjab v. Parveen Kumar, (2005) 9 SCC 769']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.277123928070068
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The intention is that the land loser will immediately be able to draw compensation and purchase some other suitable land or make appropriate arrangements for his livelihood. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.078930854797363
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Peerless General Finance & Investment Company Ltd. vs. CIT, 309 CTR 321']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He also relied on the decision of the Hon'ble Supreme Court in the case of Peerless General Finance & Investment Company Ltd. vs. CIT, 309 CTR 321 in support of the contention that the subscription fee and the membership fee does not form part of the revenue receipt. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Peerless General Finance & Investment Company Ltd. vs. CIT, 309 CTR 321']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.731208801269531
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sections 118(a) & 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Now, the burden is on the accused to rebut the statutory presumptions under sections 118(a) & 139 of NI Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sections 118(a) & 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}",9.63917326927185
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sengupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Maharashtra University of Health Sciences (represented by Dy. Registrar) Vs. Paryani Mukesh Jawaharlal & Ors. reported at (2007) 10 SCC 201']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Sengupta in this regard has relied on Maharashtra University of Health Sciences (represented by Dy. Registrar) Vs. Paryani Mukesh Jawaharlal & Ors. reported at (2007) 10 SCC 201, and submits that the Hon'ble Supreme Court has stated that if the coordinate bench wants to take a different view, judicial proprietary requires that such matter be referred to a larger bench. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sengupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Maharashtra University of Health Sciences (represented by Dy. Registrar) Vs. Paryani Mukesh Jawaharlal & Ors. reported at (2007) 10 SCC 201']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.583276987075806
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['G. Ramaswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mithu v. State of Punjab [Mithu v. State of Punjab, (1983) 2 SCC 277 : 1983 SCC (Cri) 405]']"", ""PROVISION"": ""['Section 303']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reference was then made by Shri G. Ramaswamy to the decision in Mithu v. State of Punjab [Mithu v. State of Punjab, (1983) 2 SCC 277 : 1983 SCC (Cri) 405] wherein Section 303 of the Indian Penal Code was struck down. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['G. Ramaswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mithu v. State of Punjab [Mithu v. State of Punjab, (1983) 2 SCC 277 : 1983 SCC (Cri) 405]']"", ""PROVISION"": ""['Section 303']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code']"", ""WITNESS"": ""[]""}",11.500170707702637
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Iqbal Singh Marwah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Moreover, since this decision was rendered prior to the Constitution Bench decision in Iqbal Singh Marwah (supra), the three­Judge Bench did not have the benefit of referring to the observations made in that case. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Iqbal Singh Marwah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.786714792251587
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: These proceedings may be entertained either by the High Court or the Registrar on the application, and, at the instance, of the ""person aggrieved"". 55. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.874849796295166
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Adhoya Hinduan']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kanwar Raja Ram Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even at the time of death, Kanwar Raja Ram Singh was owner of land measuring 132 kanals 14 marlas in village Adhoya Hinduan. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Adhoya Hinduan']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kanwar Raja Ram Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.25355863571167
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['4th October 1962']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The right to create sub tenancy under the parent lease agreement of 4th October 1962 reads: ""5. Notwithstanding the permission of the lessor's first hand and obtained in writing to assign and/or transfer the lease of the demised premises but the lessor will have the right to sublet part of the premises on condition that the lessee will keep major portion of the premises under his occupation."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['4th October 1962']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.786933660507202
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rama Chowhan', 'Mohan Rao Chowhan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondents have granted remission to two persons viz., Rama Chowhan (Accused No.4) and Mohan Rao Chowhan (Accused No.11), and they were released in the year 2011 itself. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rama Chowhan', 'Mohan Rao Chowhan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.347794771194458
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 69(1)', 'sub-section(5) and the sub- section(4) of the section 132']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CGST Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We reiterate that the Section 69(1) of the CGST Act provides for the power to arrest for both types of the offences i.e. cognizable and non bailable offences as well non-cognizable and bailable offences as per the provisions of the sub-section(5) and the sub- section(4) of the section 132 of the CGST Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 69(1)', 'sub-section(5)', 'sub- section(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CGST Act', 'CGST Act.']"", ""WITNESS"": ""[]""}",10.188912630081177
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mandadi village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Narasimha Rao']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When he reached Mandadi village, two unknown persons came and over took Narasimha Rao-PW.1. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mandadi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Narasimha Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.490292072296143
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The said compensation along with interest shall be paid by Respondent No.1 to the Petitioner, within a period of eight weeks from today, failing which, on the entire amount, interest @ 7.5% per annum shall be liable to be paid by the Respondent No.1. 35. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.31708574295044
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['U.P. Motor Vehicle Rules, 1998', 'Motor Vehicles Act, 1988']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Having heard learned counsel for the parties and perused the record, it is evident that the controversy revolves around the mechanism provided in the U.P. Motor Vehicle Rules, 1998 which have been framed under the Motor Vehicles Act, 1988. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['U.P. Motor Vehicle Rules, 1998', 'Motor Vehicles Act, 1988']"", ""WITNESS"": ""[]""}",8.662678480148315
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['fourth Tamil Nadu Pay Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that the fourth Tamil Nadu Pay Commission has recommended that at the end of the period of three years, the Dearness Allowance sanctioned upto that period could be treated as Dearness Pay. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.265548944473267
"{""CASE_NUMBER"": ""['C/FA/3351/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As summarized by the Division Bench, if the dispute raised is of the kind falling within the categories (a), (b) or (c) stated above, C/FA/3351/2017 ORDER the Tribunal may give its finding in summary way. [/INST]
 {""CASE_NUMBER"": ""['C/FA/3351/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.721740245819092
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.10.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunita']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: I had not given any complaints to the police against Sunita or her parents before 22.10.2006. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.10.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunita']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.14797306060791
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16-9-2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The 2nd document viz., the District Courts official memorandum dated 16-9-2008 was nothing but the show cause notice issued to the petitioner before the issue of the charge memo. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16-9-2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.651069641113281
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It must, however, be made clear that a Court of Session cannot cancel a bail which has already been granted by the High Court unless new circumstances arise during the progress of the trial after an accused person has been admitted to bail by the High Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.96526026725769
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Asadulla', 'Rashid']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Asadulla and Rashid reached hotel at 4/5 p.m. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Asadulla', 'Rashid']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.832636594772339
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27 th August 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament', 'NCBC']"", ""OTHER_PERSON"": ""['B.K. Handique']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, while this Commission was functioning, the Parliament constituted a Committee on welfare of Other Backward Classes under the Chairmanship of Shri B.K. Handique which presented its first report on 27 th August 2012 and it recommended that the NCBC should be conferred with a constitutional status and this saw light of the day by introduction of 123rd Bill. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27 th August 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['NCBC']"", ""OTHER_PERSON"": ""['B.K. Handique']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['123rd Bill']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.407784938812256
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302 and 201']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 4) On appearance, charges under Sections 302 and 201 IPC came to be framed, read over and explained to the accused, to which the accused pleaded not guilty and claimed to be tried. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302 and 201']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",8.652957439422607
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['10/14.09.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government Medical College & Hospital, Sector 32, Chandigarh', 'Chandigarh Administration']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She was designated as Head, Department of Anatomy, Government Medical College & Hospital, Sector 32, Chandigarh, by the Chandigarh Administration, on 10/14.09.2010. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['10/14.09.2010']"", ""GPE"": ""['Chandigarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government Medical College & Hospital, Sector 32']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.231353521347046
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 8.7 It is further submitted that the High Court ought to have acquitted the original Accused No.1 also by giving her the benefit of doubt, as was given to original Accused Nos.6 and 7. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.33095908164978
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2008) 14 SCC 337']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, by an order reported in (2008) 14 SCC 337, the matter was referred to a Larger Bench. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2008) 14 SCC 337']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.666867971420288
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When there is the want of general power to act, the court has no jurisdiction. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.128201961517334
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT', 'NCLAT']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 231']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IBC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Section 231 of the IBC bars the jurisdiction of civil courts in respect of any matter in which the Adjudicating Authority i.e. the NCLT or the NCLAT is empowered by the Code to pass any Order. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT', 'NCLAT']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 231']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IBC']"", ""WITNESS"": ""[]""}",7.746913433074951
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT']"", ""DATE"": ""['14 June, 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 14 June, 2017 SBI suggested to the plaintiffs that it would make efforts to complete the transaction outside the purview of NCLT. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT']"", ""DATE"": ""['14 June, 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.293054103851318
"{""CASE_NUMBER"": ""['Crime No.163/2011']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302 and 374(f)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On the basis of the confessional statement of the appellant, recorded by P.W.14 in the presence of P.Ws.10 and 11 - mediators, he registered a case in Crime No.163/2011 under Sections 302 and 374(f) of IPC, issued express FIRs to all the concerned. [/INST]
 {""CASE_NUMBER"": ""['Crime No.163/2011']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302 and 374(f)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""['P.W.14']""}",9.532993078231812
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bhander']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mahendra Kumar Tiwari', 'Ramjisharan']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further, Mahendra Kumar Tiwari (P.W. 13) has specifically stated that Sitola Colony, Bhander is adjoining to the place of incident, and Ramjisharan (P.W.13) is the resident of Sitola Colony, Bhander. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bhander']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mahendra Kumar Tiwari', 'Ramjisharan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.725039005279541
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If it is capable of belief independently of the confession, then of course it is not necessary to call the confession in aid. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.6988983154296875
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['February 7, 1968']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 139(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Therefore, the fact that the assessee furnished the second return on February 7, 1968, even before any investigation was http://www.judis.nic.in started by the income-tax department cannot be of any assistance to him, if the case does not fall within the scope of Section 139(5) of the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['February 7, 1968']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['income-tax department']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 139(5)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.87479043006897
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 68 Marata(J) final.doc available in the Sate of Maharashtra from 52% to 68% and thereby crossing the barrier of the ceiling limit of 50% imposed by the Hon'ble Apex Court in case of in case of Indra Sawhney Versus Union of India1. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""['Maharashtra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Indra Sawhney']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.465827226638794
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Counsel submits that these allegations were not stated by him in Ex.PW1/D1. 24. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.915407657623291
"{""CASE_NUMBER"": ""['W.A.Nos.157-176/2019', 'W.P.Nos.47171-190/2018']"", ""COURT"": ""[]"", ""DATE"": ""['3.9.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The facts further reveal that writ appeals were preferred i.e., W.A.Nos.157-176/2019 against the order passed in W.P.Nos.47171-190/2018 and the State Government took a stand before the Division Bench that it shall be withdrawing the notification dated 3.9.2018 and thereafter, a fresh notification will be issued on the subject. [/INST]
 {""CASE_NUMBER"": ""['W.A.Nos.157-176/2019', 'W.P.Nos.47171-190/2018']"", ""COURT"": ""[]"", ""DATE"": ""['3.9.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.26762580871582
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bhavnagar University v. Palitana Sugar Mill Pvt. Ltd. & Ors., reported in AIR 2003 SC C/SCA/11794/2006 JUDGMENT 511']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the case of Bhavnagar University v. Palitana Sugar Mill Pvt. Ltd. & Ors., reported in AIR 2003 SC C/SCA/11794/2006 JUDGMENT 511, the Hon'ble Supreme Court has observed in para 27, 32 to 35 and 38 as under: ""27. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bhavnagar University v. Palitana Sugar Mill Pvt. Ltd. & Ors., reported in AIR 2003 SC C/SCA/11794/2006']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.840143203735352
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.04.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Consequently, it flows from the above - 01.04.2021 onwards, all references to issuance of notice contained in the Enabling Act must be read as reference to the substituted provisions only. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['01.04.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.791533946990967
"{""CASE_NUMBER"": ""['OA(EKM)NO.1613 OF 2017']"", ""COURT"": ""[]"", ""DATE"": ""['02.08.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: EXHIBIT P1(A4) TRUE COPY OF THE INTERIM ORDER DATED 02.08.2017 IN OA(EKM)NO.1613 OF 2017. [/INST]
 {""CASE_NUMBER"": ""['OA(EKM)NO.1613']"", ""COURT"": ""[]"", ""DATE"": ""['02.08.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.650932312011719
"{""CASE_NUMBER"": ""['CWP No.18253 of 2009']"", ""COURT"": ""['Punjab & Haryana High Court']"", ""DATE"": ""['24.09.2004']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Survey of India', 'Chandigarh Administration']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The catchment area as depicted in the map prepared by the Survey of India taken on record by the Hon'ble Punjab & Haryana High Court vide orders dated 24.09.2004 and adopted by Chandigarh Administration thereafter officially as map of catchment area of 77 of 148 CWP No.18253 of 2009 & other connected petitions #78# Sukhna Lake is hereby published for the information of general public. [/INST]
 {""CASE_NUMBER"": ""['18253']"", ""COURT"": ""['Punjab & Haryana High Court']"", ""DATE"": ""['24.09.2004']"", ""GPE"": ""['Chandigarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Survey of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.14938497543335
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (Manohar Lal Sharma14; Committee for Protection of Democratic Rights). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Committee for Protection of Democratic Rights']"", ""OTHER_PERSON"": ""['Manohar Lal Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.963467836380005
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['VUSB Bhushan Kumar']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The self-same petitioner by name VUSB Bhushan Kumar has maintained the two writ petitions against three Respondents by name (1). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['VUSB Bhushan Kumar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.619967699050903
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Gagan Makkar', 'Harmeet Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The case of the Plaintiff as stated in the plaint is that, Plaintiff was searching for some residential property in Roop Nagar area, Delhi and he was informed about the suit property by Property dealers- Shri Gagan Makkar and Shri Harmeet Singh (hereinafter „the brokers‟). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Roop Nagar', 'Gagan Makkar', 'Harmeet Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.97042465209961
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['police station Dhaurhara']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The police station Dhaurhara from his house is 40-50 steps. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Dhaurhara']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.742653846740723
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bihar', 'New Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Highway Authority of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The General Manager, Bihar, National Highway Authority of India, Headquarter, G 5 and 6, Sector - 10, Dwarka, New Delhi, 110075. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bihar', 'New Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Highway Authority of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.409708738327026
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['13 (1995) 3 SCC 377']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Court held: 13 (1995) 3 SCC 377 “10. What is really relevant thus is the conduct of the government servant which has led to his conviction on a criminal charge. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['13 (1995) 3 SCC 377']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.972383975982666
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 19']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The later Act has inter-alia amended Section 19 of the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 19']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.137216329574585
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause (a) of sub-section 1 of section 53']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Anomaly can be removed by reading down clause (a) of sub-section 1 of section 53 by striking down the words ""twenty four hours"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause (a) of sub-section 1 of section 53']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.10251522064209
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Koteshwar Vittal Kamath v, K. Rangappa & Co., SCR at p. 48']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: [see Koteshwar Vittal Kamath v, K. Rangappa & Co., SCR at p. 48] [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Koteshwar Vittal Kamath']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.273803949356079
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The applicant claimed that the concentration of toxic substances in the air near her home constantly exceeded and continues to exceed the safe level established by the relevant legislation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.194920778274536
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Significantly, formal FIR was registered at 12:30 pm. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.787360906600952
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: From the material on record, it is quite evident that the tractor and trolley purchased by the complainant, which the complainant was intending to get transferred in his name, were registered in the year 1980 and 1982 respectively. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.101162672042847
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 340', 'Sections 193 and 419']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CrPC', 'IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondent filed a private complaint under Section 340, CrPC alleging offence punishable under Sections 193 and 419, IPC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 340', 'Sections 193 and 419', 'Sections 193 and 419']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CrPC', 'IPC']"", ""WITNESS"": ""[]""}",9.182525634765625
"{""CASE_NUMBER"": ""['CWP No.18253 of 2009']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The sole question is, who has standing to be heard?"" 130 of 148 CWP No.18253 of 2009 & other connected petitions #131# 74. [/INST]
 {""CASE_NUMBER"": ""['CWP No.18253 of 2009']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 130']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.561363935470581
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pooja Ravinder Devidasani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Further, in re Pooja Ravinder Devidasani (supra), the Supreme Court has observed as under:- ""17. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pooja Ravinder Devidasani']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.7980287075042725
"{""CASE_NUMBER"": ""['Criminal Appeal No.1211/2018', 'Criminal Appeal No.301/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence we pass the following order: O R D E R (I) Both Criminal Appeals i.e. Criminal Appeal No.1211/2018 and Criminal Appeal No.301/2017 are allowed. Cri.Apeal 1211.18 (II) [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No.1211/2018', 'Criminal Appeal No.301/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.840073108673096
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sachida Nand Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 195(1)(b)(ii)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Sessions Judge and the High Court, relying on Sachida Nand Singh, held that the bar under Section 195(1)(b)(ii) would not apply where forgery of a document was committed before producing the said document in court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sachida Nand Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 195(1)(b)(ii)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.101228475570679
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Land Acquisition Authority found that if 12 or 13 acres lands are left to the land owners, their most of the difficulties shall be removed and such proposal to this effect was sent. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.946654319763184
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Part IXA']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To find out as to whether a law made by State Legislature is inconsistent with provisions of Part IXA of the Constitution, the principles which have been laid down by this Court to determine the repugnancy between the law made by the Legislature of a State and law made by Parliament can be profitably relied on. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Part IXA']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",8.335902214050293
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In all the subsequent cases, the Supreme Court invoked its extraordinary powers under Article 142 of the Constitution of India in order to do complete justice to the parties when faced with a situation where the marriage ties had completely broken and there was no possibility whatsoever of the spouses coming together again. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",7.92083215713501
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['M. G. Aggarwal versus State of Maharashtra, AIR 1963 SC 200']"", ""PROVISION"": ""['Section 423(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble Supreme Court has held in the matter of M. G. Aggarwal versus State of Maharashtra, AIR 1963 SC 200, the relevant part is extracted as under: ""(16) Section 423(1) prescribes the powers of the appellate Court in disposing of appeals preferred before it and clauses (a) and (b) deal with appeals against acquittals and appeals against convictions respectively. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M. G. Aggarwal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['M. G. Aggarwal versus State of Maharashtra, AIR 1963 SC 200']"", ""PROVISION"": ""['Section 423(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.11475944519043
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per the proviso to Rules, 2004, in case of non-availability of suitable candidates, the remaining vacancies are to be filled by direct recruitment as per clause (i) thereof. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['clause (i)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Rules, 2004']"", ""WITNESS"": ""[]""}",7.45842432975769
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ravi Kant']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Sri Ravi Kant, Senior Advocate, appearing for respondents contended, firstly, that plaintiff was not in possession of property in dispute and suit for injunction was filed without seeking any relief for possession, therefore, suit itself was not maintainable; Secondly, no objection was raised with regard to admissibility of secondary evidence; and, thirdly, argument advanced with regard to maintainability of First Appeal before District Judge is misconceived. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ravi Kant']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.32485032081604
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['District Judge, Sikar']"", ""DATE"": ""['22.07.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence, this writ petition has been filed by (3 of 21) [CW-8363/2021] the petitioner-non-applicant challenging the order dated 22.07.2021 passed by the learned District Judge, Sikar. [/INST]
 {""CASE_NUMBER"": ""['CW-8363/2021']"", ""COURT"": ""['District Judge, Sikar']"", ""DATE"": ""['22.07.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.031204462051392
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Aligarh Devt. Auth. V/s. Megh Singh & Others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the case of Aligarh Devt. Auth. V/s. Megh Singh & Others, the Hon'ble Supreme Court while dealing with the provision of 1894 Act and 2013 Act, held that the stand of the authority that it had deposited 80% of the compensation with the land acquisition officer and hence it was for the owner to collect the money, cannot be appreciated. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Aligarh Devt. Auth. V/s. Megh Singh & Others']"", ""PROVISION"": ""['1894 Act', '2013 Act']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.78108549118042
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We direct the States to consider implementing the reformative and rehabilitation programmes contained in the 2016 Manual. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.810239791870117
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 31']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Indeed, in view of the discretion granted to an arbitral tribunal under Section 31 of the Act of 1996 the State could not have reasonably questioned the award of further interest at the rate of 12 per cent per annum. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 31']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Act of 1996']"", ""WITNESS"": ""[]""}",7.66766357421875
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Crl. Appeal Nos. 1709-1710 of 2019 (@ SLP [Crl.]Nos.2497-2498 of 2019) The State of Madhya Pradesh vs. Killu @ Kailash & Ors.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court, therefore, gave benefit to said three accused as under:- Crl. Appeal Nos. 1709-1710 of 2019 (@ SLP [Crl.]Nos.2497-2498 of 2019) The State of Madhya Pradesh vs. Killu @ Kailash & Ors. “21.From the aforesaid quoted judgment [/INST]
 {""CASE_NUMBER"": ""['Crl. Appeal Nos. 1709-1710 of 2019', 'SLP [Crl.]Nos.2497-2498 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Killu @ Kailash']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.51058030128479
"{""CASE_NUMBER"": ""['S.L.P. (Crl.) Nos. 7040-7041 of 2014']"", ""COURT"": ""['District and Sessions Judge, Bagalkot']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code', 'IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He lodged a First Information Report with the police and after investigations, necessary proceedings were taken before the District and Sessions Judge, Bagalkot against the accused persons under several sections of the Indian Penal Code (the IPC). Crl. Appeal Nos._______/2018 (@ S.L.P. (Crl.) Nos. 7040-7041 of 2014) 12. [/INST]
 {""CASE_NUMBER"": ""['Crl. Appeal Nos._______/2018 (@ S.L.P. (Crl.) Nos. 7040-7041 of 2014)']"", ""COURT"": ""['District and Sessions Judge, Bagalkot']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code (the IPC)']"", ""WITNESS"": ""[]""}",11.791563272476196
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Kishan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He had handed over all the parcels to ASI Ram Kishan which were taken into possession vide recovery memo Ex.PF.10. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Kishan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.22259783744812
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sarju Prasad']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: P.W.82 Sarju Prasad had deposed that accused had stayed in his hotel, but he had failed to bring the register in this regard and no test identification parade was got conducted from him. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sarju Prasad']""}",8.286046504974365
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 11.6 The offence will be tried by a Court of Session in the district and the offences are cognizable, non-bailable and non-compoundable. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.841885328292847
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Rajasthan High Court', 'Gujarat High Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The delegates and the representatives had created a panic and they met the then Hon'ble Chief Justice of India and the Hon'ble Chief Justice of Rajasthan High Court and Gujarat High Court and made representation before the Hon'ble President of India and Hon'ble Prime Minister India and Hon'ble Minister for Law and Justice. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Rajasthan High Court', 'Gujarat High Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.290536642074585
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Karnataka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As a result, as many as thirty (30) more meritorious students than ""students of Karnataka"" as per the explanation, may lose an opportunity to seek admission to the respondent/Law School despite appearing in the national level entrance test being more meritorious than them. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Karnataka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.005338907241821
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court', 'Githa Hariharan Dr. Vandana Shiva vs. Reserve Bank of India: Jayanta Bandhopadhiyaya, (1999) 2 SCC 228']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Supreme Court, in Githa Hariharan Dr. Vandana Shiva vs. Reserve Bank of India: Jayanta Bandhopadhiyaya, (1999) 2 SCC 228 had made important observations in regard to the dignity of women. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Githa Hariharan', 'Vandana Shiva']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Jayanta Bandhopadhiyaya']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.740745782852173
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There is no constitutional or legal bar on the State in categorizing women in social categories. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.73234224319458
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This order was challenged which became the subject matter of the appeal in the aforesaid cases. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.034064054489136
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh', 'Telangana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The contention of the petitioner is that the authorities have allocated her to the State of Andhra Pradesh instead of State of Telangana without considering the objections raised by her and also on the sole ground that she studied upto Class X in the State of Andhra Pradesh. 9. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh', 'Telangana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.433095216751099
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20th April, 2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The tribunal had then clarified that it did not wish to receive further submissions on the time table and that its ruling of 20th April, 2016 vide PO-7 would hold. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20th April, 2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.76158857345581
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CS No.3462/2016 PAGE NO. 45/54 M.L. GARG & ANR. v. N.D. GROVER']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Moreover because of many factors, one of CS No.3462/2016 PAGE NO. 45/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS being that English is not the first language in India and the level of proficiency even among the advocates who primarily draft the pleadings is different and at many times not up to the mark, the pleadings ought to be construed liberally. [/INST]
 {""CASE_NUMBER"": ""['CS No.3462/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.L. GARG', 'N.D. GROVER']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.774592876434326
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['03/08/1995']"", ""GPE"": ""['Chellaghatta village', 'Varthur Hobli', 'Bangalore South Taluk']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ExP4 Certified copy of sale deed dated 03/08/1995 executed by defendant No.1 and 2 in favour of defendant No.11 and 12 in respect of land measuring 15 guntas including 2 guntas Kharab land in Sy.No. 61/1, Chellaghatta village, Varthur Hobli, Bangalore South Taluk. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['03/08/1995']"", ""GPE"": ""['Chellaghatta village', 'Varthur Hobli', 'Bangalore South Taluk']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.86541223526001
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Small Cause Court at Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ghosh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ejectment Suit No.117 of 2013 (Sheila Guha Vs. Rajeev Maheshwari & Ors.)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The children of the said Dr. Ghosh sometime in 2013 filed an eviction suit against the applicants herein before the learned Small Cause Court at Calcutta, before the Learned 4th Bench, which was registered as Ejectment Suit No.117 of 2013 (Sheila Guha Vs. Rajeev Maheshwari & Ors.). [/INST]
 {""CASE_NUMBER"": ""['Ejectment Suit No.117 of 2013']"", ""COURT"": ""['Small Cause Court at Calcutta']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sheila Guha', 'Rajeev Maheshwari']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.39039158821106
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['AMC']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 266']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Amount collected by the State is going to Consolidated Fund under Article 266 which is applicable to the State and Union and not to local authorities like AMC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Consolidated Fund']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 266']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.323198080062866
"{""CASE_NUMBER"": ""['Writ Tax No. 524/2021']"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (Writ Tax No. 524/2021) decided in favour of assessees/petitioners on 30.09.2021 by holding inter alia in relevant Paragraph Nos. 63 to 80 as hereunder: ""63. [/INST]
 {""CASE_NUMBER"": ""['Writ Tax No. 524/2021']"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.414324522018433
"{""CASE_NUMBER"": ""['Criminal Appeal No. 2186 of 2008']"", ""COURT"": ""[]"", ""DATE"": ""['30.08.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Akhilesh alias Putte']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The appellant, Akhilesh alias Putte has preferred Criminal Appeal No. 2186 of 2008, assailing the aforesaid impugned judgment and order dated 30.08.2008. [/INST]
 {""CASE_NUMBER"": ""['Criminal Appeal No. 2186 of 2008']"", ""COURT"": ""[]"", ""DATE"": ""['30.08.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Akhilesh alias Putte']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.880114078521729
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was further alleged that the original plaintiff was placed in possession of the premises and subsequently in May, 1996, the original plaintiff paid `36,000/- more to the 1st respondent towards the sale consideration. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.829157114028931
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It would be relevant to quote from paragraph 1.10 of the said report under the head RATIONALE BEHIND MOVING TOWARDS GST as under: ""1.10 The introduction of GST would mark a clear departure from the scheme of distribution of fscal powers envisaged in the Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",6.8909406661987305
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.01.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 6.2.4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But on 27.01.2018, while finalizing the judgment, prima facie, the Court found that by virtue of the amendment of Rule 6.2.4, the reservation as is provided in 1994 Act has been incorporated whereas the provision for reservation of women, disabled candidates and ex-servicemen prima facie appears to be legislation by reference. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.01.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 6.2.4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1994 Act']"", ""WITNESS"": ""[]""}",9.39844560623169
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ranjan Bachawat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 10']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Ranjan Bachawat learned Senior counsel appearing on behalf of the appellant has strenuously argued that the suit for mesne profits is barred under Section 10 of the Code of Civil Procedure on the premise that the decree passed in the earlier suit for eviction is under appeal and appeal is a continuation of the suit. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ranjan Bachawat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 10']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code of Civil Procedure']"", ""WITNESS"": ""[]""}",8.329084634780884
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['RBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Obviously, RBI did not consider the availability of alternatives before issuing the impugned circular. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['RBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.54544997215271
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Smt.M.Printer and others v. Marcel Martins', 'State of Maharashtra and another v. B.E.Billimoria']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Smt.M.Printer and others v. Marcel Martins (12 supra) and State of Maharashtra and another v. B.E.Billimoria (13 supra), the Hon'ble Courts took the same view. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Smt.M.Printer and others v. Marcel Martins', 'State of Maharashtra and another v. B.E.Billimoria']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.734630346298218
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Articles 14, 16, 21 and 300A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We have also examined the submissions advanced by learned counsel premised on various constitutional provisions (Articles 14, 16, 21 and 300A of the Constitution of India), but have found, that no right can be stated to have been violated, thereunder. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Articles 14, 16, 21 and 300A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",8.219910621643066
"{""CASE_NUMBER"": ""['Crl.A.No.100190/2018', 'Crl.A.Nos.100351/2017', '100390/2017', '100397/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Khanapur', 'Pavagada', 'Chittoor']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: CW.14/PW.7- PSI, DCIB and CW.25/PW.15-PSI, Khanapur Crl.A.No.100190/2018 C/w. Crl.A.Nos.100351/2017, 100390/2017 AND 100397/2017 had ascertained that accused's calls were coming from Pavagada and Chittoor. [/INST]
 {""CASE_NUMBER"": ""['Crl.A.No.100190/2018', 'Crl.A.Nos.100351/2017', 'Crl.A.Nos.100390/2017', 'Crl.A.Nos.100397/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Pavagada', 'Chittoor']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",13.31112265586853
"{""CASE_NUMBER"": ""['Special Civil Application No.12084 of 2015']"", ""COURT"": ""['Gujarat High Court']"", ""DATE"": ""['29.07.2015', '13.08.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pankajsinh Waghela v. State Election Commission through Election Commissioner & others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The abovesaid appeal has been filed against the judgment of Gujarat High Court dated 29.07.2015 in Special Civil Application No.12084 of 2015 dismissing the writ petition following an earlier Division Bench judgment dated 13.08.2010 in Pankajsinh Waghela v. State Election Commission through Election Commissioner & others. [/INST]
 {""CASE_NUMBER"": ""['Special Civil Application No.12084 of 2015']"", ""COURT"": ""['Gujarat High Court']"", ""DATE"": ""['29.07.2015', '13.08.2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pankajsinh Waghela']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.348572492599487
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CS No.3462/2016 PAGE NO. 24/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The defendant was very particular in using all the alphabets in his name and his signatures and even the point for CS No.3462/2016 PAGE NO. 24/54 M.L. GARG & ANR. v. N.D. GROVER THROUGH LRS the alphabet (i) was not missed by the defendant in his signatures. [/INST]
 {""CASE_NUMBER"": ""['CS No.3462/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.L. GARG', 'N.D. GROVER']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.678593158721924
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mihir', 'Anil', 'Jatu', 'Prabhat', 'Premchand', 'Puranchand']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mukteshwar']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Evidence of Mukteshwar (PW­5) is that Mihir assaulted Anil and Jatu with the axe on their heads whereas Prabhat with another brother assaulted Premchand and Puranchand. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mukteshwar', 'Mihir', 'Premchand', 'Puranchand']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Anil', 'Jatu']""}",9.275479793548584
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Trivedi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Samsher Singh vs. State of Punjab and Another reported in (1974) 2 SCC 831']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Trivedi relied on a decision of the Apex Court in the case of Samsher Singh vs. State of Punjab and Another reported in (1974) 2 SCC 831. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Trivedi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Samsher Singh vs. State of Punjab and Another reported in (1974) 2 SCC 831']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.266165733337402
"{""CASE_NUMBER"": ""['CWJC No.23014 of 2018']"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['9-1-1993', 'dt.23-12-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Bihar Medical Educational (Regulation and Control Act, 1981', 'State Regulation Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The present Vice-Chancellor under its letter dated 9-1-1993 addressed to the Governors Secretariat by Patna High Court CWJC No.23014 of 2018 dt.23-12-2020 pointing out the provisions of Bihar Medical Educational (Regulation and Control Act, 1981 (herein after State Regulation Act) raised various objections regarding the validity and enforceability of the aforesaid transitory regulation, which contemplated for holding of examination of the students of the petitioner institution. [/INST]
 {""CASE_NUMBER"": ""['CWJC No.23014']"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['9-1-1993', '23-12-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Bihar Medical Educational (Regulation and Control Act, 1981']"", ""WITNESS"": ""[]""}",10.070835590362549
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['Bishan Das']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Petitioner Bishan Das and others came to manage Dharmasala, Temple and the shops etc. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Bishan Das']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.981731176376343
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 127', 'section 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: By such time, the limitation to approach the appellate authority under section 127 has set in and by reason of non-attraction of principles underlying section 5 of the 1963 Act, the remedy of appeal has become barred. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 127', 'section 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1963 Act']"", ""WITNESS"": ""[]""}",7.854384899139404
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Commercial Courts Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: These enactments are important instances as to how the legislature continues to monitor the application of the Commercial Courts Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Commercial Courts Act']"", ""WITNESS"": ""[]""}",7.934714317321777
"{""CASE_NUMBER"": ""['Crl.A No.100345/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Laxmi', 'Sangamesh', 'Sangeeta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We have gone Crl.A No.100345/2017 through the entire evidence on record on reappreciation of the same we find that 12. P.W.1 who is a distant relative of the accused, in his examination has stated that the deceased Laxmi is the wife of the accused, Sangamesh is the son and Sangeeta is the daughter. [/INST]
 {""CASE_NUMBER"": ""['Crl.A No.100345/2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Laxmi', 'Sangamesh', 'Sangeeta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.33923625946045
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On the entire sum calculated above, interest at the same rate of 15% was awarded for the post-award period till realization. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.095113277435303
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (1) of Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Succession Act, 1956']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Counsel further contends that, by reason of sub-section (1) of Section 14 of the Hindu Succession Act, 1956 (hereinafter ""the Act""), this limited interest blossomed into an absolute interest. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (1) of Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Succession Act, 1956']"", ""WITNESS"": ""[]""}",9.131641149520874
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Badaun']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Akhtar @ Bhoora']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He goes on to state that the accused Akhtar @ Bhoora is a carpenter by profession and has worked for him as such: he has made the doors and (Chaukhat), a wooden frame fixed in the wall in which doors are fixed, of the house of this witness which is being constructed in Kadri Colony, Mohalla Sotha, District Badaun. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Badaun']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Akhtar @ Bhoora']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.58502721786499
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 3(13)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As would be manifest from a reading of Section 3(13) of the Act, it is only land held or occupied for purposes connected with agriculture, pisciculture, horticulture, animal husbandry or poultry farming which could be subjected to proceedings under the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 3(13)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.297121047973633
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15-5-2018']"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is for the purpose of taking the public in Delhi into confidence and working for their benefit that an opportunity was granted to make suggestions and raise objections to the proposed amendments to the Master Plan and which were not objected to by the learned Attorney General on 15-5-2018 keeping in view the spirit behind the invitation to object and make suggestions and curtailment of the normal statutory period. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15-5-2018']"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.455070495605469
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi', 'Timbuctoo', 'Soviet Russia']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Legislature']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Shortly stated, the question is, could the Indian Legislature under the Act of 1935 enact that the executive could extend to Delhi laws that may be made hereinafter by a legislature in Timbuctoo or Soviet Russia with modifications. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Timbuctoo', 'Soviet Russia']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Act of 1935']"", ""WITNESS"": ""[]""}",9.166007995605469
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['s 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 7) Ld. counsel for the complainant contended that the accused has admitted that the dishonoured cheques in question bears her signature and legal presumption of consideration u/s 139 of NI Act would act against the accused. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['s 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}",7.254600763320923
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Vasudeva mills']"", ""OTHER_PERSON"": ""['Janakiammal', 'Somasundaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Janakiammal and her son Somasundaram did not get any immovable property in the compromise decree except shares of the Vasudeva mills, a sick company. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Vasudeva mills']"", ""OTHER_PERSON"": ""['Janakiammal', 'Somasundaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.09977126121521
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Haryana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Minimum Wages Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Moreover, minimum wage of a skilled labourer in the State of Haryana as notified under the Minimum Wages Act was about `10,000/- per month at the relevant time. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Haryana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Minimum Wages Act']"", ""WITNESS"": ""[]""}",7.16549277305603
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Election Commission, India v. Saka Venkata Rao']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Going by the aforesaid provision which stood before amendment the Supreme Court has explained in the case of Election Commission, India v. Saka Venkata Rao. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Election Commission, India v. Saka Venkata Rao']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.191270351409912
"{""CASE_NUMBER"": ""['FAO No. 5158 of 2015']"", ""COURT"": ""[]"", ""DATE"": ""['2.12.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Rakesh Gulati (since deceased) through LRs v. Sanjiv Kumar and others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Still further counsel has relied upon the judgment passed by a Division Bench of this Court in FAO No. 5158 of 2015 titled as 'Rakesh Gulati (since deceased) through LRs v. Sanjiv Kumar and others' decided on 2.12.2019. [/INST]
 {""CASE_NUMBER"": ""['FAO No. 5158 of 2015']"", ""COURT"": ""[]"", ""DATE"": ""['2.12.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rakesh Gulati']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Sanjiv Kumar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.49540662765503
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He stated that the notice regarding constitution of the team was given to him in writing. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.299703121185303
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Tapasya Pisal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 62] However, since, in Tapasya Pisal (supra), the Supreme Court in the concluding portion of its decision had used the expression ""in the interests of justice"" , it was suggested at Bar, that this was probably a case of the Supreme Court exercising its powers under Article 142 of the Constitution of India, which powers undoubtedly, this Court does not possess. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Tapasya Pisal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 142']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",9.103347539901733
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.11.2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ullal Police']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The doctor has further stated that on 24.11.2012, the Ullal Police have sent six packed and sealed covers alongiwth weapons for examination and out of six weapons, two are sickles, two are talwars and two are rods. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.11.2012']"", ""GPE"": ""['Ullal']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.843717336654663
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['25/05/2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Ramesh', 'Gopalakrishna']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But in the cross- examination of PW-1, the complainant stated that on 25/05/2016 at about 8 AM through telephonic talk the accused asked the loan amount and he had paid the said amount in the presence of PW-2 and PW-3 i.e., Ramesh and Gopalakrishna. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['25/05/2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ramesh', 'Gopalakrishna']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.475484132766724
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 127', 'section 126']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The controversy that emerged for decision therein was, could an appeal under section 127 of the 2003 Act, carried from an order of assessment made under section 126 thereof, be entertained by the appellate authority if the same were presented beyond the period of limitation prescribed in section 127 itself upon condonation of delay in its presentation? [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 127', 'section 126', 'section 127']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['2003 Act']"", ""WITNESS"": ""[]""}",8.112980604171753
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.11.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['11th Schedule']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Companies Act, 2013']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Consequently the 11th Schedule containing amendments to the Companies Act, 2013 also came into force on 15.11.2016. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.11.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Companies Act, 2013']"", ""WITNESS"": ""[]""}",9.196426630020142
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sec- tion 2(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In view of the expression used in Sec- tion 2(2), the maxim expressum facit cessare tacitum, would not permit by interpretation to hold that Part I would also apply to arbitrations held outside the terri- tory of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sec- tion 2(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.395341873168945
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sandhya']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Secondly, Smt.Sandhya (PW-3), the employer of the deceased in her cross examination has admitted that the family of the deceased was receiving family pension of Rs.15,000/- per month. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sandhya']""}",8.2266845703125
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Godse']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We follow Godse's case (supra) to hold that imprisonment for life lasts until the last breath, and whatever the length of remissions earned, the prisoner can claim release only if the remaining sentence is remitted by Government. 7. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Godse']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.962898015975952
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence, we have before us a community which is conclusively established to be backward and has reached its Nadir on account of their economic distress and the State in its enabling power is duty bound to lead a helping hand to this community in exercise of the duty patil-sachin. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['patil-sachin']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.472841024398804
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the meantime, since the Court had ordered a deposit of a sum of Rs.20 crores in Court and it was thereafter deposited by the defendant no.1, in the Fort Branch, a notice of motion had been taken up seeking withdrawal of the said amount. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.950539588928223
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He deposed that he had seen the accident from 100 foot. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.985905885696411
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['V. Narasaiah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 51A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['LA Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Having noticed the scope of Section 51A of the LA Act as understood by this Court in V. Narasaiah's case to be the correct interpretation, we will now consider whether such evidence is mandatorly binding on the authority or the court concerned or it is only an enabling provision. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['V. Narasaiah']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 51A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['LA Act']"", ""WITNESS"": ""[]""}",7.59187126159668
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even temporary, ad hoc or daily-wage service for a long number of years, let alone service for one or two years, will not entitle such employee to claim regularisation, if he is not working against a sanctioned post. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.813430309295654
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Undoubtedly if there is a defect or an omission in the words used by the legislature, the court http://www.judis.nic.in would not go to its aid to correct or make up the deficiency. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.722782373428345
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['14.2.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Civil Appeal No.1665/2019 (Sunita and Ors. Vs. Rajasthan State Road Transport Corporation & Anr.)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Supreme Court by judgment dated 14.2.2019 passed in Civil Appeal No.1665/2019 (Sunita and Ors. Vs. Rajasthan State Road Transport Corporation & Anr.) has held as under :- ""20........ [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No.1665/2019']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['14.2.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sunita']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""['Rajasthan State Road Transport Corporation']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.552515029907227
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['RTO, Barasat']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He sent letter to RTO, Barasat for submission of report with regard to registration no. WB-26C-3869. [/INST]
 {""CASE_NUMBER"": ""['WB-26C-3869']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.736403226852417
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: My findings to the above points is as follows; 1. Point No.1: In the affirmative 2. Point No.2: As per final order for the following; REASONS 08. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.334735870361328
"{""CASE_NUMBER"": ""['APP (DB) No.306 of 2015']"", ""COURT"": ""[]"", ""DATE"": ""['dt.18-04-2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: APP (DB) No.306 of 2015 dt.18-04-2019 accompanied the victim up to Barabar Hills there is no other evidence on record to show that he participated in subsequent action or not. [/INST]
 {""CASE_NUMBER"": ""['APP (DB) No.306 of 2015']"", ""COURT"": ""[]"", ""DATE"": ""['18-04-2019']"", ""GPE"": ""['Barabar Hills']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.959517478942871
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kohli']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['21.1.Gulf DTH FZ LLC vs Dish TV Limited & Ors']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To demonstrate this view of the Delhi High Court, the following decisions were cited by Mr. Kohli: 21.1.Gulf DTH FZ LLC vs Dish TV Limited & Ors. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kohli']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Gulf DTH FZ LLC vs Dish TV Limited']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.114435911178589
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 30.09.2008, a return of income was filed for the assessment year 2008-2009 declaring a total income of INR 92,54,89,822. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['30.09.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.811212062835693
"{""CASE_NUMBER"": ""['Suit No.37 of 1984', 'Suit No. 1101 of 1987']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Senthil Kumaravel']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The plaintiff of Suit No.37 of 1984 Senthil Kumaravel in his written statement in Suit No. 1101 of 1987 has clearly stated that he filed the Suit No.37 of 1984 at the instance of defendant No.1, which fact has also been noted in paragraph 9 of the trial court’s judgment. 87. [/INST]
 {""CASE_NUMBER"": ""['Suit No.37 of 1984', 'Suit No. 1101 of 1987']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Senthil Kumaravel']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.20043659210205
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['U.P. Subordinate Service Selection Commission', 'State of Uttar Pradesh']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['U.P. Subordinate Service Selection Commission Act, 2014', 'Act No. 20 of 2014']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 1. U.P. Subordinate Service Selection Commission (hereinafter referred to as, 'the Commission') has been established by the State of Uttar Pradesh for recruitment etc. to subordinate services in different departments of the State, pursuant to The U.P. Subordinate Service Selection Commission Act, 2014 (hereinafter referred to as, 'the Act of 2014'), vide Act No. 20 of 2014. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Uttar Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['U.P. Subordinate Service Selection Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['U.P. Subordinate Service Selection Commission Act, 2014', 'The U.P. Subordinate Service Selection Commission Act, 2014']"", ""WITNESS"": ""[]""}",11.211328983306885
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.03.1970']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The suit was decreed but the Appellate Court reversing the decree held that the findings of the Land Tribunal leading to the certificate dated 24.03.1970 could not be examined by the Civil Court and that no case has been made out by the respondents that the Land Tribunal had failed to follow the procedure under the Act and the Rules in awarding the certificate. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.03.1970']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.864824771881104
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['2 nd July, 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ministry of Law and Justice', 'Ministry of Women and Child Development']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code, 1860', 'Code of Criminal Procedure, 1973', 'Indian Evidence Act, 1872']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After consultation with other stake holders like Ministry of Law and Justice and Ministry of Women and Child Development, a Cabinet Note on ""Review of legal provisions pertaining to sexual assault - Proposal to amend the Indian Penal Code, 1860, the Code of Criminal Procedure, 1973 and the Indian Evidence Act, 1872"" was finalized and sent to the Cabinet for consideration on 2 nd July, 2012. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['2nd July, 2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ministry of Law and Justice', 'Ministry of Women and Child Development']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code, 1860', 'Code of Criminal Procedure, 1973', 'Indian Evidence Act, 1872']"", ""WITNESS"": ""[]""}",10.755753755569458
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Karnataka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (7) of Section 63']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Most of the permits obtained under sub-section (7) of Section 63 of the Act in the States other than the State of Karnataka are made use of for the purported use of running the tourist buses by actually the permits were misused to run the tourist vehicle either as stage carriages or as contract carriages. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Karnataka']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (7) of Section 63']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.840646982192993
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Kalukuri Vijaya Kumar']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: During the course of investigation, P.W.18 visited the scene of offence, prepared the rough sketch and seized the material objects - bloodstained stone, bangle pieces, electrical plastic wire etc., under the cover of observation report duly attested by P.W.11 and L.W.15 Kalukuri Vijaya Kumar, and got the scene of offence photographed by P.W.12. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kalukuri Vijaya Kumar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.109846353530884
"{""CASE_NUMBER"": ""['Crl.A. No.100106/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ram Narain Singh v. State of Punjab [(1975) 4 SCC 497 : 1975 SCC (Cri) 571 : AIR 1975 SC 1727]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This Court in Ram Narain Singh v. State of Punjab [(1975) 4 SCC 497 : 1975 SCC (Cri) 571 : AIR 1975 SC 1727] has laid down that if the evidence of the witnesses for the prosecution is totally inconsistent with the medical evidence, this is a most fundamental defect in the prosecution case and Crl.A. No.100106/2016 unless reasonably explained, it is sufficient to discredit the entire case. [/INST]
 {""CASE_NUMBER"": ""['Crl.A. No.100106/2016']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Narain Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Crl.A. No.100106/2016']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.300587892532349
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(4)', 'Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: No doubt that a secured creditor may initially resort to the procedure under Section 13(4) and on facing resistance, he may still approach the Magistrate under Section 14. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13(4)', 'Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.822087287902832
"{""CASE_NUMBER"": ""['33 C.C.13916 of 2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is 33 C.C.13916 of 2017 alleged in the complaint that, the owner of of the above said land by name Smt. Jayalakshmi had executed another agreement of sale in favour of the accused. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.775231838226318
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['NCLT']"", ""DATE"": ""['17.12.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Impex Ferro Tech Limited Vs. Auroma Coke Ltd. (APO No.273 of 2018)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To support the submission as to transfer of the winding up petitions with all connected applications from this Court to NCLT, the said creditors relied upon a Division Bench judgment of this Court passed in the case of Impex Ferro Tech Limited Vs. Auroma Coke Ltd. (APO No.273 of 2018) dated 17.12.2018. [/INST]
 {""CASE_NUMBER"": ""['APO No.273 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""['17.12.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Impex Ferro Tech Limited Vs. Auroma Coke Ltd.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.979722023010254
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Advocates Act, 1961']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But however, the Advocates Act, 1961 only speaks about the rights of the Advocates to practice in any Court or authorities and it does not speaks about the rights of the parties to engage a counsel before the Supreme Court or any other forum ."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Advocates Act, 1961']"", ""WITNESS"": ""[]""}",8.789969444274902
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Orissa Vs. Arun Kumar, reported in AIR 1976 SC 1640']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A challenge to an appointment of the respondent made five years after his confirmation was held to be long and inexplicable delay and the grievance to be too stale to merit redress in State of Orissa Vs. Arun Kumar, reported in AIR 1976 SC 1640. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Arun Kumar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Orissa Vs. Arun Kumar, reported in AIR 1976 SC 1640']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.426149606704712
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Jodhpur Mining Organization', 'BIFR']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For the purpose of this ""hiving off Jodhpur Mining Organization"", Delhi High Court observed that this aspect ought to have been considered at the first instance, hence, it remanded the matter to BIFR for considering proposal of hiving off of Jodhpur Mining Organization into a separate entity. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""['Jodhpur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BIFR']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.359976530075073
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Once the execution of cheque is admitted Section 139 of theAct mandates a presumption that the cheque was for the discharge of any debt or other liability. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 139']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.228074312210083
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Ananthapur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Govinda Chowdary']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The plaintiff also learnt that one Govinda Chowdary filed a suit alleging that he was having share in the family properties of the defendants and the said suit was pending on the file of the Subordinate Judge, Ananthapur, wherein he obtained a temporary injunction in respect of the plaint schedule property. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Subordinate Judge, Ananthapur']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Govinda Chowdary']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.513577699661255
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Tarn Taran']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Punjab and Sind Bank']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Vinod Kumar', 'Priya Kapoor']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ANALYSIS: 6. From perusal of the same, it is evident that as per the case set up by the appellant/complainant that the appellant claims that the amount in question was advanced in cash in the presence of two witnesses Vinod Kumar and Priya Kapoor, after withdrawing the amount from the bank i.e. Punjab and Sind Bank, Tarn Taran. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Tarn Taran']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Punjab and Sind Bank']"", ""OTHER_PERSON"": ""['Vinod Kumar', 'Priya Kapoor']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.721016645431519
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['X and ors. vs. Union of India and ors. - (2017) 3 SCC 458']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 51] In X and ors. vs. Union of India and ors. - (2017) 3 SCC 458, the Supreme Court was concerned with a pregnancy which had advanced into the 24 th week. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['X and ors. vs. Union of India and ors. - (2017) 3 SCC 458']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.422081232070923
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.02.2007']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Durga Prasad', 'Dwarka Prasad', 'Kamla Devi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The mortgage deed dated 22.02.2007, Ex.PW1/2 reads to the effect: ""And whereas all above three sons and daughters of late Durga Prasad (Dwarka Prasad) executed a relinquishment deed in respect of said property in favor of their mother i.e. second party Smt. Kamla Devi. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['22.02.2007']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Durga Prasad', 'Kamla Devi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.381045579910278
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 427(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C.']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If a person has also been undergoing a sentence of imprisonment, on subsequent conviction to imprisonment or imprisonment for life, as per Section 427(2) of Cr.P.C., the subsequent sentence shall run concurrently with such previous sentence. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 427(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C.']"", ""WITNESS"": ""[]""}",8.202633619308472
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In a nutshell the objections were that the alleged benami transactions took place at the time of operation of the 1988 Act prior to the 2016 amendment. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.325688123703003
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Army']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The post of Army Commander/Vice Chief of Army Staff, in the rank of Lieutenant General, is the second highest in the hierarchy of the Indian Army, below the Chief of Army Staff. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Indian Army']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.176202058792114
"{""CASE_NUMBER"": ""['W.P.No.9267 of 2017']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Shivajirao Nilangekar Patil v. Dr. Mahesh Madhav Gosavi (1987) 1 SCC 227']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reference also deserves to be made to the judgment of the three-Judge Bench in Shivajirao Nilangekar Patil v. Dr. Mahesh Madhav Gosavi (1987) 1 SCC 227 in which a new http://www.judis.nic.in W.P.No.9267 of 2017 dimension was given to the power of the Superior Courts to make investigation into the issues of public importance even though the petitioner may have moved the Court for vindication of a private interest. [/INST]
 {""CASE_NUMBER"": ""['W.P.No.9267']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shivajirao Nilangekar Patil', 'Mahesh Madhav Gosavi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.486374616622925
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has submitted that in the instant case, G.S.T. evasion of more than Rs. 100 crores is involved. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.101444721221924
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['G. Ramaswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mithu v. State of Punjab [(1983) 2 SCC 277: 1983 SCC (Cri) 405]']"", ""PROVISION"": ""['Section 303']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reference was then made by Shri G. Ramaswamy to the decision in Mithu v. State of Punjab [(1983) 2 SCC 277: 1983 SCC (Cri) 405] wherein Section 303 of the Indian Penal Code was struck down. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['G. Ramaswamy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mithu v. State of Punjab [(1983) 2 SCC 277: 1983 SCC (Cri) 405]']"", ""PROVISION"": ""['Section 303']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Penal Code']"", ""WITNESS"": ""[]""}",12.289194345474243
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This has resulted in slow pace of recovery of defaulting loans and mounting levels of non-performing assets of banks and financial institutions. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.875616788864136
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['legal Metrology Act, 2009']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The introduction, statement of objects and reasons to the legal Metrology Act, 2009 reads thus: INTRODUCTION: In 1956 uniform standards of weights and measures based on metric systems were established, which were revised in 1976 with a view to give effect to the international system of units. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Legal Metrology Act, 2009']"", ""WITNESS"": ""[]""}",8.369231462478638
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Court observed that where the Constitution thought it ft to do so, it has itself provided for elections by secret ballot e.g. in the case of election of the President of India and the Vice- President of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.8246119022369385
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Board of Secondary Education (CBSE)']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court appointed the Central Board of Secondary Education (CBSE) to examine the correctness of key answers. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Board of Secondary Education (CBSE)']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.179917573928833
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1957 SC 434:: 1957 SCR 452 between Smt.Kamala Devi and another V/s Bachulal Gupta and others']"", ""PROVISION"": ""['S.123']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['T.P. Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: AIR 1957 SC 434:: 1957 SCR 452 between Smt.Kamala Devi and another V/s Bachulal Gupta and others, wherein the Hon'ble Apex Court has held that, it is true that a gift becomes legally effective only when a registered instrument is executed in the manner laid down in S.123 T.P. Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kamala Devi', 'Bachulal Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1957 SC 434:: 1957 SCR 452']"", ""PROVISION"": ""['S.123']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['T.P. Act']"", ""WITNESS"": ""[]""}",11.857985019683838
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.Rajaseekaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is important to note here that in S.Rajaseekaran, the Supreme Court recorded the recommendations of working Group. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.Rajaseekaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.639014482498169
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The term ""district"" has been referred to as a revenue area under Section 5 of the Code, 2006, and in terms thereof two or more districts may form a division, and a district may consist of two or more tahsils, each tahsil may consist of one or more parganas, each pargana may consist of two or more villages. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Code, 2006']"", ""WITNESS"": ""[]""}",8.921900272369385
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(1)(zb)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Section 2(1)(zb) defines security agreement to mean an agreement, instrument or any other document or arrangement under which security interest is created in favour of the secured creditor, including the creation of mortgage by deposit of title deeds with the secured creditor. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(1)(zb)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.896076917648315
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Tribunal also noticed that the seating capacity of the offending vehicle was 19 persons including the driver and that there was no evidence placed on record by the insurer that there were more than 19 people traveling in the offending vehicle at the time of the accident. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.944680452346802
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We see no reason, therefore, to interdict the tender notification at the behest of the appellants who, admittedly, do not fulfill the main eligibility criteria of having manufactured and supplied 1000 sq. mm 220 KV copper conductor cables of a length of 245 KMs, and of laying underground cables of such quality, size and length. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.953373670578003
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 22']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['West Bengal Societies Registration Act, 1961']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: I can very firmly say that the power under Section 22 of the said Act was fully preserved while enacting the West Bengal Societies Registration Act, 1961. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 22']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['West Bengal Societies Registration Act, 1961', 'West Bengal Societies Registration Act, 1961']"", ""WITNESS"": ""[]""}",10.148019313812256
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: So the employees of government-aided and public schools are, therefore, governed by the said scheme and not by the said 1948 Act, and it is not the case of the State Government that both the said scheme and the said 1948 Act are to be extended to the employees of government-aided and public schools. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.470453977584839
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mustafi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In an off shoot on an application for probate originally filed by one Mustafi in the Court of the District Judge. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mustafi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.679703950881958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17-10-2000']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She was medically examined on 17-10-2000 at 12:40 A.M. in the night and following injuries were found on her body : 1. Firearm gun shot injury wound of entrance on the right side of abdomen near (Not ""legible"" but as per evidence ""Navel"") inverted margins oval shape. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17-10-2000']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.305494785308838
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13-1-2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After fresh investigation, CBI filed a charge-sheet bearing No. 1/2010 in the present case on 13-1-2010. [/INST]
 {""CASE_NUMBER"": ""['charge-sheet bearing No. 1/2010']"", ""COURT"": ""[]"", ""DATE"": ""['13-1-2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.164323091506958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Indtel Technical Services (P) Ltd. v. W.S. Atkins Rail Ltd., (2008) 10 SCC 308']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: [Indtel Technical Services (P) Ltd. v. W.S. Atkins Rail Ltd., (2008) 10 SCC 308 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Indtel Technical Services (P) Ltd. v. W.S. Atkins Rail Ltd., (2008) 10 SCC 308']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.496043682098389
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Tirlok Nath v. Union of India [1967 SLR 759 (SC)]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The appellant relied on Tirlok Nath v. Union of India [1967 SLR 759 (SC)] in support of the proposition that if a public servant facing an inquiry is not supplied copies of documents, it would amount to denial of reasonable opportunity. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Tirlok Nath v. Union of India [1967 SLR 759 (SC)]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.231076002120972
"{""CASE_NUMBER"": ""['E.A.No.780 of 2020', '6 th O.P.(C)No.446 of 2021', 'C.R.P.No.81 of 2021']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Ernakulam']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: By the impugned order, the execution court allowed E.A.No.780 of 2020 and the 6 th O.P.(C)No.446 of 2021 & :-81-: C.R.P.No.81 of 2021 respondent District Educational Officer, Ernakulam, was directed to approve change of management of the school, based on the application made by the decree holders. [/INST]
 {""CASE_NUMBER"": ""['E.A.No.780 of 2020', 'O.P.(C)No.446 of 2021', 'C.R.P.No.81 of 2021']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Ernakulam']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.853302478790283
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mahwa', 'Dausa', 'Samleti village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When the bus had covered about 3- 4 kilometers from Mahwa towards Dausa, there was a loud blast in the bus near Samleti village. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Mahwa', 'Dausa']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.92194128036499
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 17']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act, 1908']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per Section 17 of the Registration Act, 1908, title of an immovable property gets transferred only on execution of a registered instrument evidencing sale and / or transfer. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 17']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act, 1908']"", ""WITNESS"": ""[]""}",7.856534957885742
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The accused may adduce direct evidence to prove that the note in question was not supported by consideration and that there was no debt or liability to be discharged by him. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.992572546005249
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Central Excise vs. Wockhardt Life Sciences Limited [(2012) 5 SCC 585]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Emphasis on technical meaning has been highlighted in the case of Commissioner of Central Excise vs. Wockhardt Life Sciences Limited [(2012) 5 SCC 585] for resolving classification related disputes of goods. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Commissioner of Central Excise vs. Wockhardt Life Sciences Limited [(2012) 5 SCC 585]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.20438003540039
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections - 54 and 59 (1)', 'Section - 273']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['FSS Act', 'IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondents - police are incompetent to investigate the offence punishable under Sections - 54 and 59 (1) of the FSS Act and allegations in the charge sheet coupled with the statements do not disclose the commission of the offence punishable under Section - 273 of IPC since transportation of noxious food is not included under Section - 273 of IPC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections - 54 and 59 (1)', 'Section - 273']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['FSS Act', 'IPC']"", ""WITNESS"": ""[]""}",9.882744312286377
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Navi Mumbai']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Municipal Corporation of city of Navi Mumbai']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MRTP Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For a part of Navi Mumbai, the Municipal Corporation of city of Navi Mumbai (for short `the said Corporation') is the Planning Authority within the meaning of MRTP Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Navi Mumbai']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Municipal Corporation of city of Navi Mumbai']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MRTP Act']"", ""WITNESS"": ""[]""}",8.484810829162598
"{""CASE_NUMBER"": ""['Crl.Appeal No.567 of 2014']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Varma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Jose M.Philip', 'Prameela S.', 'N.A.Balaram']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For Crl.Appeal No.567 of 2014 and considering merit of the prosecution case that the accused 2, 3 and 5 made deceased Varma to drink juice mixed with alcohol and thereafter they administered chloroform to stupefy him, the testimony of PW40 Jose M.Philip and his report (Ext.P84), oral evidence tendered by PW66 Prameela S. and her reports (Exts.P160 to P162) and also the testimony of PW69 Dr.N.A.Balaram will be relevant. [/INST]
 {""CASE_NUMBER"": ""['Crl.Appeal No.567 of 2014']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Varma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Jose M.Philip', 'Prameela S.', 'N.A.Balaram']""}",11.3141450881958
"{""CASE_NUMBER"": ""['civil suit Nos.436-CS of 2005 and 76 of 2005', 'RSA No.1102 of 2013']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Since the appeals have arisen out of decision of two civil suit Nos.436-CS of 2005 and 76 of 2005, the facts are being taken from lead case, i.e. RSA No.1102 of 2013. [/INST]
 {""CASE_NUMBER"": ""['RSA No.1102 of 2013']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.280784606933594
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Ext.A23 series are statements of monthly rent collected by the proprietor of Nandilath Towers for the years 2003-13 from the tenants of Nandilath buildings. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Nandilath Towers']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.291567325592041
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For instance, it is a matter of common knowledge that if a body of persons go armed to take forcible possession of the land, it would be right to say that someone is likely to be killed and all the members of the unlawful - 94 - assembly must be aware of that likelihood and would be guilty under the second part of Section 149 IPC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",8.187452554702759
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 48', 'Article 1.2.1 (b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 233. Article 48 has to be read conjointly with Article 1.2.1 (b) which provides that references to laws of India or Indian law or regulation having the force of law shall include the laws, acts, ordinances, rules, regulations, bye laws or notifications which have the force of law in the territory of India and as from time to time may be amended, modified, supplemented, extended or re-enacted. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 48', 'Article 1.2.1 (b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.853336811065674
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['D.V. Seetharam Murthy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It was contended by Mr. D.V. Seetharam Murthy, learned Senior Counsel for one of the petitioners that the role of the Portfolio/Inspecting Judge in assessing the performance of an officer is very vital and that therefore, if he is not present when a review is undertaken by the Administrative Committee at the time of the officer attaining the age of 58 years, the same may vitiate the whole process. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['D.V. Seetharam Murthy']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.735812902450562
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Bankey Lal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Accordingly, I hold that the Revisional Court has rightly set aside the order of R.C. & E.O. passed on review petition of the landlord filed before R.C. & E.O. and rightly allowed the review petition of the landlord filed before R.C. & E.O. and quashed the allotment in favour of the Bankey Lal."" 20. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Bankey Lal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.326469421386719
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['21.04.2005']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Ex.D.1 & D2 were made on 21.04.2005. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['21.04.2005']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.952009439468384
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.03.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This led to passing of an Award dated 18.03.2016 in favour of Blueberry / Decree Holder and against Iceberg-Judgment Debtor. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.03.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Blueberry', 'Iceberg']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.9644775390625
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order VII Rule 11', 'Section 4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC', 'Benami Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The wife filed petition under Order VII Rule 11 CPC to reject the plaint on the plea suit is not maintainable in terms of Section 4 of Benami Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Order VII Rule 11', 'Section 4']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Act']"", ""WITNESS"": ""[]""}",9.26921010017395
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16.08.2001']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Paltry amount of Rs. 2 lacs was offered towards 80% of the compensation to the land owner/ petitioner while invoking Circular dated 16.08.2001, which had been issued in respect of agricultural lands. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16.08.2001']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.389388799667358
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On a careful consideration, there- fore, of the authorities referred to above, the following propositions emerge: 1. That in order to decide the question of repugnancy it must be shown that the two enactments con- tain inconsistent and irreconcil- able provisions, so that they can- not stand together or operate in the same field. 2. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.08562445640564
"{""CASE_NUMBER"": ""['Special Leave to Appeal (C) No. 12328/2017']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['28 th April, 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also a fact that an SLP instituted against the opinion (supra), has also been declined by the Supreme Court on 28 th April, 2017 in Special Leave to Appeal (C) No. 12328/2017. [/INST]
 {""CASE_NUMBER"": ""['Special Leave to Appeal (C) No. 12328/2017']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['28 th April, 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.432324647903442
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (3) of section 147', 'sub-section (2)', 'sub-section (3)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For the purposes of this sub-section, certificate of insurance means the certificate issued under sub-section (3) of section 147. (4) If the licence referred to in sub-section (2) or the certificates or permit referred to in sub-section (3), as the case may be, are not at the time in the possession of the person to whom demand is made [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (3) of section 147', 'sub-section (3)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.20430850982666
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 300']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This is also borne out from illustration (c) to Section 300 IPC which is being reproduced below: - ""(c) A intentionally gives Z a sword-cut or club- wound sufficient to cause the death of a man in the ordinary course of nature. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Z']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 300']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",8.548847436904907
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CIT vs. Ahmedbhai Umarbhai& Co.: 18 ITR 472']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The principle of attribution has been upheld by the Hon'ble Supreme Court of India in the case of CIT vs. Ahmedbhai Umarbhai& Co.: 18 ITR 472. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court of India']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CIT vs. Ahmedbhai Umarbhai& Co.: 18 ITR 472']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.066603899002075
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagdish']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He has further deposed that thereafter, SI Jagdish prepared site plan at his instance and thereafter, he left the spot. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagdish']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.645496129989624
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There can never be any straitjacket formula or fixed parameters for determining mental cruelty in matrimonial matters. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.928130149841309
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: With this background, let us analyse the impugned judgment of the High Court and find out whether it satisfies any of the tests formulated above. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.367480278015137
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Florida']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But the decision of the Circuit Court was appealed to the Third District Court of Appeal, State of Florida. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Third District Court of Appeal']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.320387125015259
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Writ Petition No.196 of 2001, People\u2019s Union for Civil Liberties vs. Union of India and 4 others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This Court in a Public Interest Litigation in Writ Petition No.196 of 2001, People’s Union for Civil Liberties vs. Union of India and 4 others, had issued various directions for protection of right to food of the poor and the underprivileged sections including children and women. [/INST]
 {""CASE_NUMBER"": ""['Writ Petition No.196 of 2001']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['People’s Union for Civil Liberties']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.955366611480713
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['6 April 2011']"", ""GPE"": ""['Mukhed']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A second enquiry was initiated against the appellant through a memorandum dated 6 April 2011 on the charge that the petitioner without depositing the pistol and ammunition proceeded to Mukhed. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['6 April 2011']"", ""GPE"": ""['Mukhed']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.7792463302612305
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['AFRC']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 4(vi)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Rule 4(vi) stipulates that the fees or scale of fees determined by the AFRC shall be valid for a period of three years. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['AFRC']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 4(vi)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.778995990753174
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It will be open for the respondents to give their say on the merits of each of the 339 complainants. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.0509033203125
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ismail Faruqui\u2019s']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Mohd. Aslam alias Bhure Vs. Union of India and Others, (2003) 2 SCC 576']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Similarly, judgment of this Court in Mohd. Aslam alias Bhure Vs. Union of India and Others, (2003) 2 SCC 576 was a case where an interim order was passed by this Court with regard to acquisition of 67.703 acres of land as was noticed in Ismail Faruqui’s case. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mohd. Aslam alias Bhure', 'Ismail Faruqui']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.631479978561401
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Bill was introduced by the State Government on 29 th patil-sachin. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['29 th patil-sachin']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.715258359909058
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Various properties were mortgaged/hypothecated as security therefor. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.889631986618042
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (3) The percentage of landless and marginal farmers (lands ownership less than 2.5 acres) is found to be around 71% amongst the Maratha families whereas the percentage of big farmers holding about 10 acres of land is only 2.7%. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.827166795730591
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23.02.1987']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Town and Country Planning, Madras', 'Thoothukudi Panchayat']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Director of Town and Country Planning, Madras, addressed the Commissioner, Thoothukudi Panchayat vide letter dated 23.02.1987, by which the consent was granted for construction and commissioning of the petitioner in the land in SIPCOT industrial complex. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['23.02.1987']"", ""GPE"": ""['Madras', 'Thoothukudi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['SIPCOT']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.5938138961792
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.04.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He did not meet him before 24.04.2011. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.04.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.100802659988403
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Waqf Board']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Waqf Act, 1995']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , it was stated that pursuant to an amendment in the Waqf Act, 1995 ('the Central Act' for short) in the year 2013, the Waqf Board took a decision to acquire the Waqf property and place it under its direct control for the purpose of development. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Waqf Act, 1995']"", ""WITNESS"": ""[]""}",8.131285667419434
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Madan Mohan Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: During the course of search at the residence of one Madan Mohan Gupta, the incriminating documents including a pocket diary were seized. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Madan Mohan Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.989449739456177
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ahlmad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Ahlmad of the court is directed to take immediate steps in that regard. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ahlmad']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.463568687438965
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A concern would risk undertaking such exploration and incur heavy costs only if it was assured utilisation of the resource discovered: a prudent business venture would not like to incur the high costs involved in exploration activities and then compete for that resource in an open auction. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.33094334602356
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anil Kumar Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Cheque was filled up by Anil Kumar Gupta himself. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anil Kumar Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.752254486083984
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kasturmal Agrawal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Shamlal Agrawal']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, neither Shamlal Agrawal (PW-1) deposed regarding signing of Will by Kasturmal Agrawal in presence of two witnesses and signing of Will by witnesses in presence of Kasturmal Agrawal, nor the plaintiff has examined any witness to prove the same compliance. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kasturmal Agrawal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.951858997344971
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['C.S. Aggarwal', 'Anil Sharma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner examined two witnesses, namely, C.S. Aggarwal (the petitioner) as PW-1 and Anil Sharma as PW-2. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""['C.S. Aggarwal']"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Anil Sharma']""}",8.07668161392212
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (iv) Where the contract provides that the standard form of terms and conditions of an independent trade or professional institution (as for example the standard terms and conditions of a trade association or architects association) will bind them or apply to the contract, such standard form of terms and conditions including any provision for arbitration in such standard terms and conditions, shall be deemed to be incorporated by reference. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.566380977630615
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Amendment Act of 2016', 'Principal Act of 1988']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence, applying the test aforesaid, to the question of retrospective application of the amended provisions, involved in the instant batch of writ applications, would make it evident that the object in introduction of the amendments, through Benami Amendment Act of 2016, is to effectively cure the mischief which could not be checked effectively, as intended by the Principal Act of 1988. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Benami Amendment Act of 2016', 'Principal Act of 1988']"", ""WITNESS"": ""[]""}",8.532063484191895
"{""CASE_NUMBER"": ""['WP No.17384 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['20.06.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that the Hon’ble High Court directed in its order dated 20.06.2019 in WP No.17384 of 2019 that the respondents are to submit a report in the form of an affidavit, duly supported by documents as to what action has been taken against the alleged violations. [/INST]
 {""CASE_NUMBER"": ""['WP No.17384 of 2019']"", ""COURT"": ""[]"", ""DATE"": ""['20.06.2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.650843143463135
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The said judgment was reported in M. Venkateswara Rao v. Secretary, RTA, Warangal, 2000(1)ALT170 . [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M. Venkateswara Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.308610916137695
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As a result, there is no justification for invoking para 5 of the O.M. of 1986. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['para 5']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.317725896835327
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: So, the cheque was issued for Rs.50,000/- as a B.C. amount. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.690677881240845
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Krishna District', 'Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner has studied from 1983 to 1989 in Krishna District, which comes under the State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Krishna District', 'Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.974280595779419
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The employees, however, were demanding the introduction of a pension scheme. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.742408275604248
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13.03.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.P.S. Gowri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Subsequently, Smt. S.P.S. Gowri sold the land to the petitioner vide sale deed dated 13.03.2008 and the document was presented for registration under the provisions of the Registration Act on 13.03.2008. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13.03.2008']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S.P.S. Gowri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Registration Act']"", ""WITNESS"": ""[]""}",9.499037981033325
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['28.9.2003', '10.10.2003']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The first and second consignments were dispatched on 28.9.2003 and 10.10.2003 respectively which were lost and could not be traced as per the report submitted by the defendant no. 2 transporter. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['28.9.2003', '10.10.2003']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.470757961273193
"{""CASE_NUMBER"": ""['MACA No. 480 of 2012']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['14.11.1994']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajesh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (6) of Section 158']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Motor Vehicles Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Rajesh (supra), the Apex Court noticed that, after the amendment of the Motor Vehicles Act by Act 54 of 1994, with effect from 14.11.1994, the report on motor vehicle accident prepared by the police officer and forwarded to the Claims Tribunal under sub-section (6) of Section 158 has to be MACA No. 480 of 2012, etc. treated as an application for compensation. [/INST]
 {""CASE_NUMBER"": ""['MACA No. 480 of 2012']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['14.11.1994']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajesh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['sub-section (6) of Section 158']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Motor Vehicles Act', 'Act 54 of 1994']"", ""WITNESS"": ""[]""}",11.25808596611023
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The said decision of the learned Single Judge of the Madras High Court has attained finality between the parties and none of the respondents can re- [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.346985101699829
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Legislative policy also aims for giving finality of the litigation, simultaneously providing higher forum of appeal/revision to vend the grievances of an aggrieved party. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.700114011764526
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2006']"", ""GPE"": ""['Helabattala', 'Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Prosecution has sought to rely on the evidence of P.W.s 2, 4 to 8 with regard to the recovery of 191 kgs of ganja from the rear seat of a Tata Mahindra Marshal vehicle bearing registration no.WB-26C-3869 at Helabattala, Barasat around 6.15 a.m. of 27.09.2006 which was driven and occupied by the appellants. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2006']"", ""GPE"": ""['Barasat']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['P.W.s 2', 'P.W.s 4 to 8']""}",10.215900421142578
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['21.06.2010', 'Shri Samarth Ashram School, Bedag']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Miraj Rural Police Station']"", ""OTHER_PERSON"": ""['Hanmant Sheshrau Shirsat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At 20.45 hrs on 21.06.2010, Hanmant Sheshrau Shirsat gave a statement in the Miraj Rural Police Station that his daughter who was 9 years old and studying in the 4 th standard at Shri Samarth Ashram School, Bedag was missing since 10.00 am. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['21.06.2010']"", ""GPE"": ""['Miraj', 'Bedag']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Shri Samarth Ashram School']"", ""OTHER_PERSON"": ""['Hanmant Sheshrau Shirsat']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.733759880065918
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per the dictionary meaning, the word 'noxious' is harmful, deleterious, injurious, poisonous etc. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.344883441925049
"{""CASE_NUMBER"": ""['SLP(C) No 30381 of 2011']"", ""COURT"": ""[]"", ""DATE"": ""['24 September 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this context, reliance has been placed on an order dated 24 September 2013 of a two-Judge Bench of this Court in SLP(C) No 30381 of 2011 when the Court was seized of a tender dispute relating to transportation of fly ash. [/INST]
 {""CASE_NUMBER"": ""['SLP(C) No 30381 of 2011']"", ""COURT"": ""[]"", ""DATE"": ""['24 September 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.541314601898193
"{""CASE_NUMBER"": ""['Writ-C No. 23181 of 2018', 'Writ-C No. 23183 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Prayagraj Power Generation Company Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The second writ petition has been filed by Association of Power Producers ( Writ-C No. 23181 of 2018) and the third writ petition (Writ-C No. 23183 of 2018) by Prayagraj Power Generation Company Limited. [/INST]
 {""CASE_NUMBER"": ""['Writ-C No. 23181 of 2018', 'Writ-C No. 23183 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Association of Power Producers', 'Prayagraj Power Generation Company Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.97301697731018
"{""CASE_NUMBER"": ""['W.P.No.33868 of 2013']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 15(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Acquisition Act, 1894']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The learned counsel appearing for the petitioners in W.P.No.33868 of 2013 submitted that the respondents resorted to acquire lands in terms of the impugned notice issued under Section 15(2) of the Act is unfounded and unsustainable in law, since it doesn't come within the purview of the above said Act and the respondents ought to have invoked the provisions under the Land Acquisition Act, 1894. [/INST]
 {""CASE_NUMBER"": ""['W.P.No.33868']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 15(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Acquisition Act, 1894']"", ""WITNESS"": ""[]""}",9.92477297782898
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Lotus Realtech Pvt. Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This Court has perused the decision in M/s. Lotus Realtech Pvt. Ltd. (supra), and finds that it has set out the relevant portions of the recent decision of the Supreme Court in M/s. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['M/s. Lotus Realtech Pvt. Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.187489032745361
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.02.2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BBMP']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the said letter it is also stated that BBMP had sanctioned plans for wings A to K upto 17 floors vide its order dated 24.02.2012 issued by the Joint Director, Town Planning, BBMP and further based on the NOC issued for 62 meters, they have constructed the building for the said height. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.02.2012']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BBMP']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.39684534072876
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pazhukkamattom Devaswom v. Lakshmikutty Amma (1980 KLT 645)']"", ""PROVISION"": ""['Section 92']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He cited the judgment of this Court in Pazhukkamattom Devaswom v. Lakshmikutty Amma (1980 KLT 645) in support and argued that the question of jurisdiction of an Additional District Judge to consider and grant leave under Section 92 of the CPC is no longer res integra, it having been answered affirmatively in this judgment. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pazhukkamattom Devaswom v. Lakshmikutty Amma (1980 KLT 645)']"", ""PROVISION"": ""['Section 92']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CPC']"", ""WITNESS"": ""[]""}",10.726764678955078
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Human Rights Commission']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Zahira Habibullah Sheikh v State of Gujarat (2006) 3 SCC 374']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The absence of a proper witness protection programme and its adverse effect on the criminal justice system has been acknowledged by the Supreme Court both in Zahira Habibullah Sheikh v State of Gujarat (2006) 3 SCC 374 and in the National Human Rights Commission (supra). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['National Human Rights Commission']"", ""OTHER_PERSON"": ""['Zahira Habibullah Sheikh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.749332666397095
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 46(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Banking Regulation Act, 1949']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: the Petitioner Bank submitted that an accused person is punishable for contravention of Section 46(1) of the Banking Regulation Act, 1949 only when the return/balance-sheet/other document/information has been provided by or under or for the purposes of any of the provisions of the Banking Regulation Act, 1949. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 46(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Banking Regulation Act, 1949']"", ""WITNESS"": ""[]""}",9.419868469238281
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kiran Suri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Municipal Corporation of Greater Bombay v. Kisan Gangaram Hire [1987 ACJ 311]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In support of her contention, the learned counsel for the appellant Ms.Kiran Suri referred to the decision of the Bombay High Court in Municipal Corporation of Greater Bombay v. Kisan Gangaram Hire [1987 ACJ 311] wherein the Court dealt with a similar contention and observed thus: ""8. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kiran Suri']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Municipal Corporation of Greater Bombay v. Kisan Gangaram Hire [1987 ACJ 311]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.392822265625
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['R. S. Ghuraiya']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: R. S. Ghuraiya (P.W. 20) has investigated the matter. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['R. S. Ghuraiya']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.243139505386353
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ram Chandra Singh v. Savitri Devi [(2003) 8 SCC 319 : JT (2005) 11 SC 439]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reference, in this connection, may also be made to Ram Chandra Singh v. Savitri Devi [(2003) 8 SCC 319 : JT (2005) 11 SC 439] . 23. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ram Chandra Singh v. Savitri Devi [(2003) 8 SCC 319 : JT (2005) 11 SC 439]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.487551927566528
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Channagiri']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Channa Veeroji Rao', 'Shivaji Rao', 'Ningoji Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Kubendroji Rao']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: P.W.2 Kubendroji Rao has deposed that the marriage talks took place in the house of P.W.1 at Channagiri and on the side of the bride, himself, Channa Veeroji Rao, Shivaji Rao, Ningoji Rao and parents of bride were present. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Channagiri']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Channa Veeroji Rao', 'Shivaji Rao', 'Ningoji Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.548803091049194
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Andhra Pradesh']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As per the study details of the petitioner, she has been rightly allocated to the State of Andhra Pradesh as per her local status. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.443470239639282
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 157 and 159']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CrPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The purpose and object is very obvious which is spelt out from the combined reading of Sections 157 and 159 CrPC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 157 and 159']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['CrPC']"", ""WITNESS"": ""[]""}",7.539252519607544
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anuja']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, it was never alleged against the Appellants that they had killed the deceased Anuja at the spot, where her dead body was found. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Anuja']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.376904726028442
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Imambaksh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The shop of Imambaksh is approximately 12 ft wide. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Imambaksh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.939791440963745
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Appellant initially denied any knowledge about the missing girl. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.055713653564453
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Bureau of Investigation']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On the other hand, learned counsel appearing on behalf of the respondent – Central Bureau of Investigation has very vehemently opposed the grant of bail. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Central Bureau of Investigation']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.069494009017944
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: If the examination of a witness continues till late hours the trial can be adjourned to the next day for cross-examination. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.216467142105103
"{""CASE_NUMBER"": ""['D. REF. No.1 of 2018']"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['11 -11-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Immediately, he himself, heading the police party proceeded to the spot when they found the door of the Patna High Court D. REF. No.1 of 2018 dt. 11 -11-2020 house to be bolted from inside and T.V. on as they could hear the sound; blood appeared to be flowing on the street. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['11-11-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.649776458740234
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Supreme Court observed ""He can take recourse to a procedure recognized and accepted in law to retrieve and redeem his reputation"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.421600341796875
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 68', 'Section 63']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Evidence Act', 'Indian Succession Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: From the above three decisions, the following principles can be deduced: 1) the propounder of the Will has to dispel the suspicious circumstances surrounding the execution of the Will, and (2) in order to prove the Will, one of the attestors has to be examined in view of Section 68 of Indian Evidence Act and Section 63 of the Indian Succession Act. 39 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 68', 'Section 63']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Evidence Act', 'Indian Succession Act']"", ""WITNESS"": ""[]""}",8.178286075592041
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Kerala v Maar AppraemKuri Co.']"", ""PROVISION"": ""['Article 254(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, the Writ Petitioners before us ultimately succeed because, Article 254(1) by its operation rendered the impugned Tamil Nadu Legislations repugnant, and null and void, as on the date on which the New Act was made, i.e. 27.09.2013, the date of making of the New Act, as held in the case of State of Kerala v Maar AppraemKuri Co. (Supra) and therefore the impugned Acts do not survive. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['27.09.2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Kerala v Maar AppraemKuri Co.']"", ""PROVISION"": ""['Article 254(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.314040184020996
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bombay Tyre International 1983 (14) ELT', 'Indian Oxygen Ltd. 1988 (36) ELT 723 SC', 'Baroda Electric Meters 1997 (94) ELT 13 SC']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Transportation is an entirely different activity from manufacture and this position remains settled by the judgment of Honorable Supreme Court in the cases of Bombay Tyre International 1983 (14) ELT, Indian Oxygen Ltd. 1988 (36) ELT 723 SC and Baroda Electric Meters 1997 (94) ELT 13 SC. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Bombay Tyre International 1983 (14) ELT', 'Indian Oxygen Ltd. 1988 (36) ELT 723 SC', 'Baroda Electric Meters 1997 (94) ELT 13 SC']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.915787935256958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence I pass an award for Rs. 49,96,719/- with pendente lite and future interest @ 18% from the date of filing of the claim petition till realization in addition to costs calculated hereunder Interest pendente lite on Rs. 49,96,719/- for 4 years and 10 months and 5 days comes to Rs. 43,59,637/-. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.8112311363220215
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mohd. Aslam']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: That, during the trial, accused Mohd. Aslam (A3) died and, therefore, the case of the said accused was ordered to be abated. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Mohd. Aslam']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.573287725448608
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sabeena', 'Anil Sethi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She further stated that in summer of 2005, Sabeena (A-8) took her to a hotel where they met accused Anil Sethi (A-7), who took her to Imperial Hotel, Nehru Park and had sexual intercourse with her in a room on the second floor of the hotel. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sabeena']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Anil Sethi']""}",7.303292274475098
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24th March, 1971']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Permanent Residential Certificate issued from outside the State upto 24th March, 1971 (midnight) (which all should be got verified from the issuing authority by the Registering authority) 6. Refugee registration certificate issued upto 24th March, 1971 (midnight) 7. Passport issued by the Government of India upto 24th March, 1971 (midnight) 8. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24th March, 1971']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Government of India']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.134297609329224
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.01.2020']"", ""GPE"": ""['Mattannor Municipality']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Draft electoral roll for the constituencies of Local Self Government Institutions, except Mattannor Municipality, has been published on 20.01.2020. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.01.2020']"", ""GPE"": ""['Mattannor']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.761627197265625
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Arun Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, it is clear that Arun Sharma (Tenant) was unlawfully taken into custody with malice and in utter misuse of the official position. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Arun Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.270441055297852
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Chandrachud']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Indian Young Lawyers Assn. v. State of Kerala, 2018 SCC OnLine SC 1690', 'Joseph Shine v. Union of India, 2018 SC OnLine SC 1676']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Such actions would inherently affect women Indian Young Lawyers Assn. v. State of Kerala, 2018 SCC OnLine SC 1690, (Chandrachud J., concurring opinion, paragraph 117); Joseph Shine v. Union of India, 2018 SC OnLine SC 1676, (Chandrachud J, concurring opinion, para 38) (“Joseph Shine”) [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Chandrachud']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Indian Young Lawyers Assn. v. State of Kerala, 2018 SCC OnLine SC 1690', 'Joseph Shine v. Union of India, 2018 SC OnLine SC 1676']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.586449146270752
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, the decree holder being a trust and there were a number of beneficiaries of the trust, the Apex Court directed the disbursement of certain amount subject to the condition that those withdrawals would not create any special equity and shall be subject to the outcome of the suit. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.09163498878479
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Likewise, In the power of attorney (exhibit P/116) executed between Rajendra Kumar & others and Atul Surana, the plaintiff signed as a witness with name of Satish Sharma s/o Shankarlal R/o 78A Parashnand Nagar, Indore. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Indore']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajendra Kumar', 'Atul Surana', 'Satish Sharma', 'Shankarlal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.736321687698364
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 115', 'Article 301']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The power envisaged under Section 115 is statutory, whereas Article 301 is a constitutional guarantee. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 115', 'Article 301']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.463820695877075
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO', 'Enercon (India) Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Though we have opined that Shashoua principle has been accepted in BALCO and Enercon (India) Ltd. (supra), yet we think it apt to refer to the clauses in the agreement and scrutinize whether there is any scope to hold that the courts in India could have en- tertained the petition. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO', 'Enercon']"", ""OTHER_PERSON"": ""['Shashoua']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.046863794326782
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Thalappalam Service Co- operative Bank Ltd. v. State of Kerala [(2013) 16 SCC 82]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Thalappalam Service Co- operative Bank Ltd. v. State of Kerala [(2013) 16 SCC 82] the Apex Court has discussed the autonomy of co-operatives vis-à- vis the constitutional provisions. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Thalappalam Service Co- operative Bank Ltd. v. State of Kerala [(2013) 16 SCC 82]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.827491760253906
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['3.6.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the year 2011-12, the petitioner had decided to reconstruct the building over the plot in question inasmuch as the previous construction had become old and unsafe, hence had applied for planning report and the same was issued vide memo no. 4633 dated 3.6.2011. [/INST]
 {""CASE_NUMBER"": ""['memo no. 4633']"", ""COURT"": ""[]"", ""DATE"": ""['3.6.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.616426944732666
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17-04-2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Kum. C. Yamini v. State of A.P.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, the second writ petition came up for hearing earlier and by a judgment dated 17-04-2017 reported in Kum. C. Yamini v. State of A.P. , a Bench of this Court to which one of us was a party, (VRSJ) dismissed the writ petition. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17-04-2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['C. Yamini']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.610551595687866
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gaya', 'Bihar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is further evident that when the appellant was signed off and declared medically unfit, he returned back to his home in the District of Gaya, Bihar and, thereafter, he made all claims and filed representation from his home address at Gaya and those letters and representations were entertained by the respondents and replied and a decision on those representations were communicated to him on his home address in Bihar. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gaya', 'Bihar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.526092290878296
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17.08.2017']"", ""GPE"": ""['Chennai']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nalini Chidambaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reply given by the Chartered Accountant on behalf of Nalini Chidambaram, to the Deputy Director of Income Tax (Investigation), Chennai/third respondent, dated 17.08.2017, is extracted hereunder:- [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17.08.2017']"", ""GPE"": ""['Chennai']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nalini Chidambaram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.573935985565186
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (c) The aforesaid cheque was presented by the complainant for payment through her banker -Canara Bank, Karol Bagh, New Delhi for its encashment, however the same was returned as dishonoured vide cheque returning memo dated 12.06.2010 with the remarks ""account closed"". [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.06.2010']"", ""GPE"": ""['Karol Bagh', 'New Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Canara Bank']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.201733827590942
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: We may also point out that on an earlier occasion when the matter came before this Court in Civil Appeal No. 2216 of 2000, order dated 17-3-2005[2005 (187) E.L.T. A33 (S.C.)] was passed remitting the case back to the Tribunal with the directions to decide the appeal on merits giving its reasons for accepting or rejecting the submissions. [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal No. 2216 of 2000']"", ""COURT"": ""[]"", ""DATE"": ""['17-3-2005']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['order dated 17-3-2005[2005 (187) E.L.T. A33 (S.C.)]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",12.022268533706665
"{""CASE_NUMBER"": ""['M.C.O.P.No.2224 of 2011']"", ""COURT"": ""['Chief Court of Small Causes-cum-Motor Accidents Claims Tribunal, Chennai']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The amount deposited by the appellant/Insurance Company, if any, in the credit of M.C.O.P.No.2224 of 2011 on the file of the Chief Court of Small Causes-cum-Motor Accidents Claims Tribunal, Chennai, is permitted to be withdrawn by the appellant/Insurance Company, by filing an appropriate application. [/INST]
 {""CASE_NUMBER"": ""['M.C.O.P.No.2224']"", ""COURT"": ""['Chief Court of Small Causes-cum-Motor Accidents Claims Tribunal, Chennai']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.438266277313232
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Cairns']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In a classic passage Lord Cairns stated the principle thus ; ""If the person sought to be taxed comes within the letter of the law he must be taxed, however great the hardship may appear to the judicial mind to be. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Cairns']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.916657209396362
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Reepak Kansal vs. Union of India [W.P. (C) No. 762 of 2020]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that similar prayers have been sought in a petition filed before the Supreme Court in Reepak Kansal vs. Union of India [W.P. (C) No. 762 of 2020], wherein prayers are made to restrain broadcasting news, debates and interfering in the administration of justice. [/INST]
 {""CASE_NUMBER"": ""['W.P. (C) No. 762 of 2020']"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Reepak Kansal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.858231544494629
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17th March, 2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The prayers in the Tabular Statement of that execution application were as follows:- ""(a) A Learned Advocate of this Hon'ble Court or any other suitable person be appointed as Receiver in terms of the order dated 17th March, 2009. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['17th March, 2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.407017469406128
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 7(4)(c)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Section 7(4)(c) provides that there can be an arbitration agreement in the form of exchange of statement of claims and defense, in which the existence of the agreement is asserted by one party, and not denied by the other.8 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 7(4)(c)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.673004627227783
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Rajasthan High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Deepak Kumar Surthar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Kailash Chand Sharma vs. State of Rajasthan and others']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The aforesaid Full Bench judgment in Deepak Kumar Surthar (supra) was followed by a subsequent Full Bench judgment of Rajasthan High Court in Kailash Chand Sharma vs. State of Rajasthan and others. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Rajasthan High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Deepak Kumar Surthar', 'Kailash Chand Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.289869546890259
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14.07.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Courtlam Town Panchayat']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The reason for fixing the date of tenure of the office of the elected representatives like the petitioner is the Government have decided dated 14.07.2006 to re-constitute 561 Special Village Panchayat as Town Panchayat and hold election to all the Town Panchayats, including the Courtlam Town Panchayat in one main stream. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['14.07.2006']"", ""GPE"": ""['Courtlam']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.8305504322052
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['22.4.2014']"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['S. Rajaseekaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As statistics noted by Hon'ble Supreme Court in S. Rajaseekaran in the decision dated 22.4.2014 illustrates by 2006 fatal accidents in India crossed one lakh and after 11 years the figures stand at 1,47,913 fatal road accidents as of 2017.5 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['22.4.2014']"", ""GPE"": ""['India']"", ""JUDGE"": ""['S. Rajaseekaran']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.039063930511475
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Underhills considers defamatory statement as 'one which imputes conduct or qualifies tending to disparage or degrade any person, or to expose him to contempt, ridicule or public hatred or to prejudice him in the way of his office, profession or trade'. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Underhills']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.420500040054321
"{""CASE_NUMBER"": ""['writ petition No.1980 of 2008']"", ""COURT"": ""['Apex court']"", ""DATE"": ""['19.12.2012', '30.10.2004']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 19.12.2012, the learned Single Judge, in connected writ petition No.1980 of 2008, while refusing the interim relief passed the following order :- ""Meaning thereby the action of the respondents therein, in respect of land acquisition and the establishment of project by the respondents therein was upheld by the Apex court and thereafter award was delivered in the matter on 30.10.2004. [/INST]
 {""CASE_NUMBER"": ""['connected writ petition No.1980 of 2008']"", ""COURT"": ""['Apex court']"", ""DATE"": ""['19.12.2012', '30.10.2004']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.771467924118042
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Haldar', 'Bajoria']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Then again where tile statute itself covers only a class of cases as in Haldar's cave and Bajoria's case the statute will not be bad. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Haldar', 'Bajoria']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.23797082901001
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NDPS Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The scheme of the NDPS Act and its objects and reasons mandate that the prosecution must prove compliance of various safeguards ensured by virtue of the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NDPS Act']"", ""WITNESS"": ""[]""}",8.346888780593872
"{""CASE_NUMBER"": ""['W.P.Nos.1830, 4130 & 4109 of 2022']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bannari', 'Hasanur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: To ensure the ____________ https://www.mhc.tn.gov.in/judis W.P.Nos.1830, 4130 & 4109 of 2022 weight, weigh bridges to be commissioned at both the entry points (i.e.) at Bannari Check post and at Hasanur. 7) Commercial Vehicles (like lorries) will not be allowed to used the ghat road from evening 6.00 P.M to morning 6.00 A.M in interest and welfare of wild animals. [/INST]
 {""CASE_NUMBER"": ""['W.P.Nos.1830, 4130 & 4109']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['MHC.tn.gov.in']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.70055627822876
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court of Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""['U.P.']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 136']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court of Allahabad has upheld the constitutional validity of cess levied in the State of U.P. on minor minerals which decisions are the subject-matter of civil appeals filed under Article 136 of the Constitution. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court of Allahabad']"", ""DATE"": ""[]"", ""GPE"": ""['U.P.']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 136']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",9.392868280410767
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 24(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The High Court or the civil courts which may have granted interim orders in favour of the land owners, ought to consider the aforesaid aspect before applying Section 24(2) of the Act, 2013 in favour of the land owners. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 24(2)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.5021653175354
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Queen v. Burah [3 A.C. 889.]']"", ""PROVISION"": ""['Section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As several of my learned colleagues have pointed out, the case of Queen v. Burah [3 A.C. 889.], the authority of which was not questioned before us, fully covers the contention raised, and the impugned provision is an 60""Subject to the exceptions specified in Section 3, the Provincial Government, may by notification in the Official Gazette, invest the City Civil Court with jurisdiction to receive, try and dispose of [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Queen v. Burah [3 A.C. 889.']""]"", ""PROVISION"": ""['Section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.976991415023804
"{""CASE_NUMBER"": ""['CWP-23867-2016']"", ""COURT"": ""[]"", ""DATE"": ""['31.8.1981']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jeet Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Jeet Singh had all the opportunities to raise the question of right, title or interest in the land in question but he did not 14 of 17 CWP-23867-2016 - 15 - choose to raise the question of title rather he suffered the order of eviction and a statement on 31.8.1981 that he would handover the vacant possession to the Panchayat. [/INST]
 {""CASE_NUMBER"": ""['CWP-23867-2016']"", ""COURT"": ""[]"", ""DATE"": ""['31.8.1981']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jeet Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.6945641040802
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: - Apart from not raising a probable defence appellant was also not able to contest the existence of a legally enforceable debt or liability - hence, his conviction by High Court, held, proper. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.712480545043945
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['13.6.2018', '12.6.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Complainant respondent No.2, lodged FIR No.0254/2018 on 13.6.2018 against the accused/applicants alleging that on 12.6.2018 at about 10:00 P.M., accused/applicants came in Aman Palace Hotel, asked for a room, when complainant asked applicants to complete the formalities, they started searching room online and when applicants were unable to search out the room online, they insisted the complainant to provide rooms without their I.Ds. (Identity card). [/INST]
 {""CASE_NUMBER"": ""['FIR No.0254/2018']"", ""COURT"": ""[]"", ""DATE"": ""['12.6.2018', '13.6.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Aman Palace Hotel']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.558053970336914
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 25']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The scope of Section 25 of the 1887 Act, came for consideration before this Court on several occasions. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 25']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1887 Act']"", ""WITNESS"": ""[]""}",7.919124364852905
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11th June 2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['PS Malviya Nagar']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Petitioner No.1 gave a complaint (DD No.54A) to the SHO of PS Malviya Nagar, on 11th June 2017 stating that at around 5 pm Respondent Nos. 2 to 4, along with 15 others, forcibly barged into the Petitioners' house. [/INST]
 {""CASE_NUMBER"": ""['DD No.54A']"", ""COURT"": ""[]"", ""DATE"": ""['11th June 2017']"", ""GPE"": ""['Malviya Nagar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.126819133758545
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay High Court', 'Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Konkola Copper Mines', 'BALCO']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(1)(e)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This is what the Bombay High Court in Konkola Copper Mines (supra) also interpreted BALCO (supra) as holding: ""The Supreme Court held that the provisions of Section 2(1)(e) are purely jurisdictional in nature and can have no relevance to the question whether any part of the cause of action has taken place outside India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Bombay High Court', 'Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Konkola Copper Mines', 'BALCO']"", ""PROVISION"": ""['Section 2(1)(e)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.596287488937378
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , the learned Single Judge has quashed the proceedings in various crimes / calendar cases. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.738214015960693
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: They will wait for one more month and if the deal is not completed within that time period, the deposit and the bank guarantees should be returned and the deal should be treated as cancelled. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.167291164398193
"{""CASE_NUMBER"": ""['OS.No.184 of 1989']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: He denies that the suit OS.No.184 of 1989 filed by him was a collusive suit and also denied that the decree passed therein was a collusive decree. [/INST]
 {""CASE_NUMBER"": ""['OS.No.184 of 1989']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.500946521759033
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is suggested that loss of 15% of blood volume will result in moderate shock, and the same was denied. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.180232763290405
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Bihar Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 18) It is in this conspectus, this Court is to first determine the question of liability of tax under Section 6 of the Bihar Act and in the event this tax is upheld, question of penalty and interest would have to be determined. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 6']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Bihar Act']"", ""WITNESS"": ""[]""}",7.333006381988525
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pierce Leslie and Co. Ltd. Vs. Miss Violet Ouchterlony Wapsnare, AIR 1969 SC 843']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Pierce Leslie and Co. Ltd. Vs. Miss Violet Ouchterlony Wapsnare, AIR 1969 SC 843, Court has considered the above principle in the context of 'Sovereign India' as stands under Constitution after independence, and, has observed : ""....in this country the Government takes by escheat immoveable as well as moveable property for want of an heir or successor. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pierce Leslie and Co. Ltd. Vs. Miss Violet Ouchterlony Wapsnare, AIR 1969 SC 843']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution']"", ""WITNESS"": ""[]""}",10.937788009643555
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2015) 5 SCC 549', '(1986) 3 SCC 454']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (2015) 5 SCC 549 7. (1986) 3 SCC 454 8. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(2015) 5 SCC 549', '(1986) 3 SCC 454']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.74007534980774
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reason: is whether the second appeal for enhancement of sentence was maintainable before the High court as the High court has set aside the order of the Sessions Court and restored the order of the trial Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.482454776763916
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 6.2 I have also considered the various judgments cited at the Bar. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.686927556991577
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The law of vicarious liability under Section 149 IPC is crystal clear that even the presence in the unlawful assembly, but with an active mind, to achieve the common object makes such a person vicariously liable for the acts of the unlawful assembly.” 24. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",8.685728549957275
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the plaint, it is pleaded in para 11 that, ""...That the defendant again contacted the plaintiffs and asked for a further payment of Rs. 5,00,000/­ (Rupees Five Lacs only) for his need. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.749735116958618
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Debt Recovery Tribunal']"", ""DATE"": ""['12.10.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13', 'Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even before the Debt Recovery Tribunal adjudicated the matter and quantified the petitioner's liability, the first respondent bank sought to enforce the security interest under Section 13 of the SARFAESI Act and obtained an order dated 12.10.2016 from the second respondent, within the ambit of Section 14 of the SARFAESI Act, to take possession of the mortgaged property of the petitioner with an intention to dispossess the petitioner. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12.10.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 13', 'Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['SARFAESI Act']"", ""WITNESS"": ""[]""}",9.905303478240967
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: These are plainly disputed questions of facts and it is also apposite to examine the same in these proceedings. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.849862337112427
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 138']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Per contra, the learned counsel for complainant contended that the judgment and order of conviction and sentence passed by the trial Court and confirmed by the Appellate Court is in conformity with the provisions of Section 138 NI Act and does not call for interference by this Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 138']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['NI Act']"", ""WITNESS"": ""[]""}",8.514151096343994
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The respondent M/s. Ultratech Cement Ltd. (hereinafter referred to as the ‘assessee’) is involved in packing and clearing/forwarding of Signature Not Verified Digitally signed by ASHWANI KUMAR cement classifiable under Chapter sub heading 25232910 of Central Date: 2018.02.01 16:44:38 IST [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['2018.02.01']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Ultratech Cement Ltd.']"", ""OTHER_PERSON"": ""['ASHWANI KUMAR']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Chapter sub heading 25232910']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.087135791778564
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is undisputed that the petitioner by now has already paid Rs.11.24 crore and is further ready to pay another Rs.9 crore which will make the total of Rs.20.24 crore that is well beyond the principal. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.095200300216675
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['31.03.1997']"", ""GPE"": ""['Vidisha']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The plaint was later on amended and it was pleaded that in the light of the order dated 31.03.1997 passed by SDO, Vidisha, the defendants No. 1 and 2 have forcibly taken possession of the disputed property and thus, relief for possession as well as mesne profit @ Rs.500/- was also incorporated. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['31.03.1997']"", ""GPE"": ""['Vidisha']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.617165327072144
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kudal']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Gopal Tukaram Shivade']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Gopal Tukaram Shivade-scribe, father of PW-2, was a Police Patil of Kudal for ten years and he expired in the year 1990. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kudal']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Gopal Tukaram Shivade']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.89436149597168
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['2011 (2) SCR 831-', 'State of U.P. v. Ashok Kumar Srivastava, (2014) 14 SCC 720', 'K. Meghachandra Singh v. Ningam Siro (2020) 5 SCC 689']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 2011 (2) SCR 831- a view followed later, in State of U.P. v. Ashok Kumar Srivastava, (2014) 14 SCC 720 and, more recently, endorsed in K. Meghachandra Singh v. Ningam Siro (2020) 5 SCC 689 that “seniority should not be reckoned retrospectively unless it is so expressly provided by the relevant Service Rules. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['K. Meghachandra Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of U.P. v. Ashok Kumar Srivastava', 'Ningam Siro']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.069974184036255
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: For example, the dharnas and protests were allowed to be stretched almost on the entire Jantar Mantar Road, on both sides, and even across the width of the road. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.811486005783081
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.06.2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Facts in brief giving rise to present writ petition are that the land (Arazi No. 139 (kha)) area 0.0470 hectare was purchased by petitioner vide sale deed dated 11.06.2009 for the purpose of establishing Masjid and Madarsa. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.06.2009']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.795483589172363
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In fine, all the appeals will stand allowed only in respect of the question of liability of the Insurance Company to pay the compensation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.7182722091674805
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Saroj Sharma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Counsel submits that the presence of PW-2 Saroj Sharma at the place of the occurrence is doubtful. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Saroj Sharma']""}",8.442334175109863
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 34(2) (b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It must be remembered that under the Explanation to Section 34(2) (b), an award is said to be in conflict with the public policy of India if the making of the award was induced or affected by fraud or corruption. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 34(2) (b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.523310422897339
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['LAC No. 261/16 Rajesh Gupta Vs UOI & Anr. 16/21']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: LAC No. 261/16 Rajesh Gupta Vs UOI & Anr. 16/21 [/INST]
 {""CASE_NUMBER"": ""['LAC No. 261/16']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajesh Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.120542287826538
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['December 18, 1999', 'April 20, 2000']"", ""GPE"": ""['Ranchi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This order was confirmed by the Appellate Authority at Ranchi on December 18, 1999 as well as by Revisional Authority by his order dated April 20, 2000. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Ranchi']"", ""DATE"": ""['December 18, 1999', 'April 20, 2000']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.687613725662231
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Prize Chits and Money Circulation Schemes (Banning) Act, 1978']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Interestingly, Section 2(b) of Prize Chits and Money Circulation Schemes (Banning) Act, 1978 defines money to include a cheque, postal order, demand draft, telegraphic transfer or money order. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(b)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Prize Chits and Money Circulation Schemes (Banning) Act, 1978']"", ""WITNESS"": ""[]""}",9.550017595291138
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Union of India-vs.- Venkateshan S.', 'Lal Shah Baba Dargah Trust-vs.- Magnum Developers']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this connection, learned Senior Counsel relied on the Apex Court decisions in Union of India-vs.- Venkateshan S. (supra) and Lal Shah Baba Dargah Trust-vs.- Magnum Developers (supra). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Union of India-vs.- Venkateshan S. (supra)', 'Lal Shah Baba Dargah Trust-vs.- Magnum Developers (supra)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.712065935134888
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['1st April, 2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 1 (2)(a)', 'Sections 147, 148, 149 and 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Finance Act, 2021', 'Income Tax Act, 1961']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Having heard learned counsel for the parties, this Court is of the view that by virtue of Section 1 (2)(a) of the Finance Act, 2021, the substituted Sections 147, 148, 149 and 151 of the Income Tax Act, 1961 pertaining to reopening of assessments came into force on 1st April, 2021. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['1st April, 2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 1 (2)(a)', 'Sections 147, 148, 149 and 151']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Finance Act, 2021', 'Income Tax Act, 1961']"", ""WITNESS"": ""[]""}",10.820509195327759
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is, therefore, axiomatic that a suit, an appeal or an application of the nature mentioned in the three divisions has to be instituted, preferred or made, as the case may be, within the period of limitation as prescribed if the subject matter of the suit/appeal/application is covered by the 1963 Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1963 Act']"", ""WITNESS"": ""[]""}",8.025954246520996
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24-2-2003']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus, it cannot be said that by approving the appointment of the respondent no. 8, the Secretary (Tourism) had validated the minutes of meeting dated 24-2-2003 in which the candidature of 5 candidates were rejected and not only a decision was taken to waive the requirement of 10 years PG experience, but even the candidates were interviewed after waiving the requirement of 10 years PG experience. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24-2-2003']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.058396100997925
"{""CASE_NUMBER"": ""['W.P. No.27105 of 2016']"", ""COURT"": ""[]"", ""DATE"": ""['19.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even respondent No.1 did not consider the order dated 19.12.2016 passed by this Court in W.P. No.27105 of 2016, wherein this Court ordered to consider the representation of the life-convict within a period of one month. [/INST]
 {""CASE_NUMBER"": ""['W.P. No.27105 of 2016']"", ""COURT"": ""[]"", ""DATE"": ""['19.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.14746618270874
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There is a quest for perfection and accuracy. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.770940065383911
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: More often than not, the aggravating and mitigating factors are so intertwined that it is difficult to give a separate treatment to each of them. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.098468065261841
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hotel owners alleged that dues had piled up to Rs. 1 Crore. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.5280468463897705
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Guhas']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The parties have fought tooth and nail on the variation of rent component as the reasonable estimated rent of Rs. 1 lakh, if confirmed, would immediately give a right to the Official Trustee to determine the lease and demand recovery of possession, and in such situation it would be difficult for Guhas to resist the claim. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ghas']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.453043460845947
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Crawford']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Crawford, on statutory construction has observed; which has been followed by a number of judgments by the Hon'ble Supreme Court; ""the question as to whether a statute is mandatory or directory depends upon the intent of the Legislature and not upon the language in which the intent is clothed. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Crawford']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.07082200050354
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['22.01.2003']"", ""GPE"": ""['Baganwala', 'Tosham']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Balwan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Parmeshwari v. Amirchand']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 15) In Parmeshwari v. Amirchand the Apex Court was dealing with a situation where on 22.01.2003 at about 12.00 noon the appellant therein, the claimant before the Tribunal, respondent No.1 before the High Court, was going from Baganwala to Tosham on a Motor Cycle (No.HR 16C- 8379), driven by Balwan with the claimant on the pillion seat. [/INST]
 {""CASE_NUMBER"": ""['HR 16C- 8379']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""['22.01.2003']"", ""GPE"": ""['Baganwala', 'Tosham']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Parmeshwari', 'Amirchand', 'Balwan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.381515502929688
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Secfibn 21(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The order granting or refusing the bail is therefore very much an order against which an appeal is permifted under Secfibn 21(1) of the Act."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Secfibn 21(1)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.783322811126709
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.Anil Kumar', 'P.Vikram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Before examining the rival submissions urged by Sri M.Anil Kumar, Learned Counsel appearing on behalf of the Official Liquidator, and Sri P.Vikram, Learned Counsel appearing for the respondent-accused, it is useful to take note of the opinion of the earlier Division Bench of this Court on this question. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['M.Anil Kumar', 'P.Vikram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.558293104171753
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A.M. Khanwilkar']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Union of India v. Exide Industries Ltd.5']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the case of Union of India v. Exide Industries Ltd.5, the Supreme Court, (in the decision authored by Hon'ble Shri Justice A.M. Khanwilkar) has reiterated that the examination of the Court begins with a presumption in favour of constitutionality. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['A.M. Khanwilkar']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Union of India v. Exide Industries Ltd.5']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.660739660263062
"{""CASE_NUMBER"": ""['M.A.C.M.A.No.685 of 2006', 'M.A.C.M.A.No.1233 of 2006']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['N.Balayogi']"", ""LAWYER"": ""[]"", ""ORG"": ""['New India Assurance Company Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: : (per the Hon'ble Sri Justice N.Balayogi) The appellant in M.A.C.M.A.No.685 of 2006 is the claimant and the appellant in M.A.C.M.A.No.1233 of 2006 is the New India Assurance Company Limited. [/INST]
 {""CASE_NUMBER"": ""['M.A.C.M.A.No.685 of 2006', 'M.A.C.M.A.No.1233 of 2006']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['N.Balayogi']"", ""LAWYER"": ""[]"", ""ORG"": ""['New India Assurance Company Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.518069744110107
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 43-B.']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Hence the first proviso was inserted in Section 43-B. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 43-B']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.035982370376587
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 11A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At best, it can be said that because of the nature of the project of national importance, a guarded procedure had been adopted by the Authorities concerned albeit within the framework of Section 11A of the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 11A']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.53841257095337
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 229', 'Article 233', 'Article 234']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Article 229 of the Constitution of India provides with regard to the officers and servants of the High (18 of 36) [ CW-8695/2017] Court, Article 233 deals with appointment of District Judges and Article 234 deals with appointment in cases of Members of other judicial services. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 229', 'Article 233', 'Article 234']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Constitution of India']"", ""WITNESS"": ""[]""}",8.37594747543335
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Punjab Land Development and Reclamation Corporation Ltd., Chandigarh vs. President Officer, Labour Court, Chandigarh and Others MANU/SC/0479/1990 : (1990)IILLJ70SC : (1990)IILLJ70SC', 'State of U.P. and Another vs. Synthetics and chemicals Ltd. and Another MANU/SC/0616/1991 : 1993(41)ECC326 : 1993(41)ECC326']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The two judgments (1) Punjab Land Development and Reclamation Corporation Ltd., Chandigarh vs. President Officer, Labour Court, Chandigarh and Others MANU/SC/0479/1990 : (1990)IILLJ70SC : (1990)IILLJ70SC and (2) State of U.P. and Another vs. Synthetics and chemicals Ltd. and Another MANU/SC/0616/1991 : 1993(41)ECC326 : 1993(41)ECC326 were cited in support of the argument. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Labour Court, Chandigarh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Punjab Land Development and Reclamation Corporation Ltd.', 'Synthetics and chemicals Ltd.']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of U.P.']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.555085182189941
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chittoor District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Andhra Pradesh']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner No.1 has studied from 1969 to 1976 in Chittoor District, meaning thereby the local status of the petitioner No.1 is the State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Chittoor District', 'Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.912410020828247
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 17.1 It is also required to be noted that even otherwise so far as Accused No. 5 is concerned, the prosecution has even failed to prove beyond doubt that in fact Accused No. 5 fired from his firearm, which as such has missed, as alleged. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.678917407989502
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Alternatively, the court considers it necessary having regard to the need for quick decision and avoidance of delay [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.047526836395264
"{""CASE_NUMBER"": ""['I.A.No.4447 of 2010']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Judgment in the above appeal by the District Judge has been produced along with I.A.No.4447 of 2010. [/INST]
 {""CASE_NUMBER"": ""['I.A.No.4447 of 2010']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.916182518005371
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(1996) 7 SCC 765, Keshabo and another vs. State of MP and Others']"", ""PROVISION"": ""['Articles 39(b) and 46']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MP Revenue Code', 'Constitution']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also relevant to mention that the Supreme Court in (1996) 7 SCC 765, Keshabo and another vs. State of MP and Others, held as under:- ''The MP Revenue Code is a welfare legislation made to protect the ownership rights in the land of a Scheduled Tribe to effectuate the constitutional obligation of Articles 39(b) and 46 of the Constitution read with the Preamble. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Keshabo and another vs. State of MP and Others']"", ""PROVISION"": ""['Articles 39(b) and 46']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['MP Revenue Code']"", ""WITNESS"": ""[]""}",10.021886587142944
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16.05.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 16.05.2011, a Notice of Arbitration was issued by the Petitioner to the Respondent, in regard to payment of compensation for losses suf- fered due to abnormal delays and additional costs as a result of hin- drances caused by the Respondent. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['16.05.2011']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.582740306854248
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mohd. Rafi']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The deposition of the said witness PW1 has been further supported by the deposition of PW2 Mohd. Rafi. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Mohd. Rafi']""}",8.44055986404419
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is not a case where the land has been acquired for the purpose of industrialization or for any private organisation, but the land has been acquired by the State for their own so as to make the agricultural land more fertile. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.849675893783569
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.11.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Chhattisgarh']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even before the order dated 11.11.2020, the State of Chhattisgarh had opened 12,593 Anganwadi Centres in the State w.e.f. September, 2020. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['11.11.2020']"", ""GPE"": ""['Chhattisgarh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.23107123374939
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this context, it may be appropriate to refer to the judgments cited by the learned counsel for the plaintiff.44. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.7035441398620605
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This long-term view could explain why death sentenced and LWOP inmates would commit less violent misconduct than parole-eligible inmates, and why LWOP inmates would 65 of 111 Murder Reference No.03 of 2017 & other connected appeals 66 commit the least violence of all. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.21818995475769
"{""CASE_NUMBER"": ""['Writ Petition No.9360 (MB) of 2007']"", ""COURT"": ""[]"", ""DATE"": ""['27.1.2007']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is relevant to mention here that in Writ Petition No.9360 (MB) of 2007 filed by the original lessee (Company), the question of division of nazul land held by the original lessee and its transfer of lease-hold-rights vide deed of assignment dated 27.1.2007 in favour of the petitioner was not in issue. [/INST]
 {""CASE_NUMBER"": ""['Writ Petition No.9360 (MB) of 2007']"", ""COURT"": ""[]"", ""DATE"": ""['27.1.2007']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.432387351989746
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Gujrat High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shri Singhvi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Shivlal K. Purohit and others Vs. State of Gujrat(supra']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Gujrat Regularization of Unauthorized Development Act, 2011']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Shri Singhvi, the learned senior counsel placed reliance on the decision of Gujrat High Court in the case of Shivlal K. Purohit and others Vs. State of Gujrat(supra) wherein the challenge was to the provisions of Gujrat Regularization of Unauthorized Development Act, 2011. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Gujrat High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shivlal K. Purohit']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Gujrat Regularization of Unauthorized Development Act, 2011']"", ""WITNESS"": ""[]""}",10.308431148529053
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(m)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Trade Marks Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In view of the definitions of „mark‟ and „trademark‟ under the Trade Marks Act, a trademark for becoming a trademark will firstly have to be a mark under Section 2(m) of the Trade Marks Act i.e before the trademark would be a trademark under the Trade Marks Act there must be a mark and which falls within the definition of „mark‟ under the Trade Marks Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(m)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Trade Marks Act']"", ""WITNESS"": ""[]""}",7.5884222984313965
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As an upshot of the discussion, the writ petitions are liable to be dismissed, and accordingly, they are dismissed. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.045035600662231
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bombay', 'Agra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Amaraveni', 'Venkateswara Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The evidence of P.W.1 is consistent through out that when the jeep bearing No.MH 15 K 6520 dashed against VAD tree at 376 KM stone on the Bombay-Agra highway, his family members and himself sustained grievous injuries and he lost his wife Amaraveni and father Venkateswara Rao in the said accident. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bombay', 'Agra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Amaraveni', 'Venkateswara Rao']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.528245210647583
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court', 'Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['V. Sriharan', 'Vikram Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , in para 89 of V. Sriharan (supra), the Apex Court, after taking into consideration several decisions, including the Constitution Bench decision in Vikram Singh (supra), concluded that it is nowhere prescribed in the SQ Pathan 66/117 wp.1181.1182.14 & 527.18 .(J).doc Penal Code [/INST]
 {""CASE_NUMBER"": ""['SQ Pathan 66/117']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['V. Sriharan', 'Vikram Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Penal Code']"", ""WITNESS"": ""[]""}",9.629309177398682
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Balak Ram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She had developed relationship with Balak Ram about one year prior to murder. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Balak Ram']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.903494358062744
"{""CASE_NUMBER"": ""['O.S.No.123 of 1986']"", ""COURT"": ""['Subordinate Judge, Anantapur']"", ""DATE"": ""['18.08.1989']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The first defendant's son was examined as D.W.1 and two other vendees under the agreement were examined as D.Ws.2 and 3. Exs.B.1, dated 18.08.1989, certified copy of the decree in O.S.No.123 of 1986 on the file of the Subordinate Judge, Anantapur, was marked on behalf of the defendants. [/INST]
 {""CASE_NUMBER"": ""['O.S.No.123']"", ""COURT"": ""['Subordinate Judge, Anantapur']"", ""DATE"": ""['18.08.1989']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.907750129699707
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is sufficient in law, if there is intention coupled with some overt act in execution thereof. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.160322904586792
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Herein above in A2 which is another admitted signature from the written statement of the defendant there are all the alphabets of the full name of the defendant. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.733405590057373
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.12.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The agreement dated 18.12.2017 between the parties specifically stipulated that a notice sent by the arbitrator, to the parties, by registered post, at the addresses mentioned in the Loan Agreement will be considered sufficient service to the parties, whether such notice is received by them or not, or refused or is returned undelivered. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['18.12.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.848440170288086
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['E.Noohu Kannu', 'A.Saleem', 'A.P.Khan']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: E.Noohu Kannu, the sister of PW1, Sri.A.Saleem, the husband of the additional 3rd plaintiff and Sri.A.P.Khan, the brother in law of the 1st plaintiff respectively were examined as PWs 2 to 4. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['E.Noohu Kannu', 'A.P.Khan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['A.Saleem']""}",8.099960803985596
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Piari', 'Lalit Parkash', 'Sonia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 138']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Negotiable Instruments Act, 1881', 'NI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At the inception, the present complaint was filed by Smt. Ram Piari (hereinafter ""complainant"") against Mr. Lalit Parkash (hereinafter ""accused"") and Ms. Sonia under Section 138 of the Negotiable Instruments Act, 1881 (hereinafter ""NI Act""). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ram Piari', 'Lalit Parkash', 'Sonia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 138']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Negotiable Instruments Act, 1881', 'NI Act']"", ""WITNESS"": ""[]""}",10.570518255233765
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Damodar S. Prabhu']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Even prior to the said decision and that of the Full Bench, the said issue has been concluded by the Apex Court in Damodar S. Prabhu's case(supra). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Damodar S. Prabhu']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.8740339279174805
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Barkha Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: From paragraphs 34 to 41 of its judgment in Barkha Gupta, the Division Bench of the Delhi High Court highlighted the importance of inspection of subordinate Courts by the Administrative Judges, the object of which is the assessment of the work of the subordinate judicial officers, their capability, integrity and competence. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Barkha Gupta']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.513880491256714
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Kerala']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The State of Kerala, which accounts for 3% of Country's population, has one of the highest numbers of matrimonial cases in the Nation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Kerala']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.556346654891968
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kulwant Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Damanpreet Singh']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: PW.16 Damanpreet Singh deposed that he knew Kulwant Singh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Kulwant Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Damanpreet Singh']""}",8.278463363647461
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, he has got no document to substantiate the same. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.256083011627197
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gwalior']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jameel', 'Jainuuddin']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: His brother Jameel was taken to Gwalior and thereafter, he heard that the assailants have killed their own father Jainuuddin. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Gwalior']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jainuuddin', 'Jameel']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.501951217651367
"{""CASE_NUMBER"": ""['CS No. 213 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Learned Senior Advocate appearing for the first defendant in CS No. 213 of 2018 has submitted that, the authority for the purpose of pre- institution mediation was notified on July 3, 2018. [/INST]
 {""CASE_NUMBER"": ""['CS No. 213 of 2018']"", ""COURT"": ""[]"", ""DATE"": ""['July 3, 2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.452991008758545
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Andhra Pradesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['St. Joseph School, Nandyal, Kurnool District']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner has stated in the writ petition that she has studied from elementary school to Class X at St. Joseph School, Nandyal, Kurnool District and therefore, she has prosecuted her studies in the united State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Nandyal', 'Kurnool District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['St. Joseph School']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.802460432052612
"{""CASE_NUMBER"": ""['Civil Appeal Nos. 8109 and 8110 of 2010']"", ""COURT"": ""[]"", ""DATE"": ""['6th September, 2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This Court granted leave and accordingly the special leave petitions were converted into Civil Appeal Nos. 8109 and 8110 of 2010 vide order dated 6th September, 2010. [/INST]
 {""CASE_NUMBER"": ""['Civil Appeal Nos. 8109 and 8110']"", ""COURT"": ""[]"", ""DATE"": ""['6th September, 2010']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.841850519180298
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Division Bench of this Court (Aurangabad Bench)']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Maharashtra vs. Rajendra Jawanmal Gandhi, reported in (1997) 8 SCC 386', 'Konan Kodio Ganstone & Ors. vs. State of Maharashtra [Criminal Writ Petition No.548 of 2020]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this context a reference is made to the decision in State of Maharashtra vs. Rajendra Jawanmal Gandhi, reported in (1997) 8 SCC 386, and a recent decision of the Division Bench of this Court (Aurangabad Bench) in the case Konan Kodio Ganstone & Ors. vs. State of Maharashtra [Criminal Writ Petition No.548 of 2020]. [/INST]
 {""CASE_NUMBER"": ""['Criminal Writ Petition No.548 of 2020']"", ""COURT"": ""['Aurangabad Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Maharashtra vs. Rajendra Jawanmal Gandhi, reported in (1997) 8 SCC 386']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.879689693450928
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.10.1986']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (8) Pending appeal, mother passed away and during her lifetime, she executed a registered will deed dated 20.10.1986, bequeathing her entire share in favour of Defendant No.1 only. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['20.10.1986']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.064445734024048
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Central Bank of India Vs. C.L.Vimla']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this connection, it would be apt to refer to the decision of the Supreme Court in Central Bank of India Vs. C.L.Vimla (supra), relevant portion of which is extracted hereunder: 21. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['C.L.Vimla']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Central Bank of India Vs. C.L.Vimla']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.574238300323486
"{""CASE_NUMBER"": ""['W.P. Nos.20421 of 2019']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This point is made not to solicit pity but to bring attention to the fact that any individual could be caught in a similar web and find himself inside a pit such as Folsom Prison."" iii) The Apex Court in the said judgment formulated its findings which are as under: KL,J W.P. Nos.20421 of 2019 & batch ""72. [/INST]
 {""CASE_NUMBER"": ""['W.P. Nos.20421 of 2019']"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['KL']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.469445705413818
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Jundla']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Rinki Sharma']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: PW1 Rinki Sharma, widow of the deceased also deposed that her husband was working as a tailor at village Jundla. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Jundla']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Rinki Sharma']""}",8.58102011680603
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Such an act was not given any retrospective effect by the legislature. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.677928924560547
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['DRAT']"", ""DATE"": ""['08.09.2021', '16.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: However, at present Chairperson of the DRAT is not available and the matter was last heard by the DRAT on 08.09.2021 and delay was condoned and thereafter, the mater was kept on 16.09.2021. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.09.2021', '16.09.2021']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['DRAT']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.629493951797485
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Systemic discrimination on account of gender at the workplace would then encapsulate the patriarchal disadvantage that permeates all aspects of her being from the outset, including reproduction, sexuality and private choices which operate within an unjust structure. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.741169691085815
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sharad Kacharu Pawar']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Through this witness, the defence has brought on record various contradictions, omissions and improvements in the evidence of PW-12 Sharad Kacharu Pawar. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Sharad Kacharu Pawar']""}",10.7571382522583
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (vii) Whether the sub-classification of MBC into three categories can be done solely based on adequate population data, in the absence of any objective criteria?” 12. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.619819164276123
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Aghnoo Magsha v. State of Bihar (AIR 1966 SC 119)']"", ""PROVISION"": ""['Sec.8']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In Aghnoo Magsha v. State of Bihar (AIR 1966 SC 119) it has been held that if the first information is given by the accused himself the fact of his giving the information is admissible against him as evidence of his conduct under Sec.8 of the Evidence Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Aghnoo Magsha v. State of Bihar (AIR 1966 SC 119)']"", ""PROVISION"": ""['Sec.8']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act']"", ""WITNESS"": ""[]""}",10.127774238586426
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ravinder Kumar Sharma v. State of Assam & Others as reported in AIR 1999 SC 3571']"", ""PROVISION"": ""['Section 81']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reliance has also been placed on the judgment of the Hon'ble Supreme Court in the case of Ravinder Kumar Sharma v. State of Assam & Others as reported in AIR 1999 SC 3571, wherein the ratio of the judgment in para 25 is that the presumption of genuineness attached under Section 81 of the Evidence Act to newspaper reports cannot be treated as proof of the facts stated therein. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ravinder Kumar Sharma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1999 SC 3571']"", ""PROVISION"": ""['Section 81']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Evidence Act']"", ""WITNESS"": ""[]""}",8.773218870162964
"{""CASE_NUMBER"": ""['W.P.No.13320/2006']"", ""COURT"": ""[]"", ""DATE"": ""['22.09.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['B.Javarayagouda S/o Boregouda vs. The State of Karnataka, reported in ILR 1997 KAR 1153', 'R. Prasanna Kumar & another vs. The State of Karnataka reported in ILR 1999 KAR 1378']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , relied upon the following judgments: (i) An unreported judgment of this Court in W.P.No.13320/2006 dated 22.09.2006 paragraphs 2,4,5,9,10. (ii) B.Javarayagouda S/o Boregouda vs. The State of Karnataka, reported in ILR 1997 KAR 1153, para 17. (iii) Full Bench decision of this Court in the case of R. Prasanna Kumar & another vs. The State of Karnataka reported in ILR 1999 KAR 1378 para 25. [/INST]
 {""CASE_NUMBER"": ""['W.P.No.13320/2006']"", ""COURT"": ""[]"", ""DATE"": ""['22.09.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['B.Javarayagouda', 'R. Prasanna Kumar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['An unreported judgment in W.P.No.13320/2006', 'B.Javarayagouda S/o Boregouda vs. The State of Karnataka, reported in ILR 1997 KAR 1153, para 17', 'Full Bench decision of this Court in the case of R. Prasanna Kumar & another vs. The State of Karnataka reported in ILR 1999 KAR 1378 para 25']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",18.296879529953003
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The promotee Inspectors promoted well within 25% promotee quota. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.569840431213379
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""['28.02.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Antrix', 'Devas']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 9', 'Section 42']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Ar- bitration Act, 1996', 'Arbitration Act, 1996']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On the facts of that case, on 28.02.2017, a learned Single Judge of the Delhi High Court ruled that Antrix’s petition under Section 9 of the Ar- bitration Act, 1996 before the Bangalore Court was not maintainable, and that Devas’ petition under Section 9 was maintainable, the bar under Section 42 of the Arbitration Act, 1996 being inapplicable. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court']"", ""DATE"": ""['28.02.2017']"", ""GPE"": ""['Bangalore']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Antrix', 'Devas']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 9', 'Section 42']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Ar-bitration Act, 1996', 'Arbitration Act, 1996']"", ""WITNESS"": ""[]""}",11.731845378875732
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Constitution Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO']"", ""OTHER_PERSON"": ""['Shashoua']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also to be noted that in BALCO, the Constitution Bench has not merely repro- duced few paragraphs from Shashoua but has also referred to other decisions on which Shashoua has placed reliance upon. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['BALCO']"", ""OTHER_PERSON"": ""['Shashoua']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.153112173080444
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 20(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Under Rule 20(4) of the Rules as they stood before the amendment of the Rules in the year 1991, the Disciplinary Authority was required to deliver to the delinquent, a copy of the articles of charges, the statement of imputations of misconduct and a list of documents and witnesses by which each article of charge was proposed to be sustained. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rule 20(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.603812456130981
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Waqf', 'Wakf']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Thus it is evident that the said lands are Waqf lands and grant of Occupancy Rights Certificate to individuals in respect of Wakf lands is not in order. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.662749528884888
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Ranvir Singh']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: P.W.5 Ranvir Singh deposed that he was travelling in the bus-in-question and had suffered injuries on account of the bomb blast. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Ranvir Singh']""}",8.352054834365845
"{""CASE_NUMBER"": ""['Writ Appeal No.2 of 2018']"", ""COURT"": ""['Gauhati High Court, Aizawl Bench']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The present appeal arises out of the judgment and order dated 6­11­2019 passed by the Division Bench of the Gauhati High Court, Aizawl Bench in Writ Appeal No.2 of 2018 dismissing the Writ Appeal filed by the appellants. [/INST]
 {""CASE_NUMBER"": ""['Writ Appeal No.2 of 2018']"", ""COURT"": ""['Gauhati High Court', 'Aizawl Bench']"", ""DATE"": ""['6\\xad11\\xad2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.098333835601807
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.07.1971', '04.12.1999']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Gulab Badi Grah Nirman Sahakari Samiti', 'JDA']"", ""OTHER_PERSON"": ""['Bhanwarmal Singhvi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The same was transferred in the name of Bhanwarmal Singhvi on 08.07.1971 and out of the aforesaid land, 7 bigha 7 biswa was sold to Gulab Badi Grah Nirman Sahakari Samiti who developed another residential scheme namely Murtikala Colony and 90-B proceedings were initiated by JDA thereto on 04.12.1999 and lease has also been issued by the JDA to the land holders. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.07.1971', '04.12.1999']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['JDA', 'Gulab Badi Grah Nirman Sahakari Samiti']"", ""OTHER_PERSON"": ""['Bhanwarmal Singhvi', 'Murtikala Colony']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.469630718231201
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Emaar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: g) Emaar has agreed to develop an IT Infrastructure in 20 to 30 acres of land from out of the land designated for development of residential project with a built up area of 10,00,000/-sq.feet. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Emaar']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.140671730041504
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Guntur']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of Andhra Pradesh', 'SPSR Nellore and Visakhapatnam Districts']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Petitioner No.1 has studied from 1988 to 1993 in Guntur which falls under the State of Andhra Pradesh and petitioner No.2 has studied from 1986 to 1992 in SPSR Nellore and Visakhapatnam Districts which also fall in the State of Andhra Pradesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Guntur', 'SPSR Nellore', 'Visakhapatnam']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.054439544677734
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Answering points (v) to (vii), the High Court was of the opinion that there was no quantifiable data relating to the population, socio-economic status and representation of the backward classes in the services. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.133476734161377
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this case the license fee was regulatory in character. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.686004400253296
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['R.K. Upadhyaya v. Shamabhai P. Patel [1987] 166 ITR 163 (SC)', 'Jai Hanuman Trading Co. v. CIT [1977] 110 ITR 36 (P&H)(FB)', 'CIT v. Sheo Kumari Devi [1986] 157 ITR 13 (Patna)(FB))']"", ""PROVISION"": ""['s. 147', 's. 148']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The jurisdiction to assess u/s. 147 is assumed on the basis of the issue of notice u/s. 148, and not its' service, and which could therefore be served even subsequently (R.K. Upadhyaya v. Shamabhai P. Patel [1987] 166 ITR 163 (SC); Jai Hanuman Trading Co. v. CIT [1977] 110 ITR 36 (P&H)(FB); CIT v. Sheo Kumari Devi [1986] 157 ITR 13 (Patna)(FB)). [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['R.K. Upadhyaya', 'Shamabhai P. Patel', 'Jai Hanuman Trading Co.', 'CIT', 'Sheo Kumari Devi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['s. 147', 's. 148']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.391832828521729
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shabbir Ahmed']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In her deposition, PW-1 (W-1) stated that Shabbir Ahmed 124 of 140 CRA-S Nos.2903-SB, 2901-SB, 2945-SB, and 2668-SB of 2018 (O&M) CASE HEARD THROUGH VIDEO CONFERENCING [/INST]
 {""CASE_NUMBER"": ""['CRA-S Nos.2903-SB, 2901-SB, 2945-SB, and 2668-SB']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shabbir Ahmed']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.12839388847351
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ajay Hasia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Learned senior counsel relied on the decision of the Apex Court in Ajay Hasia (supra) to show that Article 14 has been interpreted to include guarantee against arbitrariness and that arbitrariness in state-action either by the legislature or the executive, is sufficient to initiate that action mentioned in para 16 of the said judgment. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ajay Hasia']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Article 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.383245944976807
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Chhattisgarh High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Palak Khatuja and Ors. Vs. Union of India and Ors., reported in (2021) 438 ITR 622']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The sole dissenting view adopted is of a learned Single Judge of Chhattisgarh High Court in case of Palak Khatuja and Ors. Vs. Union of India and Ors., reported in (2021) 438 ITR 622. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Chhattisgarh High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Palak Khatuja']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.755445957183838
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.8.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Maunag', 'Jankitbhai']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At this stage, it is very relevant to note that neither present applicant nor his son Maunag was present at the office of Jankitbhai on 24.8.2020, but said witness states that the first informant was pressurized and forced to sign the documents. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['24.8.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jankitbhai', 'Maunag']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.083313941955566
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Copy of this judgment be circulated to all Subordinate Criminal Courts of Delhi by the learned Registrar General of this Court. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Delhi']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.26766562461853
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sarla Verma', 'Reshma Kumari']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In paragraph 43.6 the Apex Court directed that, insofar as deduction for personal and living expenses is concerned, the Tribunals shall ordinarily follow the standards prescribed in paragraphs 30, 31 and 32 of the judgment in Sarla Verma, subject to the observations made in para 38 of Reshma Kumari. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sarla Verma', 'Reshma Kumari']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['paragraphs 30, 31 and 32']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.453002691268921
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Alex M.Thombra', 'Vinod']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Vasudevan']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Shri Alex M.Thombra relied on the testimony of PW9 Vasudevan, father of deceased Vinod. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Alex M.Thombra', 'Vinod']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Vasudevan']""}",8.9607412815094
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is further urged that the aforesaid three decisions cannot be considered in light of the dicta of the Hon'ble Supreme Court referred to above and the recent decision of this Court in M/S.Evershine Monuments. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['M/S.Evershine Monuments']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.558247089385986
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['TADA']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In that matter the Hon'ble Apex Court had divided TADA detenus in four classes and held that hardcore under trials whose release would prejudice the prosecution case and their liberty may prove to be a menace to the society in general, and to the complainant and prosecution witnesses in particular, do not deserve [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Apex Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.382051706314087
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['R. D. Gardi Medical College']"", ""OTHER_PERSON"": ""['Shashank Nayak', 'Muskan Jaisinghani', 'Sapna Solanki', 'Ratnanjay Sarvate']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is submitted that out of the 10 candidates that had appeared before the authorities of R. D. Gardi Medical College, 4 candidates namely; Shashank Nayak (2604), Muskan Jaisinghani (1322) Sapna Solanki (7821) and Ratnanjay Sarvate (1648), were permanent residents of M.P. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['M.P.']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['R. D. Gardi Medical College']"", ""OTHER_PERSON"": ""['Shashank Nayak', 'Muskan Jaisinghani', 'Sapna Solanki', 'Ratnanjay Sarvate']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.293109655380249
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Ramesh Chand Sharma vs. Udham Singh Kamal and others, reported in (1999) 8 SCC 304']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: At this juncture, it is relevant to peruse the Supreme Court's decision rendered in Ramesh Chand Sharma vs. Udham Singh Kamal and others, reported in (1999) 8 SCC 304. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Ramesh Chand Sharma', 'Udham Singh Kamal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['(1999) 8 SCC 304']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.180916786193848
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The place where they heard sound of fire, from there the place of incident was 400 meters towards southern. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.23593783378601
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""['21.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['C.A. No. 4835/15 State of Haryana & Anr. Vs. Maharana Partap Charitable Trust']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: ""Prayer in the present application is for the modification of the order dated 21.12.2016 passed by this Court whereby the petition was ordered to be listed after the decision of Hon'ble the Supreme Court in C.A. No. 4835/15 State of Haryana & Anr. Vs. Maharana Partap Charitable Trust. [/INST]
 {""CASE_NUMBER"": ""['C.A. No. 4835/15']"", ""COURT"": ""[]"", ""DATE"": ""['21.12.2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['State of Haryana & Anr. Vs. Maharana Partap Charitable Trust']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.511489868164062
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, in the complaints / charge sheets, there is no allegation against the petitioners that they were carrying on trade or commerce in contraband or any other tobacco products without label and specified warning on the said products. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.122573852539062
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['2006 Supp (10) SCR 1 2008 (3) SCC 331']"", ""PROVISION"": ""['Regulation 34(6)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Regulation 34(6) states that the revertees shall 2006 Supp (10) SCR 1 2008 (3) SCC 331 subsequently be considered for repromotion against the quota of vacancies reserved for promotees. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Regulation 34(6)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.275501251220703
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Sudhakaran and others v. State of Kerala (2011 (1) KHC 610)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The findings in Sudhakaran and others v. State of Kerala (2011 (1) KHC 610) to the extent that the report of the Chemical Examiner in 'B' sample will not supersede the report of the Chemical analysis in sample 'A' is upheld. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sudhakaran']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.395419597625732
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Once the issue was raised, it was only the petitioner who could have categorically denied such assertion or proved that his statement in the application form was correct at the relevant time. Not having done so and only nitpicking on the issue of not having been given an opportunity of cross [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.708868741989136
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 122, 126 and 127']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Motor Vehicles Act, 1988']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In such circumstances, in my view, the learned Tribunal rightly concluded that the truck driver was guilty of violation of the express provisions of Sections 122, 126 and 127 of the Motor Vehicles Act, 1988 by leaving the offending truck unattended, without due and proper caution, in the middle of the road, and that too on a flyover.. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 122, 126 and 127']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Motor Vehicles Act, 1988']"", ""WITNESS"": ""[]""}",9.889461040496826
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(24)(x) rws 36(1)(va)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PF/ESI Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: According to AO, in view of Section 2(24)(x) rws 36(1)(va) of the Act, the employees contribution is to be paid within the due date of payment as prescribed in the respective Acts (PF/ESI Act) to claim deduction. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(24)(x) rws 36(1)(va)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PF/ESI Act']"", ""WITNESS"": ""[]""}",8.825157403945923
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['K. Bhaskaran Sankaran Vaidhyan Balan & Anr. [(1999) 7 SCC 510]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Hon'ble Supreme Court in the case of K. Bhaskaran Sankaran Vaidhyan Balan & Anr. [(1999) 7 SCC 510] has held that, ""9. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['K. Bhaskaran Sankaran', 'Balan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['K. Bhaskaran Sankaran Vaidhyan Balan & Anr. [(1999) 7 SCC 510]']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.26798677444458
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: They do not depend on the legal or constitutional form in which they are declared. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.05088472366333
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sibal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Manoj Narula Vs. Union of India, (2014) 9 SCC 1']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Shri Sibal has placed reliance on judgment of this Court in Manoj Narula Vs. Union of India, (2014) 9 SCC 1 for the preposition that doctrine of implication has to be applied to explain the constitutional concepts. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sibal']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Manoj Narula Vs. Union of India, (2014) 9 SCC 1']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.34500765800476
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Pass mark for each subject would be 40 and in addition to that candidates were required to obtain 50% in aggregate in order to be successful in the written test. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.047919988632202
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Shailesh Shetye']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The positive evidence of PW7, Shailesh Shetye was discarded only to the extent of negligence aspect, stating him not to be a natural witness. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Shailesh Shetye']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.1687235832214355
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Commercial Complex, Raj Bhavan Road, Hyderabad-02 13 [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Hyderabad']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.324882507324219
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['High Court of Madhya Pradesh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['CRA No.2615/2005 (Sukhendra Singh S/o Niranjan Singh Ghosh Vs. State of Madhya Pradesh)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In other words, if the court is convinced that the testimony of a witness to the occurrence is true the court is free to act on it albeit investigating officer's suspicious role in the case."" The learned Prosecutor has also relied on the decision of Hon'ble High Court of Madhya Pradesh in CRA No.2615/2005 (Sukhendra Singh S/o Niranjan Singh Ghosh Vs. State of Madhya Pradesh) [/INST]
 {""CASE_NUMBER"": ""['CRA No.2615/2005']"", ""COURT"": ""['High Court of Madhya Pradesh']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Sukhendra Singh S/o Niranjan Singh Ghosh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.228664875030518
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Making a clear distinction between a charging provision of a taxing statute and exemption notification which waives a tax or a levy normally imposed, the Supreme Court observed as under:- ""14. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.071276664733887
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['07.04.1960']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Ceiling Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The relevant date under the Land Ceiling Act was 07.04.1960 on which date the extent of properties in hands of a person has to be determined and since three brothers, who consisted members of joint family on the relevant date had more than the land which was permitted to a person, a partition was entered to save the properties from land ceiling laws. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['07.04.1960']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Land Ceiling Act']"", ""WITNESS"": ""[]""}",7.986292362213135
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Chakraborty']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Chakraborty complains that there was no formal charge-sheet. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Chakraborty']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.937151193618774
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['S. 36']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Stamp Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Once a document has been marked as an exhibit in the case and the trial has proceeded all along on the footing that the document was an exhibit in the case and has been used by the parties in examination and cross-examination of their witnesses, S. 36 of the Stamp Act comes into operation. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['S. 36']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Stamp Act']"", ""WITNESS"": ""[]""}",7.777767896652222
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 313']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C.']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This defence was not taken by these accused till the recording of the statements under Section 313 Cr.P.C. and not put to the material prosecution witness. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 313']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Cr.P.C.']"", ""WITNESS"": ""[]""}",8.27764081954956
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Minarpally Village', 'Bodhan Mandal', 'Nizamabad District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: But, as seen from the allegations made in the charge-sheet, he was appointed initially as a clerk by the Government and subsequently worked as Paid Secretary at Minarpally Village, Bodhan Mandal, Nizamabad District. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Minarpally Village', 'Nizamabad District']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.187307119369507
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It is also relevant to note that the CBI had also consistently opposed the petitioner's release on parole on the ground that a co- convict had absconded after being released on parole. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['CBI']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.439177513122559
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Patent Act', \""Plant Breeders' Rights Act\""]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The majority judgment also noted: ""Of significance to the interpretation of the Patent Act and the issue of its applicability to higher life forms is the Plant Breeders' Rights Act, passed in 1990 subsequent to this Court's decision in Pioneer Hi-Bred,supra, in which it was determined that a crossbred soybean variety did not meet the disclosure requirements of the Patent Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Pioneer Hi-Bred']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Patent Act', 'Plant Breeders\' Rights Act']"", ""WITNESS"": ""[]""}",9.118668794631958
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['1st March, 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Parliamentary Standing Committee on Home Affairs', 'Parliament']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Criminal Law (Amendment) Bill, 2012']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Department-related Parliamentary Standing Committee on Home Affairs examined the Criminal Law (Amendment) Bill, 2012 and tabled its Report in Parliament on 1st March, 2013. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['1st March, 2013']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Department-related Parliamentary Standing Committee on Home Affairs']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.206738471984863
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Goff', 'Thomas Bingham M.R.', 'Stephen Brown P.']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Lord Goff also noted that Sir Thomas Bingham M.R. in the Court of Appeal expressed his agreement with Sir Stephen Brown P. in the following words:- ""This was in my respectful view a wise ruling, directed to the protection of patients, the protection of doctors, the reassurance of patients' families and the reassurance of the public. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""['Goff', 'Bingham']"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Brown']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.704006671905518
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12th September, 2019']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rules 28 and 29']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Haryana Real Estate (Regulation and Development) Amendment Rules, 2019', 'Haryana Amendment Rules 2019']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In some of the petitions, a challenge has been laid to Rules 28 and 29 of the Haryana Rules as well as to forms CRA and CAO as amended by the Haryana Real Estate (Regulation and Development) Amendment Rules, 2019 notified on 12th September, 2019 ('Haryana Amendment Rules 2019') as being ultra vires the Act. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['12th September, 2019']"", ""GPE"": ""['Haryana']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Rules 28 and 29', 'forms CRA and CAO']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Haryana Real Estate (Regulation and Development) Amendment Rules, 2019']"", ""WITNESS"": ""[]""}",9.906618356704712
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 42']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Section 42 is meant to avoid conflicts in jurisdiction of Courts by placing the supervisory jurisdiction over all arbitral pro- ceedings in connection with the arbitration in one Court exclusively. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 42']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.216850280761719
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['LA Act, 1894']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: This is so, although, the State enactments may refer to the provisions of LA Act, 1894 for certain purposes. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['LA Act, 1894']"", ""WITNESS"": ""[]""}",7.294969797134399
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.09.2006', '10.04.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The appellants filed their counter affidavit in the writ petition on 08.09.2006 and the writ petition was finally heard and decided by the High Court by its impugned judgment dated 10.04.2017. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['08.09.2006', '10.04.2017']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.285403490066528
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vijayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: c) By that time, Smt.Vijayalakshmi, her husband, he, CW-2 and police were present. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Vijayalakshmi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.929018259048462
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['P.A. Inamdar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 6.1.3 In P.A. Inamdar (supra), the Supreme Court while answering question no. 3 held that every institution is free to devise its own fee structure but the same can be regulated in the interest of preventing profiteering. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['P.A. Inamdar']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.18722915649414
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 176']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Contract Act, 1872']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Pledgor further agrees that the notice period provided under this Notice, from the date of this Notice till the Enforcement Date is reasonable notice of any enforcement action in respect of the Security, including for the purposes of section 176 of the Indian Contract Act, 1872. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['section 176']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Indian Contract Act, 1872']"", ""WITNESS"": ""[]""}",8.565642595291138
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Most of these buses for all practical purposes operate as stage carriage services masquerading as contract carriages. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.2238240242004395
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['August 2, 1958']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Both the telegrams transmitted or imparted information to the respondent that he was suspended from service with effect from August 2, 1958. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['August 2, 1958']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.246477842330933
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 26.1.2 Multiple linear scratches over right subcostal and lumbar regions in area of 10*10 cms. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.127532720565796
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court', 'Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Jayachandran Alloys (P) Ltd. Vs. Superintendent of GST & C. Ex., Salem 2019 (25) G.S.T.L. 321 (Mad.)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 7.1 Relying upon decision of Delhi High Court, in the case of Jayachandran Alloys (P) Ltd. Vs. Superintendent of GST & C. Ex., Salem 2019 (25) G.S.T.L. 321 (Mad.), Madras High Court has concluded, in the relevant Paras as below: "" 36. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Delhi High Court', 'Madras High Court']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Jayachandran Alloys (P) Ltd. Vs. Superintendent of GST & C. Ex., Salem 2019 (25) G.S.T.L. 321 (Mad.)']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.86954116821289
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Court of JMFC, Lahar, District Bhind']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302,307,147,148,149, 201', 'Section 25/27']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['PC', 'Arms Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: (5) After completion of investigation, charge-sheet under Sections 302,307,147,148,149, 201 PC and Section 25/27 of the Arms Act was filed before the Court of JMFC, Lahar, District Bhind from where case committed to the Court of Session. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Court of JMFC, Lahar', 'Court of Session']"", ""DATE"": ""[]"", ""GPE"": ""['Bhind']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302,307,147,148,149, 201 PC and Section 25/27']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Arms Act']"", ""WITNESS"": ""[]""}",10.816084623336792
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Undisputedly, AO has initially made disallowance of Rs.1,34,56,177/- claimed as expenditure by the assessee under the head ""legal, professional and consultancy charges"", which amount has been restricted by ld. CIT (A) in appeal to Rs.71,59,700/-. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.275125741958618
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['5 th February 2016', '8 th February 2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The Petitioners expressed their inability to remain present on 5 th February 2016 and expressed that they would remain present on 8 th February 2016 for collecting amount of compensation along with interest. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['5 th February 2016', '8 th February 2016']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.488572120666504
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['06.06.1988']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: First Appellate Court has also found the sale deed dated 06.06.1988 in ""stark violation of the order passed by the Court."" [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['06.06.1988']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.9397242069244385
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['8.12.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 8.12.2006, P.W.18 also arrested accused Nos.2 and 3 and sent all the accused for remand. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['8.12.2006']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.259355306625366
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['N.B.C.C. Limited']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Hindustan Wires Limited v. R.Suresh']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: 51) The learned counsel for the respondents relied upon the judgment of in Hindustan Wires Limited v. R.Suresh (6 supra) and also N.B.C.C. Limited (12 supra), to contend that as the time period for conclusion of proceedings had expired and in the absence of any application seeking extension of time, the arbitrator ceases to have jurisdiction. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['Hindustan Wires Limited v. R.Suresh', 'N.B.C.C. Limited']"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.46239185333252
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1993 Jammu and Kashmir 69 [Nahar Singh and another v. Manohar Kumar and others]']"", ""PROVISION"": ""['Section 110-B', 'Section 110-D.']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Unless a person was saddled with any liability in any manner under Section 110-B, he would not be a ""person aggrieved"" within the meaning of the term employed in Section 110-D. ................................................. (3) AIR 1993 Jammu and Kashmir 69 [Nahar Singh and another v. Manohar Kumar and others]: 6. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Nahar Singh']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""['AIR 1993 Jammu and Kashmir 69']"", ""PROVISION"": ""['Section 110-B', 'Section 110-D']"", ""RESPONDENT"": ""['Manohar Kumar']"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",10.806407451629639
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Majjigere', 'Majjigere Village']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: She admits that Majjigere is situated half a kilometer in the arecanut garden and about 20 house are there in Majjigere Village. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Majjigere']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.111058235168457
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bangladesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Reshma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Reshma, is also a resident of Bangladesh. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Bangladesh']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Reshma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.60260796546936
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: These three heads make up nearly 40 per cent of the annual operating and administrative expenditure of Rs.13,92,000/-. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.688980340957642
"{""CASE_NUMBER"": ""['Crl.P. No.152 of 2020']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections - 188, 270 and 273']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In the present case, the police have registered the crime for the offences KL,J Crl.P. No.152 of 2020 & batch under Sections - 188, 270 and 273 of IPC. [/INST]
 {""CASE_NUMBER"": ""['KL,J Crl.P. No.152 of 2020']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections - 188, 270 and 273']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",10.538368225097656
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Such person shall be liable to a penalty which shall not be less than Rupees one lakh but it may extend to Rupees one crore. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.3440656661987305
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: , the body is divided into different areas, each representing nine per cent. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.914342880249023
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.2.2012', '14.11.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: As it is clearly proved by the accused that even if the rate of interest is calculated from the date of loan , i.e from 15.2.2012 to 14.11.2014 , for the period of 2 years 9 months it would amount to Rs.88,000/- if calculated at the rate of 16% p.a. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['15.2.2012', '14.11.2014']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.7610719203948975
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagrutiben']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Coming back to Jagrutiben, she was not an eye­witness, admittedly, and has no personal knowledge and it is apparent from the report she has stated that the deceased left the house for a morning walk at around 0645 hours/0700 hours. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Jagrutiben']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.45832633972168
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['NGT']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['State of UP']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The State of UP set out the factual position about the grant of leases before the NGT in an affidavit filed in this behalf. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['NGT']"", ""DATE"": ""[]"", ""GPE"": ""['UP']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.987837076187134
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['London']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: When therefore there is an express designa- tion of the arbitration venue as London and no desig- nation of any alternative place as the seat, combined with a supranational body of rules governing the arbi- tration and no other significant contrary indicia, the in- exorable conclusion is, to my mind, that London is the juridical seat and English law the curial law. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['London']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.422337532043457
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['S.R.N. Hospital', 'Medical Collage, Allahabad']"", ""OTHER_PERSON"": ""['Anil Kumar Jaiswal', 'P.K. Pandey']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On his request, we appoint Shri Anil Kumar Jaiswal, Advocate (Roll No. 10033/12), as an Advocate Commissioner, to visit S.R.N. Hospital, attached to Medical Collage, Allahabad, accompanying Shri P.K. Pandey, learned Chief Standing Counsel, today itself, in day's time and submit report by tomorrow. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""['Allahabad']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['S.R.N. Hospital', 'Medical Collage']"", ""OTHER_PERSON"": ""['P.K. Pandey']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.181134700775146
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: In this case the delay caused is 15 days. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.241328954696655
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""['Rajiv Ranjan']""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Dr. Rajiv Ranjan (P.W.10) is an independent expert witness who conducted the postmortem. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Rajiv Ranjan']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.045423746109009
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The petitioner having collected Service Tax, is obliged to deposit the collected tax with the authorities. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.018612146377563
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 1(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Secondly, the learned counsel submits that Section 1(4) of the said 1948 Act primary applies to factories. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 1(4)']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['1948 Act']"", ""WITNESS"": ""[]""}",7.40652322769165
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26.08.2015']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: A certificate claimed to have been issued by Gram Pradhan on 26.08.2015 that after construction of Mosque at the disputed land, Namaz is being offered in the aforesaid Mosque. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""['26.08.2015']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.674201965332031
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['India']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(d)', 'Section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Orissa Entry Tax Act, 1999', 'Kerala Act', 'Bihar Act, 1993']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: One of the questions which was framed for consideration by the Supreme Court was whether Section 2(d) read with Section 3 of Orissa Entry Tax Act, 1999, Section 2(d) read with Section 3 of Kerala Act and Bihar Act, 1993 (before its amendment in 2003), never intended to levy any entry tax on the goods, entering into local area of the State from any place outside the territory of India. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Supreme Court']"", ""DATE"": ""[]"", ""GPE"": ""['Orissa', 'Kerala', 'Bihar']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 2(d)', 'Section 3']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Orissa Entry Tax Act, 1999', 'Kerala Act', 'Bihar Act, 1993']"", ""WITNESS"": ""[]""}",11.098339557647705
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: There is no mechanism for Patna High Court REQ. CASE No. 146 of 2019 dt.03-07-2020 the adjudicatory process of the disputes or claims of a private party under the Recovery Act. [/INST]
 {""CASE_NUMBER"": ""['CASE No. 146 of 2019']"", ""COURT"": ""['Patna High Court']"", ""DATE"": ""['03-07-2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Recovery Act']"", ""WITNESS"": ""[]""}",8.749078273773193
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Mr. Arun Bharadwaj, ld. CGSC, appearing for the Union of India, has Signature Not Verified Digitally Signed By:PRATHIBA M SINGH Signing Date:09.10.2020 16:15 Digitally Signed By:SINDHU KRISHNAKUMAR Signing Date:09.10.2020 16:50:02 reiterated the submissions made by Dr. Singhvi and has further submitted that this petition ought to be heard with the OA No. 291/138/2020 pending before the CAT. [/INST]
 {""CASE_NUMBER"": ""['OA No. 291/138/2020']"", ""COURT"": ""[]"", ""DATE"": ""['09.10.2020']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""['Arun Bharadwaj', 'Sindhu Krishnakumar']"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Prathiba M Singh', 'Dr. Singhvi']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",11.56350326538086
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Succession Act']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: It cannot be assumed having regard to this development that in enacting Section 14 of the Hindu Succession Act, the legislature merely intended to declare the rule enunciated by the Privy Council in Pratapmull case. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Pratapmull']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Section 14']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['Hindu Succession Act']"", ""WITNESS"": ""[]""}",8.236643314361572
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The suit and the proceedings would be a futile exercise and not capable of giving a valid and an executable decree after its withdrawal by the original plaintiff and the decree if any that can be passed in the suit would not bind on the plaintiff Sakha Yogam or its members/office bearers unless they have been made as a party to the suit. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['Sakha Yogam']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.8298797607421875
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""['Additional Sessions Judge, Fast Track Court, Kashipur, District Udham Singh Nagar']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302/149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: That, on conclusion of the trial, the learned Additional Sessions Judge, Fast Track Court, Kashipur, District Udham Singh Nagar (hereinafter referred to as “the trial Court”) held all the accused guilty for the offences under Sections 302/149 of the IPC and sentenced them to undergo life imprisonment and a fine of Rs.2,000/­ each and, in case of default in paying the fine, to undergo one year RI. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""['Additional Sessions Judge, Fast Track Court, Kashipur, District Udham Singh Nagar']"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""['Sections 302/149']"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""['IPC']"", ""WITNESS"": ""[]""}",10.021530628204346
"{""CASE_NUMBER"": ""['O.S.No.31/2009']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Channaraddi', 'Gangavva', 'Mallamma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: Apparently, Channaraddi set up his daughters Gangavva and Mallamma to impede and defeat the proceedings in O.S.No.31/2009. [/INST]
 {""CASE_NUMBER"": ""['O.S.No.31/2009']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""['Channaraddi', 'Gangavva', 'Mallamma']"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.463137149810791
"{""CASE_NUMBER"": ""['F.C.O.P.No.41 of 2012']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: After the dismissal of the petition for annulment of marriage, the respondent/wife filed F.C.O.P.No.41 of 2012 for restitution of conjugal rights. [/INST]
 {""CASE_NUMBER"": ""['F.C.O.P.No.41']"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",8.642039060592651
"{""CASE_NUMBER"": ""['Special Case (NDPS) No.17 of 2018']"", ""COURT"": ""['Additional Sessions Judge, Omerga, Maharashtra']"", ""DATE"": ""['12.07.2018']"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['D.R.I., Bangalore']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: On 12.07.2018, a letter was received from the Additional Sessions Judge, Omerga, Maharashtra asking to handover the custody of appellants to D.R.I., Bangalore as they were required to appear before the Additional Sessions Judge, Omerga, Maharashtra in Special Case (NDPS) No.17 of 2018. [/INST]
 {""CASE_NUMBER"": ""['Special Case (NDPS) No.17 of 2018']"", ""COURT"": ""['Additional Sessions Judge, Omerga']"", ""DATE"": ""['12.07.2018']"", ""GPE"": ""['Maharashtra']"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""['D.R.I., Bangalore']"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",9.988869190216064
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The date on which the measurements were recorded and the entries in the measurement book are inconsistent. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",7.540132522583008
"{""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}","[INST] [INST] You are solving the NER problem in indian legal documents. You have to extract from the text, entities related to each of the following categories: CASE_NUMBER, COURT, DATE, GPE, JUDGE, LAWYER, ORG, OTHER_PERSON, PETITIONER, PRECEDENT, PROVISION, RESPONDENT, STATUTE, WITNESS. Extract them exactly as they are in the text (Don't format them). Be careful with synonyms, some categories can be found under other names. Your output always should be a dictionary in a json readable format (category: list of entities). Find the entities in the following text: The lower back end was 5 cm behind root of right ear lobule. [/INST]
 {""CASE_NUMBER"": ""[]"", ""COURT"": ""[]"", ""DATE"": ""[]"", ""GPE"": ""[]"", ""JUDGE"": ""[]"", ""LAWYER"": ""[]"", ""ORG"": ""[]"", ""OTHER_PERSON"": ""[]"", ""PETITIONER"": ""[]"", ""PRECEDENT"": ""[]"", ""PROVISION"": ""[]"", ""RESPONDENT"": ""[]"", ""STATUTE"": ""[]"", ""WITNESS"": ""[]""}",6.585018634796143
